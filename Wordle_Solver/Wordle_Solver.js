//╔════════╗
//║ To Do: ║
//╠════════╩══════════════════════════════════════════════════════════════╗
//║ minor bug: day# 635, Answer=CIDER, Guess=CEDER, results include CEDER ║
//╚═══════════════════════════════════════════════════════════════════════╝
//╔══════════════════════════════════════════════════════════════════════════════════════╗
//║ Wordle solutions can be found here:                                                  ║
//║ https://medium.com/@owenyin/here-lies-wordle-2021-2027-full-answer-list-52017ee99e86 ║
//║ https://gamerant.com/todays-wordle-solution-every-answer-ny-times-archive/           ║
//╚══════════════════════════════════════════════════════════════════════════════════════╝
//╔══════════════════════════════════════════════════════════════════════════════════════╗
//║ solve the real Wordle with JavaScript code injection!                                ║
//║ https://medium.com/@capJavert/re-hacking-wordle-114ba75d1344                         ║
//╚══════════════════════════════════════════════════════════════════════════════════════╝
//╔══════════════════════════════════════════════════════════════════════════════════════╗
//║ using cURL to get a solution for a specific date:                                    ║
//║ https://nonamesecurity.com/blog/tomorrows-wordle-is-pwned                            ║
//║ the following terminal command will fetch the 'solution' for the date provided:      ║
//║ curl --silent "https://www.nytimes.com/svc/wordle/v2/YYYY-MM-DD.json"                ║
//╚══════════════════════════════════════════════════════════════════════════════════════╝
//╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
//║ curl --silent "https://www.nytimes.com/svc/wordle/v2/YYYY-MM-DD.json" | jq --raw-output '.solution' | tr '[:lower:]' '[:upper:]'           ║
//║ tr '[:lower:]' '[:upper:]' <<< $(jq --raw-output '.solution' <<< $(curl --silent "https://www.nytimes.com/svc/wordle/v2/2023-06-05.json")) ║
//║ awk '{print toupper($0)}' <<< $(jq --raw-output '.solution' <<< $(curl --silent "https://www.nytimes.com/svc/wordle/v2/2023-06-05.json"))  ║
//║ the following macOS terminal commands for zsh will create a function for the session that can be called subsequently:                      ║
//║ getSolution() { result=$(curl --silent "https://www.nytimes.com/svc/wordle/v2/$1.json" | jq --raw-output 'if has("solution") then .solution else empty end'); if [[ -n $result ]]; then result_upper=$(echo "$result" | tr '[:lower:]' '[:upper:]'); printf "\033[32m%s\033[0m\n" "$result_upper"; else echo "\033[31mno solution found\!\033[0m"; fi }
//║ getSolution 2023-06-12                                                                                                                     ║
//╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
//import { Fireworks } from 'fireworks-js';
//import { ToastMaker } from 'toastmaker';
//#region word arrays
const aryAllPossibleGuesses = [
  'AAHED', 'AALII', 'AAPAS', 'AARGH', 'AARTI', 'ABACA', 'ABACI', 'ABACK', 'ABACS', 'ABAFT', 'ABAHT', 'ABAKA', 'ABAMP', 'ABAND', 'ABASE', 'ABASH', 'ABASK', 'ABATE', 'ABAYA', 'ABBAS', 'ABBED', 'ABBES', 'ABBEY', 'ABBOT', 'ABCEE', 'ABEAM', 'ABEAR', 'ABEAT', 'ABEER', 'ABELE', 'ABENG', 'ABERS', 'ABETS', 'ABEYS', 'ABHOR', 'ABIDE', 'ABIES', 'ABIUS', 'ABJAD', 'ABJUD', 'ABLED', 'ABLER', 'ABLES', 'ABLET', 'ABLOW', 'ABMHO', 'ABNET', 'ABODE', 'ABOHM', 'ABOIL', 'ABOMA', 'ABOON', 'ABORD', 'ABORE', 'ABORN', 'ABORT', 'ABOUT', 'ABOVE', 'ABRAM', 'ABRAY', 'ABRIM', 'ABRIN', 'ABRIS', 'ABSEY', 'ABSIT', 'ABUNA', 'ABUNE', 'ABURA', 'ABURN', 'ABUSE', 'ABUTS', 'ABUZZ', 'ABYES', 'ABYSM', 'ABYSS', 'ACAIS', 'ACARA', 'ACARI', 'ACCAS', 'ACCHA', 'ACCOY', 'ACCRA', 'ACEDY', 'ACENE', 'ACERB', 'ACERS', 'ACETA', 'ACHAR', 'ACHED', 'ACHER', 'ACHES', 'ACHEY', 'ACHOO', 'ACIDS', 'ACIDY', 'ACIES', 'ACING', 'ACINI', 'ACKEE', 'ACKER', 'ACMES', 'ACMIC', 'ACNED', 'ACNES', 'ACOCK', 'ACOEL', 'ACOLD', 'ACONE', 'ACORN', 'ACRAL', 'ACRED', 'ACRES', 'ACRID', 'ACRON', 'ACROS', 'ACRYL', 'ACTAS', 'ACTED', 'ACTIN', 'ACTON', 'ACTOR', 'ACTUS', 'ACUTE', 'ACYLS', 'ADAGE', 'ADAPT', 'ADATS', 'ADAWN', 'ADAWS', 'ADAYS', 'ADBOT', 'ADDAS', 'ADDAX', 'ADDED', 'ADDER', 'ADDIN', 'ADDIO', 'ADDLE', 'ADDRA', 'ADEAD', 'ADEEM', 'ADEPT', 'ADHAN', 'ADHOC', 'ADIEU', 'ADIOS', 'ADITS', 'ADLIB', 'ADMAN', 'ADMEN', 'ADMIN', 'ADMIT', 'ADMIX', 'ADNEX', 'ADOBE', 'ADOBO', 'ADOON', 'ADOPT', 'ADORB', 'ADORE', 'ADORN', 'ADOWN', 'ADOZE', 'ADRAD', 'ADRAW', 'ADRED', 'ADRET', 'ADRIP', 'ADSUM', 'ADUKI', 'ADULT', 'ADUNC', 'ADUST', 'ADVEW', 'ADVTS', 'ADYTA', 'ADYTS', 'ADZED', 'ADZES', 'AECIA', 'AEDES', 'AEGER', 'AEGIS', 'AEONS', 'AERIE', 'AEROS', 'AESIR', 'AEVUM', 'AFALD', 'AFANC', 'AFARA', 'AFARS', 'AFEAR', 'AFFIX', 'AFFLY', 'AFION', 'AFIRE', 'AFIZZ', 'AFLAJ', 'AFLAP', 'AFLOW', 'AFOAM', 'AFOOT', 'AFORE', 'AFOUL', 'AFRET', 'AFRIT', 'AFROS', 'AFTER', 'AFTOS', 'AGAIN', 'AGALS', 'AGAMA', 'AGAMI', 'AGAMY', 'AGAPE', 'AGARS', 'AGASP', 'AGAST', 'AGATE', 'AGATY', 'AGAVE', 'AGAZE', 'AGBAS', 'AGENE', 'AGENT', 'AGERS', 'AGGAG', 'AGGER', 'AGGIE', 'AGGRI', 'AGGRO', 'AGGRY', 'AGHAS', 'AGIDI', 'AGILA', 'AGILE', 'AGING', 'AGIOS', 'AGISM', 'AGIST', 'AGITA', 'AGLEE', 'AGLET', 'AGLEY', 'AGLOO', 'AGLOW', 'AGLUS', 'AGMAS', 'AGOGE', 'AGOGO', 'AGONE', 'AGONS', 'AGONY', 'AGOOD', 'AGORA', 'AGREE', 'AGRIA', 'AGRIN', 'AGROS', 'AGRUM', 'AGUED', 'AGUES', 'AGUEY', 'AGUNA', 'AGUSH', 'AGUTI', 'AHEAD', 'AHEAP', 'AHENT', 'AHIGH', 'AHIND', 'AHING', 'AHINT', 'AHOLD', 'AHOLE', 'AHULL', 'AHURU', 'AIDAS', 'AIDED', 'AIDER', 'AIDES', 'AIDOI', 'AIDOS', 'AIERY', 'AIGAS', 'AIGHT', 'AILED', 'AIMAG', 'AIMAK', 'AIMED', 'AIMER', 'AINEE', 'AINGA', 'AIOLI', 'AIRED', 'AIRER', 'AIRNS', 'AIRTH', 'AIRTS', 'AISLE', 'AITCH', 'AITUS', 'AIVER', 'AIXES', 'AIYAH', 'AIYEE', 'AIYOH', 'AIYOO', 'AIZLE', 'AJIES', 'AJIVA', 'AJUGA', 'AJUPA', 'AJWAN', 'AKARA', 'AKEES', 'AKELA', 'AKENE', 'AKING', 'AKITA', 'AKKAS', 'AKKER', 'AKOIA', 'AKOJA', 'AKOYA', 'AKSED', 'AKSES', 'ALAAP', 'ALACK', 'ALALA', 'ALAMO', 'ALAND', 'ALANE', 'ALANG', 'ALANS', 'ALANT', 'ALAPA', 'ALAPS', 'ALARM', 'ALARY', 'ALATA', 'ALATE', 'ALAYS', 'ALBAS', 'ALBEE', 'ALBID', 'ALBUM', 'ALCEA', 'ALCES', 'ALCID', 'ALCOS', 'ALDEA', 'ALDER', 'ALDOL', 'ALEAK', 'ALECK', 'ALECS', 'ALEEM', 'ALEFS', 'ALEFT', 'ALEPH', 'ALERT', 'ALEWS', 'ALEYE', 'ALFAS', 'ALGAE', 'ALGAL', 'ALGAS', 'ALGID', 'ALGIN', 'ALGOR', 'ALGOS', 'ALGUM', 'ALIAS', 'ALIBI', 'ALICK', 'ALIEN', 'ALIFS', 'ALIGN', 'ALIKE', 'ALIMS', 'ALINE', 'ALIOS', 'ALIST', 'ALIVE', 'ALIYA', 'ALKIE', 'ALKIN', 'ALKOS', 'ALKYD', 'ALKYL', 'ALLAN', 'ALLAY', 'ALLEE', 'ALLEL', 'ALLEN', 'ALLER', 'ALLEY', 'ALLIN', 'ALLIS', 'ALLOD', 'ALLOT', 'ALLOW', 'ALLOY', 'ALLUS', 'ALLYL', 'ALMAH', 'ALMAS', 'ALMEH', 'ALMES', 'ALMUD', 'ALMUG', 'ALODS', 'ALOED', 'ALOES', 'ALOFT', 'ALOHA', 'ALOIN', 'ALONE', 'ALONG', 'ALOOF', 'ALOOS', 'ALOSE', 'ALOUD', 'ALOWE', 'ALPHA', 'ALTAR', 'ALTER', 'ALTHO', 'ALTOS', 'ALULA', 'ALUMS', 'ALUMY', 'ALURE', 'ALURK', 'ALVAR', 'ALWAY', 'AMAHS', 'AMAIN', 'AMARI', 'AMARO', 'AMASS', 'AMATE', 'AMAUT', 'AMAZE', 'AMBAN', 'AMBER', 'AMBIT', 'AMBLE', 'AMBOS', 'AMBRY', 'AMEBA', 'AMEER', 'AMEND', 'AMENE', 'AMENS', 'AMENT', 'AMIAS', 'AMICE', 'AMICI', 'AMIDE', 'AMIDO', 'AMIDS', 'AMIES', 'AMIGA', 'AMIGO', 'AMINE', 'AMINO', 'AMINS', 'AMIRS', 'AMISS', 'AMITY', 'AMLAS', 'AMMAN', 'AMMAS', 'AMMON', 'AMMOS', 'AMNIA', 'AMNIC', 'AMNIO', 'AMOKS', 'AMOLE', 'AMONG', 'AMORE', 'AMORT', 'AMOUR', 'AMOVE', 'AMOWT', 'AMPED', 'AMPLE', 'AMPLY', 'AMPUL', 'AMRIT', 'AMUCK', 'AMUSE', 'AMYLS', 'ANANA', 'ANATA', 'ANCHO', 'ANCLE', 'ANCON', 'ANDIC', 'ANDRO', 'ANEAR', 'ANELE', 'ANENT', 'ANGAS', 'ANGEL', 'ANGER', 'ANGLE', 'ANGLO', 'ANGRY', 'ANGST', 'ANIGH', 'ANILE', 'ANILS', 'ANIMA', 'ANIME', 'ANIMI', 'ANION', 'ANISE', 'ANKER', 'ANKHS', 'ANKLE', 'ANKUS', 'ANLAS', 'ANNAL', 'ANNAN', 'ANNAS', 'ANNAT', 'ANNEX', 'ANNOY', 'ANNUL', 'ANNUM', 'ANNUS', 'ANOAS', 'ANODE', 'ANOLE', 'ANOMY', 'ANSAE', 'ANSAS', 'ANTAE', 'ANTAR', 'ANTAS', 'ANTED', 'ANTES', 'ANTIC', 'ANTIS', 'ANTRA', 'ANTRE', 'ANTSY', 'ANURA', 'ANVIL', 'ANYON', 'AORTA', 'APACE', 'APAGE', 'APAID', 'APART', 'APAYD', 'APAYS', 'APEAK', 'APEEK', 'APERS', 'APERT', 'APERY', 'APGAR', 'APHID', 'APHIS', 'APIAN', 'APING', 'APIOL', 'APISH', 'APISM', 'APNEA', 'APODE', 'APODS', 'APOLS', 'APOOP', 'APORT', 'APPAL', 'APPAM', 'APPAY', 'APPEL', 'APPLE', 'APPLY', 'APPRO', 'APPTS', 'APPUI', 'APPUY', 'APRES', 'APRON', 'APSES', 'APSIS', 'APSOS', 'APTED', 'APTER', 'APTLY', 'AQUAE', 'AQUAS', 'ARABA', 'ARAKS', 'ARAME', 'ARARS', 'ARBAH', 'ARBAS', 'ARBOR', 'ARCED', 'ARCHI', 'ARCOS', 'ARCUS', 'ARDEB', 'ARDOR', 'ARDRI', 'AREAD', 'AREAE', 'AREAL', 'AREAR', 'AREAS', 'ARECA', 'AREDD', 'AREDE', 'AREFY', 'AREIC', 'ARENA', 'ARENE', 'AREPA', 'ARERE', 'ARETE', 'ARETS', 'ARETT', 'ARGAL', 'ARGAN', 'ARGIL', 'ARGLE', 'ARGOL', 'ARGON', 'ARGOT', 'ARGUE', 'ARGUS', 'ARHAT', 'ARIAS', 'ARIEL', 'ARIKI', 'ARILS', 'ARIOT', 'ARISE', 'ARISH', 'ARITH', 'ARKED', 'ARLED', 'ARLES', 'ARMED', 'ARMER', 'ARMET', 'ARMIL', 'ARMOR', 'ARNAS', 'ARNIS', 'ARNUT', 'AROBA', 'AROHA', 'AROID', 'AROMA', 'AROSE', 'ARPAS', 'ARPEN', 'ARRAH', 'ARRAS', 'ARRAY', 'ARRET', 'ARRIS', 'ARROW', 'ARROZ', 'ARSED', 'ARSES', 'ARSEY', 'ARSIS', 'ARSON', 'ARTAL', 'ARTEL', 'ARTER', 'ARTIC', 'ARTIS', 'ARTLY', 'ARTSY', 'ARUHE', 'ARUMS', 'ARVAL', 'ARVEE', 'ARVOS', 'ARYLS', 'ASADA', 'ASANA', 'ASCON', 'ASCOT', 'ASCUS', 'ASDIC', 'ASHED', 'ASHEN', 'ASHES', 'ASHET', 'ASIDE', 'ASITY', 'ASKAR', 'ASKED', 'ASKER', 'ASKEW', 'ASKOI', 'ASKOS', 'ASPEN', 'ASPER', 'ASPIC', 'ASPIE', 'ASPIS', 'ASPRO', 'ASSAI', 'ASSAM', 'ASSAY', 'ASSED', 'ASSES', 'ASSET', 'ASSEZ', 'ASSOT', 'ASTER', 'ASTIR', 'ASTUN', 'ASURA', 'ASWAY', 'ASWIM', 'ASYLA', 'ATAPS', 'ATAXY', 'ATIGI', 'ATILT', 'ATIMY', 'ATLAS', 'ATMAN', 'ATMAS', 'ATMOS', 'ATOCS', 'ATOKE', 'ATOKS', 'ATOLL', 'ATOMS', 'ATOMY', 'ATONE', 'ATONY', 'ATOPY', 'ATRIA', 'ATRIP', 'ATTAP', 'ATTAR', 'ATTAS', 'ATTER', 'ATTIC', 'ATUAS', 'AUCHT', 'AUDAD', 'AUDAX', 'AUDIO', 'AUDIT', 'AUGEN', 'AUGER', 'AUGES', 'AUGHT', 'AUGUR', 'AULAS', 'AULIC', 'AULOI', 'AULOS', 'AUMIL', 'AUNES', 'AUNTS', 'AUNTY', 'AURAE', 'AURAL', 'AURAR', 'AURAS', 'AUREI', 'AURES', 'AURIC', 'AURIS', 'AURUM', 'AUTOS', 'AUXIN', 'AVAIL', 'AVALE', 'AVANT', 'AVAST', 'AVELS', 'AVENS', 'AVERS', 'AVERT', 'AVGAS', 'AVIAN', 'AVINE', 'AVION', 'AVISE', 'AVISO', 'AVIZE', 'AVOID', 'AVOWS', 'AVYZE', 'AWAIT', 'AWAKE', 'AWARD', 'AWARE', 'AWARI', 'AWARN', 'AWASH', 'AWATO', 'AWAVE', 'AWAYS', 'AWDLS', 'AWEEL', 'AWETO', 'AWFUL', 'AWING', 'AWKIN', 'AWMRY', 'AWNED', 'AWNER', 'AWOKE', 'AWOLS', 'AWORK', 'AXELS', 'AXIAL', 'AXILE', 'AXILS', 'AXING', 'AXIOM', 'AXION', 'AXITE', 'AXLED', 'AXLES', 'AXMAN', 'AXMEN', 'AXOID', 'AXONE', 'AXONS', 'AYAHS', 'AYAYA', 'AYELP', 'AYGRE', 'AYINS', 'AYMAG', 'AYONT', 'AYRES', 'AYRIE', 'AZANS', 'AZIDE', 'AZIDO', 'AZINE', 'AZLON', 'AZOIC', 'AZOLE', 'AZONS', 'AZOTE', 'AZOTH', 'AZUKI', 'AZURE', 'AZURN', 'AZURY', 'AZYGY', 'AZYME', 'AZYMS', 'BAAED', 'BAALS', 'BAAPS', 'BABAS', 'BABBY', 'BABEL', 'BABES', 'BABKA', 'BABOO', 'BABUL', 'BABUS', 'BACCA', 'BACCO', 'BACCY', 'BACHA', 'BACHS', 'BACKS', 'BACKY', 'BACNE', 'BACON', 'BADAM', 'BADDY', 'BADGE', 'BADLY', 'BAELS', 'BAFFS', 'BAFFY', 'BAFTA', 'BAFTS', 'BAGEL', 'BAGGY', 'BAGHS', 'BAGIE', 'BAGSY', 'BAGUA', 'BAHTS', 'BAHUS', 'BAHUT', 'BAIKS', 'BAILE', 'BAILS', 'BAIRN', 'BAISA', 'BAITH', 'BAITS', 'BAIZA', 'BAIZE', 'BAJAN', 'BAJRA', 'BAJRI', 'BAJUS', 'BAKED', 'BAKEN', 'BAKER', 'BAKES', 'BAKRA', 'BALAS', 'BALDS', 'BALDY', 'BALED', 'BALER', 'BALES', 'BALKS', 'BALKY', 'BALLO', 'BALLS', 'BALLY', 'BALMS', 'BALMY', 'BALOI', 'BALON', 'BALOO', 'BALOT', 'BALSA', 'BALTI', 'BALUN', 'BALUS', 'BALUT', 'BAMAS', 'BAMBI', 'BAMMA', 'BAMMY', 'BANAK', 'BANAL', 'BANCO', 'BANCS', 'BANDA', 'BANDH', 'BANDS', 'BANDY', 'BANED', 'BANES', 'BANGS', 'BANIA', 'BANJO', 'BANKS', 'BANKY', 'BANNS', 'BANTS', 'BANTU', 'BANTY', 'BANTZ', 'BANYA', 'BAONS', 'BAOZI', 'BAPPU', 'BAPUS', 'BARBE', 'BARBS', 'BARBY', 'BARCA', 'BARDE', 'BARDO', 'BARDS', 'BARDY', 'BARED', 'BARER', 'BARES', 'BARFI', 'BARFS', 'BARFY', 'BARGE', 'BARIC', 'BARKS', 'BARKY', 'BARMS', 'BARMY', 'BARNS', 'BARNY', 'BARON', 'BARPS', 'BARRA', 'BARRE', 'BARRO', 'BARRY', 'BARYE', 'BASAL', 'BASAN', 'BASAS', 'BASED', 'BASEN', 'BASER', 'BASES', 'BASHA', 'BASHO', 'BASIC', 'BASIJ', 'BASIL', 'BASIN', 'BASIS', 'BASKS', 'BASON', 'BASSE', 'BASSI', 'BASSO', 'BASSY', 'BASTA', 'BASTE', 'BASTI', 'BASTO', 'BASTS', 'BATCH', 'BATED', 'BATES', 'BATHE', 'BATHS', 'BATIK', 'BATON', 'BATOS', 'BATTA', 'BATTS', 'BATTU', 'BATTY', 'BAUDS', 'BAUKS', 'BAULK', 'BAURS', 'BAVIN', 'BAWDS', 'BAWDY', 'BAWKS', 'BAWLS', 'BAWNS', 'BAWRS', 'BAWTY', 'BAYAS', 'BAYED', 'BAYER', 'BAYES', 'BAYLE', 'BAYOU', 'BAYTS', 'BAZAR', 'BAZAS', 'BAZOO', 'BBALL', 'BDAYS', 'BEACH', 'BEADS', 'BEADY', 'BEAKS', 'BEAKY', 'BEALS', 'BEAMS', 'BEAMY', 'BEANO', 'BEANS', 'BEANY', 'BEARD', 'BEARE', 'BEARS', 'BEAST', 'BEATH', 'BEATS', 'BEATY', 'BEAUS', 'BEAUT', 'BEAUX', 'BEBOP', 'BECAP', 'BECKE', 'BECKS', 'BEDAD', 'BEDEL', 'BEDES', 'BEDEW', 'BEDIM', 'BEDYE', 'BEECH', 'BEEDI', 'BEEFS', 'BEEFY', 'BEEPS', 'BEERS', 'BEERY', 'BEETS', 'BEFIT', 'BEFOG', 'BEGAD', 'BEGAN', 'BEGAR', 'BEGAT', 'BEGEM', 'BEGET', 'BEGIN', 'BEGOB', 'BEGOT', 'BEGUM', 'BEGUN', 'BEIGE', 'BEIGY', 'BEING', 'BEINS', 'BEIRA', 'BEISA', 'BEKAH', 'BELAH', 'BELAR', 'BELAY', 'BELCH', 'BELEE', 'BELGA', 'BELIE', 'BELIT', 'BELLE', 'BELLI', 'BELLO', 'BELLS', 'BELLY', 'BELON', 'BELOW', 'BELTS', 'BELVE', 'BEMAD', 'BEMAS', 'BEMIX', 'BEMUD', 'BENCH', 'BENDS', 'BENDY', 'BENES', 'BENET', 'BENGA', 'BENIS', 'BENJI', 'BENNE', 'BENNI', 'BENNY', 'BENTO', 'BENTS', 'BENTY', 'BEPAT', 'BERAY', 'BERES', 'BERET', 'BERGS', 'BERKO', 'BERKS', 'BERME', 'BERMS', 'BEROB', 'BERRY', 'BERTH', 'BERYL', 'BESAT', 'BESAW', 'BESEE', 'BESES', 'BESET', 'BESIT', 'BESOM', 'BESOT', 'BESTI', 'BESTS', 'BETAS', 'BETED', 'BETEL', 'BETES', 'BETHS', 'BETID', 'BETON', 'BETTA', 'BETTY', 'BEVAN', 'BEVEL', 'BEVER', 'BEVOR', 'BEVUE', 'BEVVY', 'BEWDY', 'BEWET', 'BEWIG', 'BEZEL', 'BEZES', 'BEZIL', 'BEZZY', 'BHAIS', 'BHAJI', 'BHANG', 'BHATS', 'BHAVA', 'BHELS', 'BHOOT', 'BHUNA', 'BHUTS', 'BIACH', 'BIALI', 'BIALY', 'BIBBS', 'BIBES', 'BIBIS', 'BIBLE', 'BICCY', 'BICEP', 'BICES', 'BICKY', 'BIDDY', 'BIDED', 'BIDER', 'BIDES', 'BIDET', 'BIDIS', 'BIDON', 'BIDRI', 'BIELD', 'BIERS', 'BIFFO', 'BIFFS', 'BIFFY', 'BIFID', 'BIGAE', 'BIGGS', 'BIGGY', 'BIGHA', 'BIGHT', 'BIGLY', 'BIGOS', 'BIGOT', 'BIHON', 'BIJOU', 'BIKED', 'BIKER', 'BIKES', 'BIKIE', 'BIKKY', 'BILAL', 'BILAT', 'BILBO', 'BILBY', 'BILED', 'BILES', 'BILGE', 'BILGY', 'BILKS', 'BILLS', 'BILLY', 'BIMAH', 'BIMAS', 'BIMBO', 'BINAL', 'BINDI', 'BINDS', 'BINER', 'BINES', 'BINGE', 'BINGO', 'BINGS', 'BINGY', 'BINIT', 'BINKS', 'BINKY', 'BINTS', 'BIOGS', 'BIOME', 'BIONS', 'BIONT', 'BIOSE', 'BIOTA', 'BIPED', 'BIPOD', 'BIPPY', 'BIRCH', 'BIRDO', 'BIRDS', 'BIRIS', 'BIRKS', 'BIRLE', 'BIRLS', 'BIROS', 'BIRRS', 'BIRSE', 'BIRSY', 'BIRTH', 'BIRZE', 'BIRZZ', 'BISES', 'BISKS', 'BISOM', 'BISON', 'BITCH', 'BITER', 'BITES', 'BITEY', 'BITOS', 'BITOU', 'BITSY', 'BITTE', 'BITTS', 'BITTY', 'BIVIA', 'BIVVY', 'BIZES', 'BIZZO', 'BIZZY', 'BLABS', 'BLACK', 'BLADE', 'BLADS', 'BLADY', 'BLAER', 'BLAES', 'BLAFF', 'BLAGS', 'BLAHS', 'BLAIN', 'BLAME', 'BLAMS', 'BLANC', 'BLAND', 'BLANK', 'BLARE', 'BLART', 'BLASE', 'BLASH', 'BLAST', 'BLATE', 'BLATS', 'BLATT', 'BLAUD', 'BLAWN', 'BLAWS', 'BLAYS', 'BLAZE', 'BLEAH', 'BLEAK', 'BLEAR', 'BLEAT', 'BLEBS', 'BLECH', 'BLEED', 'BLEEP', 'BLEES', 'BLEND', 'BLENT', 'BLERT', 'BLESS', 'BLEST', 'BLETS', 'BLEYS', 'BLIMP', 'BLIMY', 'BLIND', 'BLING', 'BLINI', 'BLINK', 'BLINS', 'BLINY', 'BLIPS', 'BLISS', 'BLIST', 'BLITE', 'BLITS', 'BLITZ', 'BLIVE', 'BLOAT', 'BLOBS', 'BLOCK', 'BLOCS', 'BLOGS', 'BLOKE', 'BLOND', 'BLONX', 'BLOOD', 'BLOOK', 'BLOOM', 'BLOOP', 'BLORE', 'BLOTS', 'BLOWN', 'BLOWS', 'BLOWY', 'BLUBS', 'BLUDE', 'BLUDS', 'BLUDY', 'BLUED', 'BLUER', 'BLUES', 'BLUET', 'BLUEY', 'BLUFF', 'BLUID', 'BLUME', 'BLUNK', 'BLUNT', 'BLURB', 'BLURS', 'BLURT', 'BLUSH', 'BLYPE', 'BOABS', 'BOAKS', 'BOARD', 'BOARS', 'BOART', 'BOAST', 'BOATS', 'BOATY', 'BOBAC', 'BOBAK', 'BOBAS', 'BOBBY', 'BOBOL', 'BOBOS', 'BOCCA', 'BOCCE', 'BOCCI', 'BOCHE', 'BOCKS', 'BODED', 'BODES', 'BODGE', 'BODGY', 'BODHI', 'BODLE', 'BODOH', 'BOEPS', 'BOERS', 'BOETI', 'BOETS', 'BOEUF', 'BOFFO', 'BOFFS', 'BOGAN', 'BOGEY', 'BOGGY', 'BOGIE', 'BOGLE', 'BOGUE', 'BOGUS', 'BOHEA', 'BOHOS', 'BOILS', 'BOING', 'BOINK', 'BOITE', 'BOKED', 'BOKEH', 'BOKES', 'BOKOS', 'BOLAR', 'BOLAS', 'BOLDO', 'BOLDS', 'BOLES', 'BOLET', 'BOLIX', 'BOLKS', 'BOLLS', 'BOLOS', 'BOLTS', 'BOLUS', 'BOMAS', 'BOMBE', 'BOMBO', 'BOMBS', 'BOMOH', 'BOMOR', 'BONCE', 'BONDS', 'BONED', 'BONER', 'BONES', 'BONEY', 'BONGO', 'BONGS', 'BONIE', 'BONKS', 'BONNE', 'BONNY', 'BONUM', 'BONUS', 'BONZA', 'BONZE', 'BOOAI', 'BOOAY', 'BOOBS', 'BOOBY', 'BOODY', 'BOOED', 'BOOFY', 'BOOGY', 'BOOHS', 'BOOKS', 'BOOKY', 'BOOLS', 'BOOMS', 'BOOMY', 'BOONG', 'BOONS', 'BOORD', 'BOORS', 'BOOSE', 'BOOST', 'BOOTH', 'BOOTS', 'BOOTY', 'BOOZE', 'BOOZY', 'BOPPY', 'BORAK', 'BORAL', 'BORAS', 'BORAX', 'BORDE', 'BORDS', 'BORED', 'BOREE', 'BOREK', 'BOREL', 'BORER', 'BORES', 'BORGO', 'BORIC', 'BORKS', 'BORMS', 'BORNA', 'BORNE', 'BORON', 'BORTS', 'BORTY', 'BORTZ', 'BOSEY', 'BOSIE', 'BOSKS', 'BOSKY', 'BOSOM', 'BOSON', 'BOSSA', 'BOSSY', 'BOSUN', 'BOTAS', 'BOTCH', 'BOTEH', 'BOTEL', 'BOTES', 'BOTEW', 'BOTHY', 'BOTOS', 'BOTTE', 'BOTTS', 'BOTTY', 'BOUGE', 'BOUGH', 'BOUKS', 'BOULE', 'BOULT', 'BOUND', 'BOUNS', 'BOURD', 'BOURG', 'BOURN', 'BOUSE', 'BOUSY', 'BOUTS', 'BOUTU', 'BOVID', 'BOWAT', 'BOWED', 'BOWEL', 'BOWER', 'BOWES', 'BOWET', 'BOWIE', 'BOWLS', 'BOWNE', 'BOWRS', 'BOWSE', 'BOXED', 'BOXEN', 'BOXER', 'BOXES', 'BOXLA', 'BOXTY', 'BOYAR', 'BOYAU', 'BOYED', 'BOYEY', 'BOYFS', 'BOYGS', 'BOYLA', 'BOYLY', 'BOYOS', 'BOYSY', 'BOZOS', 'BRAAI', 'BRACE', 'BRACH', 'BRACK', 'BRACT', 'BRADS', 'BRAES', 'BRAGS', 'BRAHS', 'BRAID', 'BRAIL', 'BRAIN', 'BRAKE', 'BRAKS', 'BRAKY', 'BRAME', 'BRAND', 'BRANE', 'BRANK', 'BRANS', 'BRANT', 'BRASH', 'BRASS', 'BRAST', 'BRATS', 'BRAVA', 'BRAVE', 'BRAVI', 'BRAVO', 'BRAWL', 'BRAWN', 'BRAWS', 'BRAXY', 'BRAYS', 'BRAZA', 'BRAZE', 'BREAD', 'BREAK', 'BREAM', 'BREDE', 'BREDS', 'BREED', 'BREEM', 'BREER', 'BREES', 'BREID', 'BREIS', 'BREME', 'BRENS', 'BRENT', 'BRERE', 'BRERS', 'BREVE', 'BREWS', 'BREYS', 'BRIAR', 'BRIBE', 'BRICK', 'BRIDE', 'BRIEF', 'BRIER', 'BRIES', 'BRIGS', 'BRIKI', 'BRIKS', 'BRILL', 'BRIMS', 'BRINE', 'BRING', 'BRINK', 'BRINS', 'BRINY', 'BRIOS', 'BRISE', 'BRISK', 'BRISS', 'BRITH', 'BRITS', 'BRITT', 'BRIZE', 'BROAD', 'BROCH', 'BROCK', 'BRODS', 'BROGH', 'BROGS', 'BROIL', 'BROKE', 'BROME', 'BROMO', 'BRONC', 'BROND', 'BROOD', 'BROOK', 'BROOL', 'BROOM', 'BROOS', 'BROSE', 'BROSY', 'BROTH', 'BROWN', 'BROWS', 'BRUCK', 'BRUGH', 'BRUHS', 'BRUIN', 'BRUIT', 'BRUJA', 'BRUJO', 'BRULE', 'BRUME', 'BRUNG', 'BRUNT', 'BRUSH', 'BRUSK', 'BRUST', 'BRUTE', 'BRUTS', 'BRUVS', 'BUATS', 'BUAZE', 'BUBAL', 'BUBAS', 'BUBBA', 'BUBBE', 'BUBBY', 'BUBUS', 'BUCHU', 'BUCKO', 'BUCKS', 'BUCKU', 'BUDAS', 'BUDDY', 'BUDED', 'BUDES', 'BUDGE', 'BUDIS', 'BUDOS', 'BUENA', 'BUFFA', 'BUFFE', 'BUFFI', 'BUFFO', 'BUFFS', 'BUFFY', 'BUFOS', 'BUFTY', 'BUGAN', 'BUGGY', 'BUGLE', 'BUHLS', 'BUHRS', 'BUIKS', 'BUILD', 'BUILT', 'BUIST', 'BUKES', 'BUKOS', 'BULBS', 'BULGE', 'BULGY', 'BULKS', 'BULKY', 'BULLA', 'BULLS', 'BULLY', 'BULSE', 'BUMBO', 'BUMFS', 'BUMPH', 'BUMPS', 'BUMPY', 'BUNAS', 'BUNCE', 'BUNCH', 'BUNCO', 'BUNDE', 'BUNDH', 'BUNDS', 'BUNDT', 'BUNDU', 'BUNDY', 'BUNGS', 'BUNGY', 'BUNIA', 'BUNJE', 'BUNJY', 'BUNKO', 'BUNKS', 'BUNNS', 'BUNNY', 'BUNTS', 'BUNTY', 'BUNYA', 'BUOYS', 'BUPPY', 'BURAN', 'BURAS', 'BURBS', 'BURDS', 'BURET', 'BURFI', 'BURGH', 'BURGS', 'BURIN', 'BURKA', 'BURKE', 'BURKS', 'BURLS', 'BURLY', 'BURNS', 'BURNT', 'BUROO', 'BURPS', 'BURQA', 'BURRA', 'BURRO', 'BURRS', 'BURRY', 'BURSA', 'BURSE', 'BURST', 'BUSBY', 'BUSED', 'BUSES', 'BUSHY', 'BUSKS', 'BUSKY', 'BUSSU', 'BUSTI', 'BUSTS', 'BUSTY', 'BUTCH', 'BUTEO', 'BUTES', 'BUTLE', 'BUTOH', 'BUTTE', 'BUTTS', 'BUTTY', 'BUTUT', 'BUTYL', 'BUXOM', 'BUYER', 'BUYIN', 'BUZZY', 'BWANA', 'BWAZI', 'BYDED', 'BYDES', 'BYKED', 'BYKES', 'BYLAW', 'BYRES', 'BYRLS', 'BYSSI', 'BYTES', 'BYWAY', 'CAAED', 'CABAL', 'CABAS', 'CABBY', 'CABER', 'CABIN', 'CABLE', 'CABOB', 'CABOC', 'CABRE', 'CACAO', 'CACAS', 'CACHE', 'CACKS', 'CACKY', 'CACTI', 'CADDY', 'CADEE', 'CADES', 'CADET', 'CADGE', 'CADGY', 'CADIE', 'CADIS', 'CADRE', 'CAECA', 'CAESE', 'CAFES', 'CAFFE', 'CAFFS', 'CAGED', 'CAGER', 'CAGES', 'CAGEY', 'CAGOT', 'CAHOW', 'CAIDS', 'CAINS', 'CAIRD', 'CAIRN', 'CAJON', 'CAJUN', 'CAKED', 'CAKES', 'CAKEY', 'CALFS', 'CALID', 'CALIF', 'CALIX', 'CALKS', 'CALLA', 'CALLE', 'CALLS', 'CALMS', 'CALMY', 'CALOS', 'CALPA', 'CALPS', 'CALVE', 'CALYX', 'CAMAN', 'CAMAS', 'CAMEL', 'CAMEO', 'CAMES', 'CAMIS', 'CAMOS', 'CAMPI', 'CAMPO', 'CAMPS', 'CAMPY', 'CAMUS', 'CANAL', 'CANDO', 'CANDY', 'CANED', 'CANEH', 'CANER', 'CANES', 'CANGS', 'CANID', 'CANNA', 'CANNS', 'CANNY', 'CANOE', 'CANON', 'CANSO', 'CANST', 'CANTI', 'CANTO', 'CANTS', 'CANTY', 'CAPAS', 'CAPAX', 'CAPED', 'CAPER', 'CAPES', 'CAPEX', 'CAPHS', 'CAPIZ', 'CAPLE', 'CAPON', 'CAPOS', 'CAPOT', 'CAPRI', 'CAPUL', 'CAPUT', 'CARAP', 'CARAT', 'CARBO', 'CARBS', 'CARBY', 'CARDI', 'CARDS', 'CARDY', 'CARED', 'CARER', 'CARES', 'CARET', 'CAREX', 'CARGO', 'CARKS', 'CARLE', 'CARLS', 'CARNE', 'CARNS', 'CARNY', 'CAROB', 'CAROL', 'CAROM', 'CARON', 'CARPE', 'CARPI', 'CARPS', 'CARRS', 'CARRY', 'CARSE', 'CARTA', 'CARTE', 'CARTS', 'CARVE', 'CARVY', 'CASAS', 'CASCO', 'CASED', 'CASER', 'CASES', 'CASKS', 'CASKY', 'CASTE', 'CASTS', 'CASUS', 'CATCH', 'CATER', 'CATES', 'CATTY', 'CAUDA', 'CAUKS', 'CAULD', 'CAULK', 'CAULS', 'CAUMS', 'CAUPS', 'CAURI', 'CAUSA', 'CAUSE', 'CAVAS', 'CAVED', 'CAVEL', 'CAVER', 'CAVES', 'CAVIE', 'CAVIL', 'CAVUS', 'CAWED', 'CAWKS', 'CAXON', 'CEASE', 'CEAZE', 'CEBID', 'CECAL', 'CECUM', 'CEDAR', 'CEDED', 'CEDER', 'CEDES', 'CEDIS', 'CEIBA', 'CEILI', 'CEILS', 'CELEB', 'CELLA', 'CELLI', 'CELLO', 'CELLS', 'CELLY', 'CELOM', 'CELTS', 'CENSE', 'CENTO', 'CENTS', 'CENTU', 'CEORL', 'CEPES', 'CERCI', 'CERED', 'CERES', 'CERGE', 'CERIA', 'CERIC', 'CERNE', 'CEROC', 'CEROS', 'CERTS', 'CERTY', 'CESSE', 'CESTA', 'CESTI', 'CETES', 'CETYL', 'CEZVE', 'CHAAP', 'CHAAT', 'CHACE', 'CHACK', 'CHACO', 'CHADO', 'CHADS', 'CHAFE', 'CHAFF', 'CHAFT', 'CHAIN', 'CHAIR', 'CHAIS', 'CHALK', 'CHALS', 'CHAMP', 'CHAMS', 'CHANA', 'CHANG', 'CHANK', 'CHANT', 'CHAOS', 'CHAPE', 'CHAPS', 'CHAPT', 'CHARA', 'CHARD', 'CHARE', 'CHARK', 'CHARM', 'CHARR', 'CHARS', 'CHART', 'CHARY', 'CHASE', 'CHASM', 'CHATS', 'CHAVA', 'CHAVE', 'CHAVS', 'CHAWK', 'CHAWL', 'CHAWS', 'CHAYA', 'CHAYS', 'CHEAP', 'CHEAT', 'CHEBA', 'CHECK', 'CHEDI', 'CHEEB', 'CHEEK', 'CHEEP', 'CHEER', 'CHEET', 'CHEFS', 'CHEKA', 'CHELA', 'CHELP', 'CHEMO', 'CHEMS', 'CHERE', 'CHERT', 'CHESS', 'CHEST', 'CHETH', 'CHEVY', 'CHEWS', 'CHEWY', 'CHIAO', 'CHIAS', 'CHIBA', 'CHIBS', 'CHICA', 'CHICH', 'CHICK', 'CHICO', 'CHICS', 'CHIDE', 'CHIEF', 'CHIEL', 'CHIKO', 'CHIKS', 'CHILD', 'CHILE', 'CHILI', 'CHILL', 'CHIMB', 'CHIME', 'CHIMO', 'CHIMP', 'CHINA', 'CHINE', 'CHING', 'CHINK', 'CHINO', 'CHINS', 'CHIPS', 'CHIRK', 'CHIRL', 'CHIRM', 'CHIRO', 'CHIRP', 'CHIRR', 'CHIRT', 'CHIRU', 'CHITI', 'CHITS', 'CHIVA', 'CHIVE', 'CHIVS', 'CHIVY', 'CHIZZ', 'CHOCK', 'CHOCO', 'CHOCS', 'CHODE', 'CHOGS', 'CHOIL', 'CHOIR', 'CHOKE', 'CHOKO', 'CHOKY', 'CHOLA', 'CHOLI', 'CHOLO', 'CHOMP', 'CHONS', 'CHOOF', 'CHOOK', 'CHOOM', 'CHOON', 'CHOPS', 'CHORD', 'CHORE', 'CHOSE', 'CHOSS', 'CHOTA', 'CHOTT', 'CHOUT', 'CHOUX', 'CHOWK', 'CHOWS', 'CHUBS', 'CHUCK', 'CHUFA', 'CHUFF', 'CHUGS', 'CHUMP', 'CHUMS', 'CHUNK', 'CHURL', 'CHURN', 'CHURR', 'CHUSE', 'CHUTE', 'CHUTS', 'CHYLE', 'CHYME', 'CHYND', 'CIBOL', 'CIDED', 'CIDER', 'CIDES', 'CIELS', 'CIGAR', 'CIGGY', 'CILIA', 'CILLS', 'CIMAR', 'CIMEX', 'CINCH', 'CINCT', 'CINES', 'CINQS', 'CIONS', 'CIPPI', 'CIRCA', 'CIRCS', 'CIRES', 'CIRLS', 'CIRRI', 'CISCO', 'CISSY', 'CISTS', 'CITAL', 'CITED', 'CITEE', 'CITER', 'CITES', 'CIVES', 'CIVET', 'CIVIC', 'CIVIE', 'CIVIL', 'CIVVY', 'CLACH', 'CLACK', 'CLADE', 'CLADS', 'CLAES', 'CLAGS', 'CLAIM', 'CLAIR', 'CLAME', 'CLAMP', 'CLAMS', 'CLANG', 'CLANK', 'CLANS', 'CLAPS', 'CLAPT', 'CLARO', 'CLART', 'CLARY', 'CLASH', 'CLASP', 'CLASS', 'CLAST', 'CLATS', 'CLAUT', 'CLAVE', 'CLAVI', 'CLAWS', 'CLAYS', 'CLEAN', 'CLEAR', 'CLEAT', 'CLECK', 'CLEEK', 'CLEEP', 'CLEFS', 'CLEFT', 'CLEGS', 'CLEIK', 'CLEMS', 'CLEPE', 'CLEPT', 'CLERK', 'CLEVE', 'CLEWS', 'CLICK', 'CLIED', 'CLIES', 'CLIFF', 'CLIFT', 'CLIMB', 'CLIME', 'CLINE', 'CLING', 'CLINK', 'CLINT', 'CLIPE', 'CLIPS', 'CLIPT', 'CLITS', 'CLOAK', 'CLOAM', 'CLOCK', 'CLODS', 'CLOFF', 'CLOGS', 'CLOKE', 'CLOMB', 'CLOMP', 'CLONE', 'CLONK', 'CLONS', 'CLOOP', 'CLOOT', 'CLOPS', 'CLOSE', 'CLOTE', 'CLOTH', 'CLOTS', 'CLOUD', 'CLOUR', 'CLOUS', 'CLOUT', 'CLOVE', 'CLOWN', 'CLOWS', 'CLOYE', 'CLOYS', 'CLOZE', 'CLUBS', 'CLUCK', 'CLUED', 'CLUES', 'CLUEY', 'CLUMP', 'CLUNG', 'CLUNK', 'CLYPE', 'CNIDA', 'COACH', 'COACT', 'COADY', 'COALA', 'COALS', 'COALY', 'COAPT', 'COARB', 'COAST', 'COATE', 'COATI', 'COATS', 'COBBS', 'COBBY', 'COBIA', 'COBLE', 'COBOT', 'COBRA', 'COBZA', 'COCAS', 'COCCI', 'COCCO', 'COCKS', 'COCKY', 'COCOA', 'COCOS', 'COCUS', 'CODAS', 'CODEC', 'CODED', 'CODEN', 'CODER', 'CODES', 'CODEX', 'CODON', 'COEDS', 'COFFS', 'COGIE', 'COGON', 'COGUE', 'COHAB', 'COHEN', 'COHOE', 'COHOG', 'COHOS', 'COIFS', 'COIGN', 'COILS', 'COINS', 'COIRS', 'COITS', 'COKED', 'COKES', 'COKEY', 'COLAS', 'COLBY', 'COLDS', 'COLED', 'COLES', 'COLEY', 'COLIC', 'COLIN', 'COLLE', 'COLLS', 'COLLY', 'COLOG', 'COLON', 'COLOR', 'COLTS', 'COLZA', 'COMAE', 'COMAL', 'COMAS', 'COMBE', 'COMBI', 'COMBO', 'COMBS', 'COMBY', 'COMER', 'COMES', 'COMET', 'COMFY', 'COMIC', 'COMIX', 'COMMA', 'COMME', 'COMMO', 'COMMS', 'COMMY', 'COMPO', 'COMPS', 'COMPT', 'COMTE', 'COMUS', 'CONCH', 'CONDO', 'CONED', 'CONES', 'CONEX', 'CONEY', 'CONFS', 'CONGA', 'CONGE', 'CONGO', 'CONIA', 'CONIC', 'CONIN', 'CONKS', 'CONKY', 'CONNE', 'CONNS', 'CONTE', 'CONTO', 'CONUS', 'CONVO', 'COOCH', 'COOED', 'COOEE', 'COOER', 'COOEY', 'COOFS', 'COOKS', 'COOKY', 'COOLS', 'COOLY', 'COOMB', 'COOMS', 'COOMY', 'COONS', 'COOPS', 'COOPT', 'COOST', 'COOTS', 'COOTY', 'COOZE', 'COPAL', 'COPAY', 'COPED', 'COPEN', 'COPER', 'COPES', 'COPHA', 'COPPY', 'COPRA', 'COPSE', 'COPSY', 'COQUI', 'CORAL', 'CORAM', 'CORBE', 'CORBY', 'CORDA', 'CORDS', 'CORED', 'CORER', 'CORES', 'COREY', 'CORGI', 'CORIA', 'CORKS', 'CORKY', 'CORMS', 'CORNI', 'CORNO', 'CORNS', 'CORNU', 'CORNY', 'CORPS', 'CORSE', 'CORSO', 'COSEC', 'COSED', 'COSES', 'COSET', 'COSEY', 'COSIE', 'COSTA', 'COSTE', 'COSTS', 'COTAN', 'COTCH', 'COTED', 'COTES', 'COTHS', 'COTTA', 'COTTS', 'COUCH', 'COUDE', 'COUGH', 'COULD', 'COUNT', 'COUPE', 'COUPS', 'COURB', 'COURD', 'COURE', 'COURS', 'COURT', 'COUTA', 'COUTH', 'COVED', 'COVEN', 'COVER', 'COVES', 'COVET', 'COVEY', 'COVIN', 'COWAL', 'COWAN', 'COWED', 'COWER', 'COWKS', 'COWLS', 'COWPS', 'COWRY', 'COXAE', 'COXAL', 'COXED', 'COXES', 'COXIB', 'COYAU', 'COYED', 'COYER', 'COYLY', 'COYPU', 'COZED', 'COZEN', 'COZES', 'COZEY', 'COZIE', 'CRAAL', 'CRABS', 'CRACK', 'CRAFT', 'CRAGS', 'CRAIC', 'CRAIG', 'CRAKE', 'CRAME', 'CRAMP', 'CRAMS', 'CRANE', 'CRANK', 'CRANS', 'CRAPE', 'CRAPS', 'CRAPY', 'CRARE', 'CRASH', 'CRASS', 'CRATE', 'CRAVE', 'CRAWL', 'CRAWS', 'CRAYS', 'CRAZE', 'CRAZY', 'CREAK', 'CREAM', 'CREDO', 'CREDS', 'CREED', 'CREEK', 'CREEL', 'CREEP', 'CREES', 'CREIN', 'CREMA', 'CREME', 'CREMS', 'CRENA', 'CREPE', 'CREPS', 'CREPT', 'CREPY', 'CRESS', 'CREST', 'CREWE', 'CREWS', 'CRIAS', 'CRIBO', 'CRIBS', 'CRICK', 'CRIED', 'CRIER', 'CRIES', 'CRIME', 'CRIMP', 'CRIMS', 'CRINE', 'CRINK', 'CRINS', 'CRIOS', 'CRIPE', 'CRIPS', 'CRISE', 'CRISP', 'CRISS', 'CRITH', 'CRITS', 'CROAK', 'CROCI', 'CROCK', 'CROCS', 'CROFT', 'CROGS', 'CROMB', 'CROME', 'CRONE', 'CRONK', 'CRONS', 'CRONY', 'CROOK', 'CROOL', 'CROON', 'CROPS', 'CRORE', 'CROSS', 'CROST', 'CROUP', 'CROUT', 'CROWD', 'CROWL', 'CROWN', 'CROWS', 'CROZE', 'CRUCK', 'CRUDE', 'CRUDO', 'CRUDS', 'CRUDY', 'CRUEL', 'CRUES', 'CRUET', 'CRUFT', 'CRUMB', 'CRUMP', 'CRUNK', 'CRUOR', 'CRURA', 'CRUSE', 'CRUSH', 'CRUST', 'CRUSY', 'CRUVE', 'CRWTH', 'CRYER', 'CRYNE', 'CRYPT', 'CTENE', 'CUBBY', 'CUBEB', 'CUBED', 'CUBER', 'CUBES', 'CUBIC', 'CUBIT', 'CUCKS', 'CUDDA', 'CUDDY', 'CUECA', 'CUFFO', 'CUFFS', 'CUIFS', 'CUING', 'CUISH', 'CUITS', 'CUKES', 'CULCH', 'CULET', 'CULEX', 'CULLS', 'CULLY', 'CULMS', 'CULPA', 'CULTI', 'CULTS', 'CULTY', 'CUMEC', 'CUMIN', 'CUNDY', 'CUNEI', 'CUNIT', 'CUNNY', 'CUNTS', 'CUPEL', 'CUPID', 'CUPPA', 'CUPPY', 'CUPRO', 'CURAT', 'CURBS', 'CURCH', 'CURDS', 'CURDY', 'CURED', 'CURER', 'CURES', 'CURET', 'CURFS', 'CURIA', 'CURIE', 'CURIO', 'CURLI', 'CURLS', 'CURLY', 'CURNS', 'CURNY', 'CURRS', 'CURRY', 'CURSE', 'CURSI', 'CURST', 'CURVE', 'CURVY', 'CUSEC', 'CUSHY', 'CUSKS', 'CUSPS', 'CUSPY', 'CUSSO', 'CUSUM', 'CUTCH', 'CUTER', 'CUTES', 'CUTEY', 'CUTIE', 'CUTIN', 'CUTIS', 'CUTTO', 'CUTTY', 'CUTUP', 'CUVEE', 'CUZES', 'CWTCH', 'CYANO', 'CYANS', 'CYBER', 'CYCAD', 'CYCAS', 'CYCLE', 'CYCLO', 'CYDER', 'CYLIX', 'CYMAE', 'CYMAR', 'CYMAS', 'CYMES', 'CYMOL', 'CYNIC', 'CYSTS', 'CYTES', 'CYTON', 'CZARS', 'DAALS', 'DABBA', 'DACES', 'DACHA', 'DACKS', 'DADAH', 'DADAS', 'DADDY', 'DADIS', 'DADLA', 'DADOS', 'DAFFS', 'DAFFY', 'DAGGA', 'DAGGY', 'DAGOS', 'DAHIS', 'DAHLS', 'DAIKO', 'DAILY', 'DAINE', 'DAINT', 'DAIRY', 'DAISY', 'DAKER', 'DALED', 'DALEK', 'DALES', 'DALIS', 'DALLE', 'DALLY', 'DALTS', 'DAMAN', 'DAMAR', 'DAMES', 'DAMME', 'DAMNA', 'DAMNS', 'DAMPS', 'DAMPY', 'DANCE', 'DANCY', 'DANDA', 'DANDY', 'DANGS', 'DANIO', 'DANKS', 'DANNY', 'DANSE', 'DANTS', 'DAPPY', 'DARAF', 'DARBS', 'DARCY', 'DARED', 'DARER', 'DARES', 'DARGA', 'DARGS', 'DARIC', 'DARIS', 'DARKS', 'DARKY', 'DARLS', 'DARNS', 'DARRE', 'DARTS', 'DARZI', 'DASHI', 'DASHY', 'DATAL', 'DATED', 'DATER', 'DATES', 'DATIL', 'DATOS', 'DATTO', 'DATUM', 'DAUBE', 'DAUBS', 'DAUBY', 'DAUDS', 'DAULT', 'DAUNT', 'DAURS', 'DAUTS', 'DAVEN', 'DAVIT', 'DAWAH', 'DAWDS', 'DAWED', 'DAWEN', 'DAWGS', 'DAWKS', 'DAWNS', 'DAWTS', 'DAYAL', 'DAYAN', 'DAYCH', 'DAYNT', 'DAZED', 'DAZER', 'DAZES', 'DBAGS', 'DEADS', 'DEAIR', 'DEALS', 'DEALT', 'DEANS', 'DEARE', 'DEARN', 'DEARS', 'DEARY', 'DEASH', 'DEATH', 'DEAVE', 'DEAWS', 'DEAWY', 'DEBAG', 'DEBAR', 'DEBBY', 'DEBEL', 'DEBES', 'DEBIT', 'DEBTS', 'DEBUD', 'DEBUG', 'DEBUR', 'DEBUS', 'DEBUT', 'DEBYE', 'DECAD', 'DECAF', 'DECAL', 'DECAN', 'DECAY', 'DECIM', 'DECKO', 'DECKS', 'DECOR', 'DECOS', 'DECOY', 'DECRY', 'DECYL', 'DEDAL', 'DEEDS', 'DEEDY', 'DEELY', 'DEEMS', 'DEENS', 'DEEPS', 'DEERE', 'DEERS', 'DEETS', 'DEEVE', 'DEEVS', 'DEFAT', 'DEFER', 'DEFFO', 'DEFIS', 'DEFOG', 'DEGAS', 'DEGUM', 'DEGUS', 'DEICE', 'DEIDS', 'DEIFY', 'DEIGN', 'DEILS', 'DEINK', 'DEISM', 'DEIST', 'DEITY', 'DEKED', 'DEKES', 'DEKKO', 'DELAY', 'DELED', 'DELES', 'DELFS', 'DELFT', 'DELIS', 'DELLA', 'DELLS', 'DELLY', 'DELOS', 'DELPH', 'DELTA', 'DELTS', 'DELVE', 'DEMAN', 'DEMES', 'DEMIC', 'DEMIT', 'DEMOB', 'DEMOI', 'DEMON', 'DEMOS', 'DEMOT', 'DEMPT', 'DEMUR', 'DENAR', 'DENAY', 'DENCH', 'DENES', 'DENET', 'DENIM', 'DENIS', 'DENSE', 'DENTE', 'DENTS', 'DEOCH', 'DEOXY', 'DEPOT', 'DEPTH', 'DERAT', 'DERAY', 'DERBY', 'DERED', 'DERES', 'DERIG', 'DERMA', 'DERMS', 'DERNS', 'DERNY', 'DEROS', 'DERPY', 'DERRO', 'DERRY', 'DERTH', 'DERVS', 'DESEX', 'DESHI', 'DESIS', 'DESKS', 'DESSE', 'DETAG', 'DETER', 'DETOX', 'DEUCE', 'DEVAS', 'DEVEL', 'DEVIL', 'DEVIS', 'DEVON', 'DEVOS', 'DEVOT', 'DEWAN', 'DEWAR', 'DEWAX', 'DEWED', 'DEXES', 'DEXIE', 'DEXYS', 'DHABA', 'DHAKS', 'DHALS', 'DHIKR', 'DHOBI', 'DHOLE', 'DHOLL', 'DHOLS', 'DHONI', 'DHOTI', 'DHOWS', 'DHUTI', 'DIACT', 'DIALS', 'DIANA', 'DIANE', 'DIARY', 'DIAZO', 'DIBBS', 'DICED', 'DICER', 'DICES', 'DICEY', 'DICHT', 'DICKS', 'DICKY', 'DICOT', 'DICTA', 'DICTO', 'DICTS', 'DICTU', 'DICTY', 'DIDDY', 'DIDIE', 'DIDIS', 'DIDOS', 'DIDST', 'DIEBS', 'DIELS', 'DIENE', 'DIETS', 'DIFFS', 'DIGHT', 'DIGIT', 'DIKAS', 'DIKED', 'DIKER', 'DIKES', 'DIKEY', 'DILDO', 'DILLI', 'DILLS', 'DILLY', 'DIMBO', 'DIMER', 'DIMES', 'DIMLY', 'DIMPS', 'DINAR', 'DINED', 'DINER', 'DINES', 'DINGE', 'DINGO', 'DINGS', 'DINGY', 'DINIC', 'DINKS', 'DINKY', 'DINLO', 'DINNA', 'DINOS', 'DINTS', 'DIOCH', 'DIODE', 'DIOLS', 'DIOTA', 'DIPPY', 'DIPSO', 'DIRAM', 'DIRER', 'DIRGE', 'DIRKE', 'DIRKS', 'DIRLS', 'DIRTS', 'DIRTY', 'DISAS', 'DISCI', 'DISCO', 'DISCS', 'DISHY', 'DISKS', 'DISME', 'DITAL', 'DITAS', 'DITCH', 'DITED', 'DITES', 'DITSY', 'DITTO', 'DITTS', 'DITTY', 'DITZY', 'DIVAN', 'DIVAS', 'DIVED', 'DIVER', 'DIVES', 'DIVEY', 'DIVIS', 'DIVNA', 'DIVOS', 'DIVOT', 'DIVVY', 'DIWAN', 'DIXIE', 'DIXIT', 'DIYAS', 'DIZEN', 'DIZZY', 'DJINN', 'DJINS', 'DOABS', 'DOATS', 'DOBBY', 'DOBES', 'DOBIE', 'DOBLA', 'DOBLE', 'DOBRA', 'DOBRO', 'DOCHT', 'DOCKS', 'DOCOS', 'DOCUS', 'DODDY', 'DODGE', 'DODGY', 'DODOS', 'DOEKS', 'DOERS', 'DOEST', 'DOETH', 'DOFFS', 'DOGAL', 'DOGAN', 'DOGES', 'DOGEY', 'DOGGO', 'DOGGY', 'DOGIE', 'DOGLY', 'DOGMA', 'DOHYO', 'DOILT', 'DOILY', 'DOING', 'DOITS', 'DOJOS', 'DOLCE', 'DOLCI', 'DOLED', 'DOLEE', 'DOLES', 'DOLEY', 'DOLIA', 'DOLIE', 'DOLLS', 'DOLLY', 'DOLMA', 'DOLOR', 'DOLOS', 'DOLTS', 'DOMAL', 'DOMED', 'DOMES', 'DOMIC', 'DONAH', 'DONAS', 'DONEE', 'DONER', 'DONGA', 'DONGS', 'DONKO', 'DONNA', 'DONNE', 'DONNY', 'DONOR', 'DONSY', 'DONUT', 'DOOBS', 'DOOCE', 'DOODY', 'DOOFS', 'DOOKS', 'DOOKY', 'DOOLE', 'DOOLS', 'DOOLY', 'DOOMS', 'DOOMY', 'DOONA', 'DOORN', 'DOORS', 'DOOZY', 'DOPAS', 'DOPED', 'DOPER', 'DOPES', 'DOPEY', 'DOPPE', 'DORAD', 'DORBA', 'DORBS', 'DOREE', 'DORES', 'DORIC', 'DORIS', 'DORJE', 'DORKS', 'DORKY', 'DORMS', 'DORMY', 'DORPS', 'DORRS', 'DORSA', 'DORSE', 'DORTS', 'DORTY', 'DOSAI', 'DOSAS', 'DOSED', 'DOSEH', 'DOSER', 'DOSES', 'DOSHA', 'DOTAL', 'DOTED', 'DOTER', 'DOTES', 'DOTTY', 'DOUAR', 'DOUBT', 'DOUCE', 'DOUCS', 'DOUGH', 'DOUKS', 'DOULA', 'DOUMA', 'DOUMS', 'DOUPS', 'DOURA', 'DOUSE', 'DOUTS', 'DOVED', 'DOVEN', 'DOVER', 'DOVES', 'DOVIE', 'DOWAK', 'DOWAR', 'DOWDS', 'DOWDY', 'DOWED', 'DOWEL', 'DOWER', 'DOWFS', 'DOWIE', 'DOWLE', 'DOWLS', 'DOWLY', 'DOWNA', 'DOWNS', 'DOWNY', 'DOWPS', 'DOWRY', 'DOWSE', 'DOWTS', 'DOXED', 'DOXES', 'DOXIE', 'DOYEN', 'DOYLY', 'DOZED', 'DOZEN', 'DOZER', 'DOZES', 'DRABS', 'DRACK', 'DRACO', 'DRAFF', 'DRAFT', 'DRAGS', 'DRAIL', 'DRAIN', 'DRAKE', 'DRAMA', 'DRAMS', 'DRANK', 'DRANT', 'DRAPE', 'DRAPS', 'DRAPY', 'DRATS', 'DRAVE', 'DRAWL', 'DRAWN', 'DRAWS', 'DRAYS', 'DREAD', 'DREAM', 'DREAR', 'DRECK', 'DREED', 'DREER', 'DREES', 'DREGS', 'DREKS', 'DRENT', 'DRERE', 'DRESS', 'DREST', 'DREYS', 'DRIBS', 'DRICE', 'DRIED', 'DRIER', 'DRIES', 'DRIFT', 'DRILL', 'DRILY', 'DRINK', 'DRIPS', 'DRIPT', 'DRIVE', 'DROCK', 'DROID', 'DROIL', 'DROIT', 'DROKE', 'DROLE', 'DROLL', 'DROME', 'DRONE', 'DRONY', 'DROOB', 'DROOG', 'DROOK', 'DROOL', 'DROOP', 'DROPS', 'DROPT', 'DROSS', 'DROUK', 'DROVE', 'DROWN', 'DROWS', 'DRUBS', 'DRUGS', 'DRUID', 'DRUMS', 'DRUNK', 'DRUPE', 'DRUSE', 'DRUSY', 'DRUXY', 'DRYAD', 'DRYAS', 'DRYER', 'DRYLY', 'DSOBO', 'DSOMO', 'DUADS', 'DUALS', 'DUANS', 'DUARS', 'DUBBO', 'DUBBY', 'DUCAL', 'DUCAT', 'DUCES', 'DUCHY', 'DUCKS', 'DUCKY', 'DUCTI', 'DUCTS', 'DUDDY', 'DUDED', 'DUDES', 'DUELS', 'DUETS', 'DUETT', 'DUFFS', 'DUFUS', 'DUING', 'DUITS', 'DUKAS', 'DUKED', 'DUKES', 'DUKKA', 'DUKUN', 'DULCE', 'DULES', 'DULIA', 'DULLS', 'DULLY', 'DULSE', 'DUMAS', 'DUMBO', 'DUMBS', 'DUMKA', 'DUMKY', 'DUMMY', 'DUMPS', 'DUMPY', 'DUNAM', 'DUNCE', 'DUNCH', 'DUNES', 'DUNGS', 'DUNGY', 'DUNKS', 'DUNNO', 'DUNNY', 'DUNSH', 'DUNTS', 'DUOMI', 'DUOMO', 'DUPED', 'DUPER', 'DUPES', 'DUPLE', 'DUPLY', 'DUPPY', 'DURAL', 'DURAS', 'DURED', 'DURES', 'DURGY', 'DURNS', 'DUROC', 'DUROS', 'DUROY', 'DURRA', 'DURRS', 'DURRY', 'DURST', 'DURUM', 'DURZI', 'DUSKS', 'DUSKY', 'DUSTS', 'DUSTY', 'DUTCH', 'DUVET', 'DUXES', 'DWAAL', 'DWALE', 'DWALM', 'DWAMS', 'DWAMY', 'DWANG', 'DWARF', 'DWAUM', 'DWEEB', 'DWELL', 'DWELT', 'DWILE', 'DWINE', 'DYADS', 'DYERS', 'DYING', 'DYKED', 'DYKES', 'DYKEY', 'DYKON', 'DYNEL', 'DYNES', 'DYNOS', 'DZHOS', 'EAGER', 'EAGLE', 'EAGLY', 'EAGRE', 'EALED', 'EALES', 'EANED', 'EARDS', 'EARED', 'EARLS', 'EARLY', 'EARNS', 'EARNT', 'EARST', 'EARTH', 'EASED', 'EASEL', 'EASER', 'EASES', 'EASLE', 'EASTS', 'EATEN', 'EATER', 'EATHE', 'EATIN', 'EAVED', 'EAVER', 'EAVES', 'EBANK', 'EBBED', 'EBBET', 'EBENA', 'EBENE', 'EBIKE', 'EBONS', 'EBONY', 'EBOOK', 'ECADS', 'ECARD', 'ECASH', 'ECHED', 'ECHES', 'ECHOS', 'ECIGS', 'ECLAT', 'ECOLE', 'ECRUS', 'EDEMA', 'EDGED', 'EDGER', 'EDGES', 'EDICT', 'EDIFY', 'EDILE', 'EDITS', 'EDUCE', 'EDUCT', 'EEJIT', 'EENSY', 'EERIE', 'EEVEN', 'EEVER', 'EEVNS', 'EFFED', 'EFFER', 'EFITS', 'EGADS', 'EGERS', 'EGEST', 'EGGAR', 'EGGED', 'EGGER', 'EGMAS', 'EGRET', 'EHING', 'EIDER', 'EIDOS', 'EIGHT', 'EIGNE', 'EIKED', 'EIKON', 'EILDS', 'EIRON', 'EISEL', 'EJECT', 'EJIDO', 'EKDAM', 'EKING', 'EKKAS', 'ELAIN', 'ELAND', 'ELANS', 'ELATE', 'ELBOW', 'ELCHI', 'ELDER', 'ELDIN', 'ELECT', 'ELEET', 'ELEGY', 'ELEMI', 'ELFED', 'ELFIN', 'ELIAD', 'ELIDE', 'ELINT', 'ELITE', 'ELMEN', 'ELOGE', 'ELOGY', 'ELOIN', 'ELOPE', 'ELOPS', 'ELPEE', 'ELSIN', 'ELUDE', 'ELUTE', 'ELVAN', 'ELVEN', 'ELVER', 'ELVES', 'EMACS', 'EMAIL', 'EMBAR', 'EMBAY', 'EMBED', 'EMBER', 'EMBOG', 'EMBOW', 'EMBOX', 'EMBUS', 'EMCEE', 'EMEER', 'EMEND', 'EMERG', 'EMERY', 'EMEUS', 'EMICS', 'EMIRS', 'EMITS', 'EMMAS', 'EMMER', 'EMMET', 'EMMEW', 'EMMYS', 'EMOJI', 'EMONG', 'EMOTE', 'EMOVE', 'EMPTS', 'EMPTY', 'EMULE', 'EMURE', 'EMYDE', 'EMYDS', 'ENACT', 'ENARM', 'ENATE', 'ENDED', 'ENDER', 'ENDEW', 'ENDOW', 'ENDUE', 'ENEMA', 'ENEMY', 'ENEWS', 'ENFIX', 'ENIAC', 'ENJOY', 'ENLIT', 'ENMEW', 'ENNOG', 'ENNUI', 'ENOKI', 'ENOLS', 'ENORM', 'ENOWS', 'ENROL', 'ENSEW', 'ENSKY', 'ENSUE', 'ENTER', 'ENTIA', 'ENTRE', 'ENTRY', 'ENURE', 'ENURN', 'ENVOI', 'ENVOY', 'ENZYM', 'EOLID', 'EORLS', 'EOSIN', 'EPACT', 'EPEES', 'EPENA', 'EPENE', 'EPHAH', 'EPHAS', 'EPHOD', 'EPHOR', 'EPICS', 'EPOCH', 'EPODE', 'EPOPT', 'EPOXY', 'EPPIE', 'EPRIS', 'EQUAL', 'EQUES', 'EQUID', 'EQUIP', 'ERASE', 'ERBIA', 'ERECT', 'EREVS', 'ERGON', 'ERGOS', 'ERGOT', 'ERHUS', 'ERICA', 'ERICK', 'ERICS', 'ERING', 'ERNED', 'ERNES', 'ERODE', 'EROSE', 'ERRED', 'ERROR', 'ERSES', 'ERUCT', 'ERUGO', 'ERUPT', 'ERUVS', 'ERVEN', 'ERVIL', 'ESCAR', 'ESCOT', 'ESILE', 'ESKAR', 'ESKER', 'ESNES', 'ESROG', 'ESSAY', 'ESSES', 'ESTER', 'ESTOC', 'ESTOP', 'ESTRO', 'ETAGE', 'ETAPE', 'ETATS', 'ETENS', 'ETHAL', 'ETHER', 'ETHIC', 'ETHNE', 'ETHOS', 'ETHYL', 'ETICS', 'ETNAS', 'ETROG', 'ETTIN', 'ETTLE', 'ETUDE', 'ETUIS', 'ETWEE', 'ETYMA', 'EUGHS', 'EUKED', 'EUPAD', 'EUROS', 'EUSOL', 'EVADE', 'EVEGS', 'EVENS', 'EVENT', 'EVERT', 'EVERY', 'EVETS', 'EVHOE', 'EVICT', 'EVILS', 'EVITE', 'EVOHE', 'EVOKE', 'EWERS', 'EWEST', 'EWHOW', 'EWKED', 'EXACT', 'EXALT', 'EXAMS', 'EXCEL', 'EXEAT', 'EXECS', 'EXEEM', 'EXEME', 'EXERT', 'EXFIL', 'EXIER', 'EXIES', 'EXILE', 'EXINE', 'EXING', 'EXIST', 'EXITE', 'EXITS', 'EXODE', 'EXOME', 'EXONS', 'EXPAT', 'EXPEL', 'EXPOS', 'EXTOL', 'EXTRA', 'EXUDE', 'EXULS', 'EXULT', 'EXURB', 'EYASS', 'EYERS', 'EYING', 'EYOTS', 'EYRAS', 'EYRES', 'EYRIE', 'EYRIR', 'EZINE', 'FABBO', 'FABBY', 'FABLE', 'FACED', 'FACER', 'FACES', 'FACET', 'FACEY', 'FACIA', 'FACIE', 'FACTA', 'FACTO', 'FACTS', 'FACTY', 'FADDY', 'FADED', 'FADER', 'FADES', 'FADGE', 'FADOS', 'FAENA', 'FAERY', 'FAFFS', 'FAFFY', 'FAGGY', 'FAGIN', 'FAGOT', 'FAIKS', 'FAILS', 'FAINE', 'FAINS', 'FAINT', 'FAIRE', 'FAIRS', 'FAIRY', 'FAITH', 'FAKED', 'FAKER', 'FAKES', 'FAKEY', 'FAKIE', 'FAKIR', 'FALAJ', 'FALES', 'FALLS', 'FALSE', 'FALSY', 'FAMED', 'FAMES', 'FANAL', 'FANCY', 'FANDS', 'FANES', 'FANGA', 'FANGO', 'FANGS', 'FANKS', 'FANNY', 'FANON', 'FANOS', 'FANUM', 'FAQIR', 'FARAD', 'FARCE', 'FARCI', 'FARCY', 'FARDS', 'FARED', 'FARER', 'FARES', 'FARLE', 'FARLS', 'FARMS', 'FAROS', 'FARRO', 'FARSE', 'FARTS', 'FASCI', 'FASTI', 'FASTS', 'FATAL', 'FATED', 'FATES', 'FATLY', 'FATSO', 'FATTY', 'FATWA', 'FAUCH', 'FAUGH', 'FAULD', 'FAULT', 'FAUNA', 'FAUNS', 'FAURD', 'FAUTE', 'FAUTS', 'FAUVE', 'FAVAS', 'FAVEL', 'FAVER', 'FAVES', 'FAVOR', 'FAVUS', 'FAWNS', 'FAWNY', 'FAXED', 'FAXES', 'FAYED', 'FAYER', 'FAYNE', 'FAYRE', 'FAZED', 'FAZES', 'FEALS', 'FEARD', 'FEARE', 'FEARS', 'FEART', 'FEASE', 'FEAST', 'FEATS', 'FEAZE', 'FECAL', 'FECES', 'FECHT', 'FECIT', 'FECKS', 'FEDAI', 'FEDEX', 'FEEBS', 'FEEDS', 'FEELS', 'FEELY', 'FEENS', 'FEERS', 'FEESE', 'FEEZE', 'FEHME', 'FEIGN', 'FEINT', 'FEIST', 'FELCH', 'FELID', 'FELIX', 'FELLA', 'FELLS', 'FELLY', 'FELON', 'FELTS', 'FELTY', 'FEMAL', 'FEMES', 'FEMIC', 'FEMME', 'FEMMY', 'FEMUR', 'FENCE', 'FENDS', 'FENDY', 'FENIS', 'FENKS', 'FENNY', 'FENTS', 'FEODS', 'FEOFF', 'FERAL', 'FERER', 'FERES', 'FERIA', 'FERLY', 'FERMI', 'FERMS', 'FERNS', 'FERNY', 'FEROX', 'FERRY', 'FESSE', 'FESTA', 'FESTS', 'FESTY', 'FETAL', 'FETAS', 'FETCH', 'FETED', 'FETES', 'FETID', 'FETOR', 'FETTA', 'FETTS', 'FETUS', 'FETWA', 'FEUAR', 'FEUDS', 'FEUED', 'FEVER', 'FEWER', 'FEYED', 'FEYER', 'FEYLY', 'FEZES', 'FEZZY', 'FIARS', 'FIATS', 'FIBER', 'FIBRE', 'FIBRO', 'FICES', 'FICHE', 'FICHU', 'FICIN', 'FICOS', 'FICTA', 'FICUS', 'FIDES', 'FIDGE', 'FIDOS', 'FIDUS', 'FIEFS', 'FIELD', 'FIEND', 'FIENT', 'FIERE', 'FIERI', 'FIERS', 'FIERY', 'FIEST', 'FIFED', 'FIFER', 'FIFES', 'FIFIS', 'FIFTH', 'FIFTY', 'FIGGY', 'FIGHT', 'FIGOS', 'FIKED', 'FIKES', 'FILAR', 'FILCH', 'FILED', 'FILER', 'FILES', 'FILET', 'FILII', 'FILKS', 'FILLE', 'FILLO', 'FILLS', 'FILLY', 'FILMI', 'FILMS', 'FILMY', 'FILON', 'FILOS', 'FILTH', 'FILUM', 'FINAL', 'FINCA', 'FINCH', 'FINDS', 'FINED', 'FINER', 'FINES', 'FINIS', 'FINKS', 'FINNY', 'FINOS', 'FIORD', 'FIQHS', 'FIQUE', 'FIRED', 'FIRER', 'FIRES', 'FIRIE', 'FIRKS', 'FIRMA', 'FIRMS', 'FIRNI', 'FIRNS', 'FIRRY', 'FIRST', 'FIRTH', 'FISCS', 'FISHO', 'FISHY', 'FISKS', 'FISTS', 'FISTY', 'FITCH', 'FITLY', 'FITNA', 'FITTE', 'FITTS', 'FIVER', 'FIVES', 'FIXED', 'FIXER', 'FIXES', 'FIXIE', 'FIXIT', 'FIZZY', 'FJELD', 'FJORD', 'FLABS', 'FLACK', 'FLAFF', 'FLAGS', 'FLAIL', 'FLAIR', 'FLAKE', 'FLAKS', 'FLAKY', 'FLAME', 'FLAMM', 'FLAMS', 'FLAMY', 'FLANE', 'FLANK', 'FLANS', 'FLAPS', 'FLARE', 'FLARY', 'FLASH', 'FLASK', 'FLATS', 'FLAVA', 'FLAWN', 'FLAWS', 'FLAWY', 'FLAXY', 'FLAYS', 'FLEAM', 'FLEAS', 'FLECK', 'FLEEK', 'FLEER', 'FLEES', 'FLEET', 'FLEGS', 'FLEME', 'FLESH', 'FLEUR', 'FLEWS', 'FLEXI', 'FLEXO', 'FLEYS', 'FLICK', 'FLICS', 'FLIED', 'FLIER', 'FLIES', 'FLIMP', 'FLIMS', 'FLING', 'FLINT', 'FLIPS', 'FLIRS', 'FLIRT', 'FLISK', 'FLITE', 'FLITS', 'FLITT', 'FLOAT', 'FLOBS', 'FLOCK', 'FLOCS', 'FLOES', 'FLOGS', 'FLONG', 'FLOOD', 'FLOOR', 'FLOPS', 'FLORA', 'FLORE', 'FLORS', 'FLORY', 'FLOSH', 'FLOSS', 'FLOTA', 'FLOTE', 'FLOUR', 'FLOUT', 'FLOWN', 'FLOWS', 'FLOWY', 'FLUBS', 'FLUED', 'FLUES', 'FLUEY', 'FLUFF', 'FLUID', 'FLUKE', 'FLUKY', 'FLUME', 'FLUMP', 'FLUNG', 'FLUNK', 'FLUOR', 'FLURR', 'FLUSH', 'FLUTE', 'FLUTY', 'FLUYT', 'FLYBY', 'FLYER', 'FLYIN', 'FLYPE', 'FLYTE', 'FNARR', 'FOALS', 'FOAMS', 'FOAMY', 'FOCAL', 'FOCUS', 'FOEHN', 'FOGEY', 'FOGGY', 'FOGIE', 'FOGLE', 'FOGOS', 'FOGOU', 'FOHNS', 'FOIDS', 'FOILS', 'FOINS', 'FOIST', 'FOLDS', 'FOLEY', 'FOLIA', 'FOLIC', 'FOLIE', 'FOLIO', 'FOLKS', 'FOLKY', 'FOLLY', 'FOMES', 'FONDA', 'FONDS', 'FONDU', 'FONES', 'FONIO', 'FONLY', 'FONTS', 'FOODS', 'FOODY', 'FOOLS', 'FOOTS', 'FOOTY', 'FORAM', 'FORAY', 'FORBS', 'FORBY', 'FORCE', 'FORDO', 'FORDS', 'FOREL', 'FORES', 'FOREX', 'FORGE', 'FORGO', 'FORKS', 'FORKY', 'FORMA', 'FORME', 'FORMS', 'FORTE', 'FORTH', 'FORTS', 'FORTY', 'FORUM', 'FORZA', 'FORZE', 'FOSSA', 'FOSSE', 'FOUAT', 'FOUDS', 'FOUER', 'FOUET', 'FOULE', 'FOULS', 'FOUND', 'FOUNT', 'FOURS', 'FOUTH', 'FOVEA', 'FOWLS', 'FOWTH', 'FOXED', 'FOXES', 'FOXIE', 'FOYER', 'FOYLE', 'FOYNE', 'FRABS', 'FRACK', 'FRACT', 'FRAGS', 'FRAIL', 'FRAIM', 'FRAIS', 'FRAME', 'FRANC', 'FRANK', 'FRAPE', 'FRAPS', 'FRASS', 'FRATE', 'FRATI', 'FRATS', 'FRAUD', 'FRAUS', 'FRAYS', 'FREAK', 'FREED', 'FREER', 'FREES', 'FREET', 'FREIT', 'FREMD', 'FRENA', 'FREON', 'FRERE', 'FRESH', 'FRETS', 'FRIAR', 'FRIBS', 'FRIED', 'FRIER', 'FRIES', 'FRIGS', 'FRILL', 'FRISE', 'FRISK', 'FRIST', 'FRITA', 'FRITE', 'FRITH', 'FRITS', 'FRITT', 'FRITZ', 'FRIZE', 'FRIZZ', 'FROCK', 'FROES', 'FROGS', 'FROMM', 'FROND', 'FRONS', 'FRONT', 'FROOM', 'FRORE', 'FRORN', 'FRORY', 'FROSH', 'FROST', 'FROTH', 'FROWN', 'FROWS', 'FROWY', 'FROYO', 'FROZE', 'FRUGS', 'FRUIT', 'FRUMP', 'FRUSH', 'FRUST', 'FRYER', 'FUBAR', 'FUBBY', 'FUBSY', 'FUCKS', 'FUCUS', 'FUDDY', 'FUDGE', 'FUDGY', 'FUELS', 'FUERO', 'FUFFS', 'FUFFY', 'FUGAL', 'FUGGY', 'FUGIE', 'FUGIO', 'FUGIS', 'FUGLE', 'FUGLY', 'FUGUE', 'FUGUS', 'FUJIS', 'FULLA', 'FULLS', 'FULLY', 'FULTH', 'FULWA', 'FUMED', 'FUMER', 'FUMES', 'FUMET', 'FUNDA', 'FUNDI', 'FUNDO', 'FUNDS', 'FUNDY', 'FUNGI', 'FUNGO', 'FUNGS', 'FUNIC', 'FUNIS', 'FUNKS', 'FUNKY', 'FUNNY', 'FUNSY', 'FUNTS', 'FURAL', 'FURAN', 'FURCA', 'FURLS', 'FUROL', 'FUROR', 'FUROS', 'FURRS', 'FURRY', 'FURTH', 'FURZE', 'FURZY', 'FUSED', 'FUSEE', 'FUSEL', 'FUSES', 'FUSIL', 'FUSKS', 'FUSSY', 'FUSTS', 'FUSTY', 'FUTON', 'FUZED', 'FUZEE', 'FUZES', 'FUZIL', 'FUZZY', 'FYCES', 'FYKED', 'FYKES', 'FYLES', 'FYRDS', 'FYTTE', 'GABBA', 'GABBY', 'GABLE', 'GADDI', 'GADES', 'GADGE', 'GADGY', 'GADID', 'GADIS', 'GADJE', 'GADJO', 'GADSO', 'GAFFE', 'GAFFS', 'GAGED', 'GAGER', 'GAGES', 'GAIDS', 'GAILY', 'GAINS', 'GAIRS', 'GAITA', 'GAITS', 'GAITT', 'GAJOS', 'GALAH', 'GALAS', 'GALAX', 'GALEA', 'GALED', 'GALES', 'GALIA', 'GALIS', 'GALLS', 'GALLY', 'GALOP', 'GALUT', 'GALVO', 'GAMAS', 'GAMAY', 'GAMBA', 'GAMBE', 'GAMBO', 'GAMBS', 'GAMED', 'GAMER', 'GAMES', 'GAMEY', 'GAMIC', 'GAMIN', 'GAMMA', 'GAMME', 'GAMMY', 'GAMPS', 'GAMUT', 'GANCH', 'GANDY', 'GANEF', 'GANEV', 'GANGS', 'GANJA', 'GANKS', 'GANOF', 'GANTS', 'GAOLS', 'GAPED', 'GAPER', 'GAPES', 'GAPOS', 'GAPPY', 'GARAM', 'GARBA', 'GARBE', 'GARBO', 'GARBS', 'GARDA', 'GARDE', 'GARES', 'GARIS', 'GARMS', 'GARNI', 'GARRE', 'GARRI', 'GARTH', 'GARUM', 'GASES', 'GASHY', 'GASPS', 'GASPY', 'GASSY', 'GASTS', 'GATCH', 'GATED', 'GATER', 'GATES', 'GATHS', 'GATOR', 'GAUCH', 'GAUCY', 'GAUDS', 'GAUDY', 'GAUGE', 'GAUJE', 'GAULT', 'GAUMS', 'GAUMY', 'GAUNT', 'GAUPS', 'GAURS', 'GAUSS', 'GAUZE', 'GAUZY', 'GAVEL', 'GAVOT', 'GAWCY', 'GAWDS', 'GAWKS', 'GAWKY', 'GAWPS', 'GAWSY', 'GAYAL', 'GAYER', 'GAYLY', 'GAZAL', 'GAZAR', 'GAZED', 'GAZER', 'GAZES', 'GAZON', 'GAZOO', 'GEALS', 'GEANS', 'GEARE', 'GEARS', 'GEASA', 'GEATS', 'GEBUR', 'GECKO', 'GECKS', 'GEEKS', 'GEEKY', 'GEEPS', 'GEESE', 'GEEST', 'GEIST', 'GEITS', 'GELDS', 'GELEE', 'GELID', 'GELLY', 'GELTS', 'GEMEL', 'GEMMA', 'GEMMY', 'GEMOT', 'GENAE', 'GENAL', 'GENAS', 'GENES', 'GENET', 'GENIC', 'GENIE', 'GENII', 'GENIN', 'GENIO', 'GENIP', 'GENNY', 'GENOA', 'GENOM', 'GENRE', 'GENRO', 'GENTS', 'GENTY', 'GENUA', 'GENUS', 'GEODE', 'GEOID', 'GERAH', 'GERBE', 'GERES', 'GERLE', 'GERMS', 'GERMY', 'GERNE', 'GESSE', 'GESSO', 'GESTE', 'GESTS', 'GETAS', 'GETUP', 'GEUMS', 'GEYAN', 'GEYER', 'GHAST', 'GHATS', 'GHAUT', 'GHAZI', 'GHEES', 'GHEST', 'GHOST', 'GHOUL', 'GHUSL', 'GHYLL', 'GIANT', 'GIBED', 'GIBEL', 'GIBER', 'GIBES', 'GIBLI', 'GIBUS', 'GIDDY', 'GIFTS', 'GIGAS', 'GIGHE', 'GIGOT', 'GIGUE', 'GILAS', 'GILDS', 'GILET', 'GILIA', 'GILLS', 'GILLY', 'GILPY', 'GILTS', 'GIMEL', 'GIMME', 'GIMPS', 'GIMPY', 'GINCH', 'GINGA', 'GINGE', 'GINGS', 'GINKS', 'GINNY', 'GINZO', 'GIPON', 'GIPPO', 'GIPPY', 'GIPSY', 'GIRDS', 'GIRLF', 'GIRLS', 'GIRLY', 'GIRNS', 'GIRON', 'GIROS', 'GIRRS', 'GIRSH', 'GIRTH', 'GIRTS', 'GISMO', 'GISMS', 'GISTS', 'GITCH', 'GITES', 'GIUST', 'GIVED', 'GIVEN', 'GIVER', 'GIVES', 'GIZMO', 'GLACE', 'GLADE', 'GLADS', 'GLADY', 'GLAIK', 'GLAIR', 'GLAMP', 'GLAMS', 'GLAND', 'GLANS', 'GLARE', 'GLARY', 'GLASS', 'GLATT', 'GLAUM', 'GLAUR', 'GLAZE', 'GLAZY', 'GLEAM', 'GLEAN', 'GLEBA', 'GLEBE', 'GLEBY', 'GLEDE', 'GLEDS', 'GLEED', 'GLEEK', 'GLEES', 'GLEET', 'GLEIS', 'GLENS', 'GLENT', 'GLEYS', 'GLIAL', 'GLIAS', 'GLIBS', 'GLIDE', 'GLIFF', 'GLIFT', 'GLIKE', 'GLIME', 'GLIMS', 'GLINT', 'GLISK', 'GLITS', 'GLITZ', 'GLOAM', 'GLOAT', 'GLOBE', 'GLOBI', 'GLOBS', 'GLOBY', 'GLODE', 'GLOGG', 'GLOMS', 'GLOOM', 'GLOOP', 'GLOPS', 'GLORY', 'GLOSS', 'GLOST', 'GLOUT', 'GLOVE', 'GLOWS', 'GLOWY', 'GLOZE', 'GLUED', 'GLUER', 'GLUES', 'GLUEY', 'GLUGG', 'GLUGS', 'GLUME', 'GLUMS', 'GLUON', 'GLUTE', 'GLUTS', 'GLYPH', 'GNAPI', 'GNARL', 'GNARR', 'GNARS', 'GNASH', 'GNATS', 'GNAWN', 'GNAWS', 'GNOME', 'GNOWS', 'GOADS', 'GOAFS', 'GOAFT', 'GOALS', 'GOARY', 'GOATS', 'GOATY', 'GOAVE', 'GOBAN', 'GOBAR', 'GOBBE', 'GOBBI', 'GOBBO', 'GOBBY', 'GOBIS', 'GOBOS', 'GODET', 'GODLY', 'GODSO', 'GOELS', 'GOERS', 'GOEST', 'GOETH', 'GOETY', 'GOFER', 'GOFFS', 'GOGGA', 'GOGOS', 'GOIER', 'GOING', 'GOJIS', 'GOKES', 'GOLDS', 'GOLDY', 'GOLEM', 'GOLES', 'GOLFS', 'GOLLY', 'GOLPE', 'GOLPS', 'GOMBO', 'GOMER', 'GOMPA', 'GONAD', 'GONCH', 'GONEF', 'GONER', 'GONGS', 'GONIA', 'GONIF', 'GONKS', 'GONNA', 'GONOF', 'GONYS', 'GONZO', 'GOOBY', 'GOODO', 'GOODS', 'GOODY', 'GOOEY', 'GOOFS', 'GOOFY', 'GOOGS', 'GOOKS', 'GOOKY', 'GOOLD', 'GOOLS', 'GOOLY', 'GOOMY', 'GOONS', 'GOONY', 'GOOPS', 'GOOPY', 'GOORS', 'GOORY', 'GOOSE', 'GOOSY', 'GOPAK', 'GOPIK', 'GORAL', 'GORAS', 'GORAY', 'GORBS', 'GORDO', 'GORED', 'GORES', 'GORGE', 'GORIS', 'GORMS', 'GORMY', 'GORPS', 'GORSE', 'GORSY', 'GOSHT', 'GOSSE', 'GOTCH', 'GOTHS', 'GOTHY', 'GOTTA', 'GOUCH', 'GOUGE', 'GOUKS', 'GOURA', 'GOURD', 'GOUTS', 'GOUTY', 'GOVED', 'GOVES', 'GOWAN', 'GOWDS', 'GOWFS', 'GOWKS', 'GOWLS', 'GOWNS', 'GOXES', 'GOYIM', 'GOYLE', 'GRAAL', 'GRABS', 'GRACE', 'GRADE', 'GRADS', 'GRAFF', 'GRAFT', 'GRAIL', 'GRAIN', 'GRAIP', 'GRAMA', 'GRAME', 'GRAMP', 'GRAMS', 'GRANA', 'GRAND', 'GRANO', 'GRANS', 'GRANT', 'GRAPE', 'GRAPH', 'GRAPY', 'GRASP', 'GRASS', 'GRATA', 'GRATE', 'GRATS', 'GRAVE', 'GRAVS', 'GRAVY', 'GRAYS', 'GRAZE', 'GREAT', 'GREBE', 'GREBO', 'GRECE', 'GREED', 'GREEK', 'GREEN', 'GREES', 'GREET', 'GREGE', 'GREGO', 'GREIN', 'GRENS', 'GREPS', 'GRESE', 'GREVE', 'GREWS', 'GREYS', 'GRICE', 'GRIDE', 'GRIDS', 'GRIEF', 'GRIFF', 'GRIFT', 'GRIGS', 'GRIKE', 'GRILL', 'GRIME', 'GRIMY', 'GRIND', 'GRINS', 'GRIOT', 'GRIPE', 'GRIPS', 'GRIPT', 'GRIPY', 'GRISE', 'GRIST', 'GRISY', 'GRITH', 'GRITS', 'GRIZE', 'GROAN', 'GROAT', 'GRODY', 'GROGS', 'GROIN', 'GROKS', 'GROMA', 'GROMS', 'GRONE', 'GROOF', 'GROOM', 'GROPE', 'GROSS', 'GROSZ', 'GROTS', 'GROUF', 'GROUP', 'GROUT', 'GROVE', 'GROVY', 'GROWL', 'GROWN', 'GROWS', 'GRRLS', 'GRRRL', 'GRUBS', 'GRUED', 'GRUEL', 'GRUES', 'GRUFE', 'GRUFF', 'GRUME', 'GRUMP', 'GRUND', 'GRUNT', 'GRYCE', 'GRYDE', 'GRYKE', 'GRYPE', 'GRYPT', 'GUACO', 'GUANA', 'GUANO', 'GUANS', 'GUARD', 'GUARS', 'GUAVA', 'GUBBA', 'GUCKS', 'GUCKY', 'GUDES', 'GUESS', 'GUEST', 'GUFFS', 'GUGAS', 'GUGGL', 'GUIDE', 'GUIDO', 'GUIDS', 'GUILD', 'GUILE', 'GUILT', 'GUIMP', 'GUIRO', 'GUISE', 'GULAB', 'GULAG', 'GULAR', 'GULAS', 'GULCH', 'GULES', 'GULET', 'GULFS', 'GULFY', 'GULLS', 'GULLY', 'GULPH', 'GULPS', 'GULPY', 'GUMBO', 'GUMMA', 'GUMMI', 'GUMMY', 'GUMPS', 'GUNAS', 'GUNDI', 'GUNDY', 'GUNGE', 'GUNGY', 'GUNKS', 'GUNKY', 'GUNNY', 'GUPPY', 'GUQIN', 'GURDY', 'GURGE', 'GURKS', 'GURLS', 'GURLY', 'GURNS', 'GURRY', 'GURSH', 'GURUS', 'GUSHY', 'GUSLA', 'GUSLE', 'GUSLI', 'GUSSY', 'GUSTO', 'GUSTS', 'GUSTY', 'GUTSY', 'GUTTA', 'GUTTY', 'GUYED', 'GUYLE', 'GUYOT', 'GUYSE', 'GWINE', 'GYALS', 'GYANS', 'GYBED', 'GYBES', 'GYELD', 'GYMPS', 'GYNAE', 'GYNIE', 'GYNNY', 'GYNOS', 'GYOZA', 'GYPES', 'GYPOS', 'GYPPO', 'GYPPY', 'GYPSY', 'GYRAL', 'GYRED', 'GYRES', 'GYRON', 'GYROS', 'GYRUS', 'GYTES', 'GYVED', 'GYVER', 'GYVES', 'HAAFS', 'HAARS', 'HAATS', 'HABIT', 'HABLE', 'HABUS', 'HACEK', 'HACKS', 'HACKY', 'HADAL', 'HADED', 'HADES', 'HADJI', 'HADST', 'HAEMS', 'HAERE', 'HAETS', 'HAFFS', 'HAFIZ', 'HAFTA', 'HAFTS', 'HAGGS', 'HAHAM', 'HAHAS', 'HAICK', 'HAIKA', 'HAIKS', 'HAIKU', 'HAILS', 'HAILY', 'HAINS', 'HAINT', 'HAIRS', 'HAIRY', 'HAITH', 'HAJES', 'HAJIS', 'HAJJI', 'HAKAM', 'HAKAS', 'HAKEA', 'HAKES', 'HAKIM', 'HAKUS', 'HALAL', 'HALDI', 'HALED', 'HALER', 'HALES', 'HALFA', 'HALFS', 'HALID', 'HALLO', 'HALLS', 'HALMA', 'HALMS', 'HALON', 'HALOS', 'HALSE', 'HALSH', 'HALTS', 'HALVA', 'HALVE', 'HALWA', 'HAMAL', 'HAMBA', 'HAMED', 'HAMEL', 'HAMES', 'HAMMY', 'HAMZA', 'HANAP', 'HANCE', 'HANCH', 'HANDI', 'HANDS', 'HANDY', 'HANGI', 'HANGS', 'HANKS', 'HANKY', 'HANSA', 'HANSE', 'HANTS', 'HAOLE', 'HAOMA', 'HAPAS', 'HAPAX', 'HAPLY', 'HAPPI', 'HAPPY', 'HAPUS', 'HARAM', 'HARDS', 'HARDY', 'HARED', 'HAREM', 'HARES', 'HARIM', 'HARKS', 'HARLS', 'HARMS', 'HARNS', 'HAROS', 'HARPS', 'HARPY', 'HARRY', 'HARSH', 'HARTS', 'HASHY', 'HASKS', 'HASPS', 'HASTA', 'HASTE', 'HASTY', 'HATCH', 'HATED', 'HATER', 'HATES', 'HATHA', 'HATHI', 'HATTY', 'HAUDS', 'HAUFS', 'HAUGH', 'HAUGO', 'HAULD', 'HAULM', 'HAULS', 'HAULT', 'HAUNS', 'HAUNT', 'HAUSE', 'HAUTE', 'HAVAN', 'HAVEL', 'HAVEN', 'HAVER', 'HAVES', 'HAVOC', 'HAWED', 'HAWKS', 'HAWMS', 'HAWSE', 'HAYED', 'HAYER', 'HAYEY', 'HAYLE', 'HAZAN', 'HAZED', 'HAZEL', 'HAZER', 'HAZES', 'HAZLE', 'HEADS', 'HEADY', 'HEALD', 'HEALS', 'HEAME', 'HEAPS', 'HEAPY', 'HEARD', 'HEARE', 'HEARS', 'HEART', 'HEAST', 'HEATH', 'HEATS', 'HEATY', 'HEAVE', 'HEAVY', 'HEBEN', 'HEBES', 'HECHT', 'HECKS', 'HEDER', 'HEDGE', 'HEDGY', 'HEEDS', 'HEEDY', 'HEELS', 'HEEZE', 'HEFTE', 'HEFTS', 'HEFTY', 'HEIAU', 'HEIDS', 'HEIGH', 'HEILS', 'HEIRS', 'HEIST', 'HEJAB', 'HEJRA', 'HELED', 'HELES', 'HELIO', 'HELIX', 'HELLA', 'HELLO', 'HELLS', 'HELLY', 'HELMS', 'HELOS', 'HELOT', 'HELPS', 'HELVE', 'HEMAL', 'HEMES', 'HEMIC', 'HEMIN', 'HEMPS', 'HEMPY', 'HENCE', 'HENCH', 'HENDS', 'HENGE', 'HENNA', 'HENNY', 'HENRY', 'HENTS', 'HEPAR', 'HERBS', 'HERBY', 'HERDS', 'HERES', 'HERLS', 'HERMA', 'HERMS', 'HERNS', 'HERON', 'HEROS', 'HERPS', 'HERRY', 'HERSE', 'HERTZ', 'HERYE', 'HESPS', 'HESTS', 'HETES', 'HETHS', 'HEUCH', 'HEUGH', 'HEVEA', 'HEVEL', 'HEWED', 'HEWER', 'HEWGH', 'HEXAD', 'HEXED', 'HEXER', 'HEXES', 'HEXYL', 'HEYED', 'HIANT', 'HIBAS', 'HICKS', 'HIDED', 'HIDER', 'HIDES', 'HIEMS', 'HIFIS', 'HIGHS', 'HIGHT', 'HIJAB', 'HIJRA', 'HIKED', 'HIKER', 'HIKES', 'HIKOI', 'HILAR', 'HILCH', 'HILLO', 'HILLS', 'HILLY', 'HILSA', 'HILTS', 'HILUM', 'HILUS', 'HIMBO', 'HINAU', 'HINDS', 'HINGE', 'HINGS', 'HINKY', 'HINNY', 'HINTS', 'HIOIS', 'HIPED', 'HIPER', 'HIPES', 'HIPLY', 'HIPPO', 'HIPPY', 'HIRED', 'HIREE', 'HIRER', 'HIRES', 'HISSY', 'HISTS', 'HITCH', 'HITHE', 'HIVED', 'HIVER', 'HIVES', 'HIZEN', 'HOACH', 'HOAED', 'HOAGY', 'HOARD', 'HOARS', 'HOARY', 'HOAST', 'HOBBY', 'HOBOS', 'HOCKS', 'HOCUS', 'HODAD', 'HODJA', 'HOERS', 'HOGAN', 'HOGEN', 'HOGGS', 'HOGHS', 'HOGOH', 'HOGOS', 'HOHED', 'HOICK', 'HOIED', 'HOIKS', 'HOING', 'HOISE', 'HOIST', 'HOKAS', 'HOKED', 'HOKES', 'HOKEY', 'HOKIS', 'HOKKU', 'HOKUM', 'HOLDS', 'HOLED', 'HOLES', 'HOLEY', 'HOLKS', 'HOLLA', 'HOLLO', 'HOLLY', 'HOLME', 'HOLMS', 'HOLON', 'HOLOS', 'HOLTS', 'HOMAS', 'HOMED', 'HOMER', 'HOMES', 'HOMEY', 'HOMIE', 'HOMME', 'HOMOS', 'HONAN', 'HONDA', 'HONDS', 'HONED', 'HONER', 'HONES', 'HONEY', 'HONGI', 'HONGS', 'HONKS', 'HONKY', 'HONOR', 'HOOCH', 'HOODS', 'HOODY', 'HOOEY', 'HOOFS', 'HOOGO', 'HOOHA', 'HOOKA', 'HOOKS', 'HOOKY', 'HOOLY', 'HOONS', 'HOOPS', 'HOORD', 'HOORS', 'HOOSH', 'HOOTS', 'HOOTY', 'HOOVE', 'HOPAK', 'HOPED', 'HOPER', 'HOPES', 'HOPPY', 'HORAH', 'HORAL', 'HORAS', 'HORDE', 'HORIS', 'HORKS', 'HORME', 'HORNS', 'HORNY', 'HORSE', 'HORST', 'HORSY', 'HOSED', 'HOSEL', 'HOSEN', 'HOSER', 'HOSES', 'HOSEY', 'HOSTA', 'HOSTS', 'HOTCH', 'HOTEL', 'HOTEN', 'HOTIS', 'HOTLY', 'HOTTE', 'HOTTY', 'HOUFF', 'HOUFS', 'HOUGH', 'HOUND', 'HOURI', 'HOURS', 'HOUSE', 'HOUTS', 'HOVEA', 'HOVED', 'HOVEL', 'HOVEN', 'HOVER', 'HOVES', 'HOWAY', 'HOWBE', 'HOWDY', 'HOWES', 'HOWFF', 'HOWFS', 'HOWKS', 'HOWLS', 'HOWRE', 'HOWSO', 'HOWTO', 'HOXED', 'HOXES', 'HOYAS', 'HOYED', 'HOYLE', 'HUBBA', 'HUBBY', 'HUCKS', 'HUDNA', 'HUDUD', 'HUERS', 'HUFFS', 'HUFFY', 'HUGER', 'HUGGY', 'HUHUS', 'HUIAS', 'HUIES', 'HUKOU', 'HULAS', 'HULES', 'HULKS', 'HULKY', 'HULLO', 'HULLS', 'HULLY', 'HUMAN', 'HUMAS', 'HUMFS', 'HUMIC', 'HUMID', 'HUMOR', 'HUMPH', 'HUMPS', 'HUMPY', 'HUMUS', 'HUNCH', 'HUNDO', 'HUNKS', 'HUNKY', 'HUNTS', 'HURDS', 'HURLS', 'HURLY', 'HURRA', 'HURRY', 'HURST', 'HURTS', 'HURTY', 'HUSHY', 'HUSKS', 'HUSKY', 'HUSOS', 'HUSSY', 'HUTCH', 'HUTIA', 'HUZZA', 'HUZZY', 'HWYLS', 'HYDEL', 'HYDRA', 'HYDRO', 'HYENA', 'HYENS', 'HYGGE', 'HYING', 'HYKES', 'HYLAS', 'HYLEG', 'HYLES', 'HYLIC', 'HYMEN', 'HYMNS', 'HYNDE', 'HYOID', 'HYPED', 'HYPER', 'HYPES', 'HYPHA', 'HYPHY', 'HYPOS', 'HYRAX', 'HYSON', 'HYTHE', 'IAMBI', 'IAMBS', 'IBRIK', 'ICERS', 'ICHED', 'ICHES', 'ICHOR', 'ICIER', 'ICILY', 'ICING', 'ICKER', 'ICKLE', 'ICONS', 'ICTAL', 'ICTIC', 'ICTUS', 'IDANT', 'IDDAH', 'IDDAT', 'IDDUT', 'IDEAL', 'IDEAS', 'IDEES', 'IDENT', 'IDIOM', 'IDIOT', 'IDLED', 'IDLER', 'IDLES', 'IDLIS', 'IDOLA', 'IDOLS', 'IDYLL', 'IDYLS', 'IFTAR', 'IGAPO', 'IGGED', 'IGLOO', 'IGLUS', 'IGNIS', 'IHRAM', 'IIWIS', 'IKANS', 'IKATS', 'IKONS', 'ILEAC', 'ILEAL', 'ILEUM', 'ILEUS', 'ILIAC', 'ILIAD', 'ILIAL', 'ILIUM', 'ILLER', 'ILLTH', 'IMAGE', 'IMAGO', 'IMAGY', 'IMAMS', 'IMARI', 'IMAUM', 'IMBAR', 'IMBED', 'IMBOS', 'IMBUE', 'IMIDE', 'IMIDO', 'IMIDS', 'IMINE', 'IMINO', 'IMLIS', 'IMMEW', 'IMMIT', 'IMMIX', 'IMPED', 'IMPEL', 'IMPIS', 'IMPLY', 'IMPOT', 'IMPRO', 'IMSHI', 'IMSHY', 'INANE', 'INAPT', 'INARM', 'INBOX', 'INBYE', 'INCAS', 'INCEL', 'INCLE', 'INCOG', 'INCUR', 'INCUS', 'INCUT', 'INDEW', 'INDEX', 'INDIA', 'INDIE', 'INDOL', 'INDOW', 'INDRI', 'INDUE', 'INEPT', 'INERM', 'INERT', 'INFER', 'INFIX', 'INFOS', 'INFRA', 'INGAN', 'INGLE', 'INGOT', 'INION', 'INKED', 'INKER', 'INKLE', 'INLAY', 'INLET', 'INNED', 'INNER', 'INNIE', 'INNIT', 'INORB', 'INPUT', 'INROS', 'INRUN', 'INSEE', 'INSET', 'INSPO', 'INTEL', 'INTER', 'INTIL', 'INTIS', 'INTRA', 'INTRO', 'INULA', 'INURE', 'INURN', 'INUST', 'INVAR', 'INVER', 'INWIT', 'IODIC', 'IODID', 'IODIN', 'IONIC', 'IORAS', 'IOTAS', 'IPPON', 'IRADE', 'IRATE', 'IRIDS', 'IRING', 'IRKED', 'IROKO', 'IRONE', 'IRONS', 'IRONY', 'ISBAS', 'ISHES', 'ISLED', 'ISLES', 'ISLET', 'ISNAE', 'ISSEI', 'ISSUE', 'ISTLE', 'ITCHY', 'ITEMS', 'ITHER', 'IVIED', 'IVIES', 'IVORY', 'IXIAS', 'IXNAY', 'IXORA', 'IXTLE', 'IZARD', 'IZARS', 'IZZAT', 'JAAPS', 'JABOT', 'JACAL', 'JACET', 'JACKS', 'JACKY', 'JADED', 'JADES', 'JAFAS', 'JAFFA', 'JAGAS', 'JAGER', 'JAGGS', 'JAGGY', 'JAGIR', 'JAGRA', 'JAILS', 'JAKER', 'JAKES', 'JAKEY', 'JAKIE', 'JALAP', 'JALEO', 'JALOP', 'JAMBE', 'JAMBO', 'JAMBS', 'JAMBU', 'JAMES', 'JAMMY', 'JAMON', 'JAMUN', 'JANES', 'JANKY', 'JANNS', 'JANNY', 'JANTY', 'JAPAN', 'JAPED', 'JAPER', 'JAPES', 'JARKS', 'JARLS', 'JARPS', 'JARTA', 'JARUL', 'JASEY', 'JASPE', 'JASPS', 'JATHA', 'JATIS', 'JATOS', 'JAUKS', 'JAUNE', 'JAUNT', 'JAUPS', 'JAVAS', 'JAVEL', 'JAWAN', 'JAWED', 'JAWNS', 'JAXIE', 'JAZZY', 'JEANS', 'JEATS', 'JEBEL', 'JEDIS', 'JEELS', 'JEELY', 'JEEPS', 'JEERA', 'JEERS', 'JEEZE', 'JEFES', 'JEFFS', 'JEHAD', 'JEHUS', 'JELAB', 'JELLO', 'JELLS', 'JELLY', 'JEMBE', 'JEMMY', 'JENNY', 'JEONS', 'JERID', 'JERKS', 'JERKY', 'JERRY', 'JESSE', 'JESSY', 'JESTS', 'JESUS', 'JETEE', 'JETES', 'JETON', 'JETTY', 'JEUNE', 'JEWED', 'JEWEL', 'JEWIE', 'JHALA', 'JHEEL', 'JHILS', 'JIAOS', 'JIBBA', 'JIBBS', 'JIBED', 'JIBER', 'JIBES', 'JIFFS', 'JIFFY', 'JIGGY', 'JIGOT', 'JIHAD', 'JILLS', 'JILTS', 'JIMMY', 'JIMPY', 'JINGO', 'JINGS', 'JINKS', 'JINNE', 'JINNI', 'JINNS', 'JIRDS', 'JIRGA', 'JIRRE', 'JISMS', 'JITIS', 'JITTY', 'JIVED', 'JIVER', 'JIVES', 'JIVEY', 'JNANA', 'JOBED', 'JOBES', 'JOCKO', 'JOCKS', 'JOCKY', 'JOCOS', 'JODEL', 'JOEYS', 'JOHNS', 'JOINS', 'JOINT', 'JOIST', 'JOKED', 'JOKER', 'JOKES', 'JOKEY', 'JOKOL', 'JOLED', 'JOLES', 'JOLIE', 'JOLLO', 'JOLLS', 'JOLLY', 'JOLTS', 'JOLTY', 'JOMON', 'JOMOS', 'JONES', 'JONGS', 'JONTY', 'JOOKS', 'JORAM', 'JORTS', 'JORUM', 'JOTAS', 'JOTTY', 'JOTUN', 'JOUAL', 'JOUGS', 'JOUKS', 'JOULE', 'JOURS', 'JOUST', 'JOWAR', 'JOWED', 'JOWLS', 'JOWLY', 'JOYED', 'JUBAS', 'JUBES', 'JUCOS', 'JUDAS', 'JUDGE', 'JUDGY', 'JUDOS', 'JUGAL', 'JUGUM', 'JUICE', 'JUICY', 'JUJUS', 'JUKED', 'JUKES', 'JUKUS', 'JULEP', 'JULIA', 'JUMAR', 'JUMBO', 'JUMBY', 'JUMPS', 'JUMPY', 'JUNCO', 'JUNKS', 'JUNKY', 'JUNTA', 'JUNTO', 'JUPES', 'JUPON', 'JURAL', 'JURAT', 'JUREL', 'JURES', 'JURIS', 'JUROR', 'JUSTE', 'JUSTS', 'JUTES', 'JUTTY', 'JUVES', 'JUVIE', 'KAAMA', 'KABAB', 'KABAR', 'KABOB', 'KACHA', 'KACKS', 'KADAI', 'KADES', 'KADIS', 'KAFIR', 'KAGOS', 'KAGUS', 'KAHAL', 'KAIAK', 'KAIDS', 'KAIES', 'KAIFS', 'KAIKA', 'KAIKS', 'KAILS', 'KAIMS', 'KAING', 'KAINS', 'KAJAL', 'KAKAS', 'KAKIS', 'KALAM', 'KALAS', 'KALES', 'KALIF', 'KALIS', 'KALPA', 'KALUA', 'KAMAS', 'KAMES', 'KAMIK', 'KAMIS', 'KAMME', 'KANAE', 'KANAL', 'KANAS', 'KANAT', 'KANDY', 'KANEH', 'KANES', 'KANGA', 'KANGS', 'KANJI', 'KANTS', 'KANZU', 'KAONS', 'KAPAI', 'KAPAS', 'KAPHA', 'KAPHS', 'KAPOK', 'KAPOW', 'KAPPA', 'KAPUR', 'KAPUS', 'KAPUT', 'KARAI', 'KARAS', 'KARAT', 'KAREE', 'KAREZ', 'KARKS', 'KARMA', 'KARNS', 'KAROO', 'KAROS', 'KARRI', 'KARST', 'KARSY', 'KARTS', 'KARZY', 'KASHA', 'KASME', 'KATAL', 'KATAS', 'KATIS', 'KATTI', 'KAUGH', 'KAURI', 'KAURU', 'KAURY', 'KAVAL', 'KAVAS', 'KAWAS', 'KAWAU', 'KAWED', 'KAYAK', 'KAYLE', 'KAYOS', 'KAZIS', 'KAZOO', 'KBARS', 'KCALS', 'KEAKI', 'KEBAB', 'KEBAR', 'KEBOB', 'KECKS', 'KEDGE', 'KEDGY', 'KEECH', 'KEEFS', 'KEEKS', 'KEELS', 'KEEMA', 'KEENO', 'KEENS', 'KEEPS', 'KEETS', 'KEEVE', 'KEFIR', 'KEHUA', 'KEIRS', 'KELEP', 'KELIM', 'KELLS', 'KELLY', 'KELPS', 'KELPY', 'KELTS', 'KELTY', 'KEMBO', 'KEMBS', 'KEMPS', 'KEMPT', 'KEMPY', 'KENAF', 'KENCH', 'KENDO', 'KENOS', 'KENTE', 'KENTS', 'KEPIS', 'KERBS', 'KEREL', 'KERFS', 'KERKY', 'KERMA', 'KERNE', 'KERNS', 'KEROS', 'KERRY', 'KERVE', 'KESAR', 'KESTS', 'KETAS', 'KETCH', 'KETES', 'KETOL', 'KEVEL', 'KEVIL', 'KEXES', 'KEYED', 'KEYER', 'KHADI', 'KHADS', 'KHAFS', 'KHAKI', 'KHANA', 'KHANS', 'KHAPH', 'KHATS', 'KHAYA', 'KHAZI', 'KHEDA', 'KHEER', 'KHETH', 'KHETS', 'KHIRS', 'KHOJA', 'KHORS', 'KHOUM', 'KHUDS', 'KHULA', 'KHYAL', 'KIAAT', 'KIACK', 'KIAKI', 'KIANG', 'KIASU', 'KIBBE', 'KIBBI', 'KIBEI', 'KIBES', 'KIBLA', 'KICKS', 'KICKY', 'KIDDO', 'KIDDY', 'KIDEL', 'KIDEO', 'KIDGE', 'KIEFS', 'KIERS', 'KIEVE', 'KIEVS', 'KIGHT', 'KIKAY', 'KIKES', 'KIKOI', 'KILEY', 'KILIG', 'KILIM', 'KILLS', 'KILNS', 'KILOS', 'KILPS', 'KILTS', 'KILTY', 'KIMBO', 'KIMET', 'KINAS', 'KINDA', 'KINDS', 'KINDY', 'KINES', 'KINGS', 'KINGY', 'KININ', 'KINKS', 'KINKY', 'KINOS', 'KIORE', 'KIOSK', 'KIPAH', 'KIPAS', 'KIPES', 'KIPPA', 'KIPPS', 'KIPSY', 'KIRBY', 'KIRKS', 'KIRNS', 'KIRRI', 'KISAN', 'KISSY', 'KISTS', 'KITAB', 'KITED', 'KITER', 'KITES', 'KITHE', 'KITHS', 'KITKE', 'KITTY', 'KITUL', 'KIVAS', 'KIWIS', 'KLANG', 'KLAPS', 'KLETT', 'KLICK', 'KLIEG', 'KLIKS', 'KLONG', 'KLOOF', 'KLUGE', 'KLUTZ', 'KNACK', 'KNAGS', 'KNAPS', 'KNARL', 'KNARS', 'KNAUR', 'KNAVE', 'KNAWE', 'KNEAD', 'KNEED', 'KNEEL', 'KNEES', 'KNELL', 'KNELT', 'KNICK', 'KNIFE', 'KNISH', 'KNITS', 'KNIVE', 'KNOBS', 'KNOCK', 'KNOLL', 'KNOOP', 'KNOPS', 'KNOSP', 'KNOTS', 'KNOUD', 'KNOUT', 'KNOWD', 'KNOWE', 'KNOWN', 'KNOWS', 'KNUBS', 'KNULE', 'KNURL', 'KNURR', 'KNURS', 'KNUTS', 'KOALA', 'KOANS', 'KOAPS', 'KOBAN', 'KOBOS', 'KOELS', 'KOFFS', 'KOFTA', 'KOGAL', 'KOHAS', 'KOHEN', 'KOHLS', 'KOINE', 'KOIWI', 'KOJIS', 'KOKAM', 'KOKAS', 'KOKER', 'KOKRA', 'KOKUM', 'KOLAS', 'KOLOS', 'KOMBI', 'KOMBU', 'KONBU', 'KONDO', 'KONKS', 'KOOKS', 'KOOKY', 'KOORI', 'KOPEK', 'KOPHS', 'KOPJE', 'KOPPA', 'KORAI', 'KORAN', 'KORAS', 'KORAT', 'KORES', 'KORIS', 'KORMA', 'KOROS', 'KORUN', 'KORUS', 'KOSES', 'KOTCH', 'KOTOS', 'KOTOW', 'KOURA', 'KRAAL', 'KRABS', 'KRAFT', 'KRAIS', 'KRAIT', 'KRANG', 'KRANS', 'KRANZ', 'KRAUT', 'KRAYS', 'KREEF', 'KREEN', 'KREEP', 'KRENG', 'KREWE', 'KRILL', 'KRIOL', 'KRONA', 'KRONE', 'KROON', 'KRUBI', 'KRUMP', 'KRUNK', 'KSARS', 'KUBIE', 'KUDOS', 'KUDUS', 'KUDZU', 'KUFIS', 'KUGEL', 'KUIAS', 'KUKRI', 'KUKUS', 'KULAK', 'KULAN', 'KULAS', 'KULFI', 'KUMIS', 'KUMYS', 'KUNAS', 'KUNDS', 'KURIS', 'KURRE', 'KURTA', 'KURUS', 'KUSSO', 'KUSTI', 'KUTAI', 'KUTAS', 'KUTCH', 'KUTIS', 'KUTUS', 'KUYAS', 'KUZUS', 'KVASS', 'KVELL', 'KWAAI', 'KWELA', 'KWINK', 'KWIRL', 'KYACK', 'KYAKS', 'KYANG', 'KYARS', 'KYATS', 'KYBOS', 'KYDST', 'KYLES', 'KYLIE', 'KYLIN', 'KYLIX', 'KYLOE', 'KYNDE', 'KYNDS', 'KYPES', 'KYRIE', 'KYTES', 'KYTHE', 'KYUDO', 'LAARF', 'LAARI', 'LABDA', 'LABEL', 'LABIA', 'LABIS', 'LABNE', 'LABOR', 'LABRA', 'LACCY', 'LACED', 'LACER', 'LACES', 'LACET', 'LACEY', 'LACIS', 'LACKA', 'LACKS', 'LACKY', 'LADDU', 'LADDY', 'LADED', 'LADEE', 'LADEN', 'LADER', 'LADES', 'LADLE', 'LADOO', 'LAERS', 'LAEVO', 'LAGAN', 'LAGAR', 'LAGER', 'LAGGY', 'LAHAL', 'LAHAR', 'LAICH', 'LAICS', 'LAIDE', 'LAIDS', 'LAIGH', 'LAIKA', 'LAIKS', 'LAIRD', 'LAIRS', 'LAIRY', 'LAITH', 'LAITY', 'LAKED', 'LAKER', 'LAKES', 'LAKHS', 'LAKIN', 'LAKSA', 'LALDY', 'LALLS', 'LAMAS', 'LAMBS', 'LAMBY', 'LAMED', 'LAMER', 'LAMES', 'LAMIA', 'LAMMY', 'LAMPS', 'LANAI', 'LANAS', 'LANCE', 'LANCH', 'LANDE', 'LANDS', 'LANED', 'LANES', 'LANKS', 'LANKY', 'LANTS', 'LAPAS', 'LAPEL', 'LAPIN', 'LAPIS', 'LAPJE', 'LAPPA', 'LAPPY', 'LAPSE', 'LARCH', 'LARDS', 'LARDY', 'LAREE', 'LARES', 'LARFS', 'LARGA', 'LARGE', 'LARGO', 'LARIS', 'LARKS', 'LARKY', 'LARNS', 'LARNT', 'LARUM', 'LARVA', 'LASED', 'LASER', 'LASES', 'LASSI', 'LASSO', 'LASSU', 'LASSY', 'LASTS', 'LATAH', 'LATCH', 'LATED', 'LATEN', 'LATER', 'LATEX', 'LATHE', 'LATHI', 'LATHS', 'LATHY', 'LATKE', 'LATTE', 'LATUS', 'LAUAN', 'LAUCH', 'LAUDE', 'LAUDS', 'LAUFS', 'LAUGH', 'LAUND', 'LAURA', 'LAVAL', 'LAVAS', 'LAVED', 'LAVER', 'LAVES', 'LAVRA', 'LAVVY', 'LAWED', 'LAWER', 'LAWIN', 'LAWKS', 'LAWNS', 'LAWNY', 'LAWSY', 'LAXED', 'LAXER', 'LAXES', 'LAXLY', 'LAYBY', 'LAYED', 'LAYER', 'LAYIN', 'LAYUP', 'LAZAR', 'LAZED', 'LAZES', 'LAZOS', 'LAZZI', 'LAZZO', 'LEACH', 'LEADS', 'LEADY', 'LEAFS', 'LEAFY', 'LEAKS', 'LEAKY', 'LEAMS', 'LEANS', 'LEANT', 'LEANY', 'LEAPS', 'LEAPT', 'LEARE', 'LEARN', 'LEARS', 'LEARY', 'LEASE', 'LEASH', 'LEAST', 'LEATS', 'LEAVE', 'LEAVY', 'LEAZE', 'LEBEN', 'LECCY', 'LECHE', 'LEDES', 'LEDGE', 'LEDGY', 'LEDUM', 'LEEAR', 'LEECH', 'LEEKS', 'LEEPS', 'LEERS', 'LEERY', 'LEESE', 'LEETS', 'LEEZE', 'LEFTE', 'LEFTS', 'LEFTY', 'LEGAL', 'LEGER', 'LEGES', 'LEGGE', 'LEGGO', 'LEGGY', 'LEGIT', 'LEGNO', 'LEHRS', 'LEHUA', 'LEIRS', 'LEISH', 'LEMAN', 'LEMED', 'LEMEL', 'LEMES', 'LEMMA', 'LEMME', 'LEMON', 'LEMUR', 'LENDS', 'LENES', 'LENGS', 'LENIS', 'LENOS', 'LENSE', 'LENTI', 'LENTO', 'LEONE', 'LEPAK', 'LEPER', 'LEPID', 'LEPRA', 'LEPTA', 'LERED', 'LERES', 'LERPS', 'LESBO', 'LESES', 'LESOS', 'LESTS', 'LETCH', 'LETHE', 'LETTY', 'LETUP', 'LEUCH', 'LEUCO', 'LEUDS', 'LEUGH', 'LEVAS', 'LEVEE', 'LEVEL', 'LEVER', 'LEVES', 'LEVIN', 'LEVIS', 'LEWIS', 'LEXES', 'LEXIS', 'LEZES', 'LEZZA', 'LEZZO', 'LEZZY', 'LIANA', 'LIANE', 'LIANG', 'LIARD', 'LIARS', 'LIART', 'LIBEL', 'LIBER', 'LIBOR', 'LIBRA', 'LIBRE', 'LIBRI', 'LICET', 'LICHI', 'LICHT', 'LICIT', 'LICKS', 'LIDAR', 'LIDOS', 'LIEFS', 'LIEGE', 'LIENS', 'LIERS', 'LIEUS', 'LIEVE', 'LIFER', 'LIFES', 'LIFEY', 'LIFTS', 'LIGAN', 'LIGER', 'LIGGE', 'LIGHT', 'LIGNE', 'LIKED', 'LIKEN', 'LIKER', 'LIKES', 'LIKIN', 'LILAC', 'LILLS', 'LILOS', 'LILTS', 'LILTY', 'LIMAN', 'LIMAS', 'LIMAX', 'LIMBA', 'LIMBI', 'LIMBO', 'LIMBS', 'LIMBY', 'LIMED', 'LIMEN', 'LIMES', 'LIMEY', 'LIMIT', 'LIMMA', 'LIMNS', 'LIMOS', 'LIMPA', 'LIMPS', 'LINAC', 'LINCH', 'LINDS', 'LINDY', 'LINED', 'LINEN', 'LINER', 'LINES', 'LINEY', 'LINGA', 'LINGO', 'LINGS', 'LINGY', 'LININ', 'LINKS', 'LINKY', 'LINNS', 'LINNY', 'LINOS', 'LINTS', 'LINTY', 'LINUM', 'LINUX', 'LIONS', 'LIPAS', 'LIPES', 'LIPID', 'LIPIN', 'LIPOS', 'LIPPY', 'LIRAS', 'LIRKS', 'LIROT', 'LISES', 'LISKS', 'LISLE', 'LISPS', 'LISTS', 'LITAI', 'LITAS', 'LITED', 'LITEM', 'LITER', 'LITES', 'LITHE', 'LITHO', 'LITHS', 'LITIE', 'LITRE', 'LIVED', 'LIVEN', 'LIVER', 'LIVES', 'LIVID', 'LIVOR', 'LIVRE', 'LIWAA', 'LIWAS', 'LLAMA', 'LLANO', 'LOACH', 'LOADS', 'LOAFS', 'LOAMS', 'LOAMY', 'LOANS', 'LOAST', 'LOATH', 'LOAVE', 'LOBAR', 'LOBBY', 'LOBED', 'LOBES', 'LOBOS', 'LOBUS', 'LOCAL', 'LOCHE', 'LOCHS', 'LOCHY', 'LOCIE', 'LOCIS', 'LOCKS', 'LOCKY', 'LOCOS', 'LOCUM', 'LOCUS', 'LODEN', 'LODES', 'LODGE', 'LOESS', 'LOFTS', 'LOFTY', 'LOGAN', 'LOGES', 'LOGGY', 'LOGIA', 'LOGIC', 'LOGIE', 'LOGIN', 'LOGOI', 'LOGON', 'LOGOS', 'LOHAN', 'LOIDS', 'LOINS', 'LOIPE', 'LOIRS', 'LOKES', 'LOKEY', 'LOKUM', 'LOLAS', 'LOLED', 'LOLLO', 'LOLLS', 'LOLLY', 'LOLOG', 'LOLOS', 'LOMAS', 'LOMED', 'LOMES', 'LONER', 'LONGA', 'LONGE', 'LONGS', 'LOOBY', 'LOOED', 'LOOEY', 'LOOFA', 'LOOFS', 'LOOIE', 'LOOKS', 'LOOKY', 'LOOMS', 'LOONS', 'LOONY', 'LOOPS', 'LOOPY', 'LOORD', 'LOOSE', 'LOOTS', 'LOPED', 'LOPER', 'LOPES', 'LOPPY', 'LORAL', 'LORAN', 'LORDS', 'LORDY', 'LOREL', 'LORES', 'LORIC', 'LORIS', 'LORRY', 'LOSED', 'LOSEL', 'LOSEN', 'LOSER', 'LOSES', 'LOSSY', 'LOTAH', 'LOTAS', 'LOTES', 'LOTIC', 'LOTOS', 'LOTSA', 'LOTTA', 'LOTTE', 'LOTTO', 'LOTUS', 'LOUED', 'LOUGH', 'LOUIE', 'LOUIS', 'LOUMA', 'LOUND', 'LOUNS', 'LOUPE', 'LOUPS', 'LOURE', 'LOURS', 'LOURY', 'LOUSE', 'LOUSY', 'LOUTS', 'LOVAT', 'LOVED', 'LOVEE', 'LOVER', 'LOVES', 'LOVEY', 'LOVIE', 'LOWAN', 'LOWED', 'LOWEN', 'LOWER', 'LOWES', 'LOWLY', 'LOWND', 'LOWNE', 'LOWNS', 'LOWPS', 'LOWRY', 'LOWSE', 'LOWTH', 'LOWTS', 'LOXED', 'LOXES', 'LOYAL', 'LOZEN', 'LUACH', 'LUAUS', 'LUBED', 'LUBES', 'LUBRA', 'LUCES', 'LUCID', 'LUCKS', 'LUCKY', 'LUCRE', 'LUDES', 'LUDIC', 'LUDOS', 'LUFFA', 'LUFFS', 'LUGED', 'LUGER', 'LUGES', 'LULLS', 'LULUS', 'LUMAS', 'LUMBI', 'LUMEN', 'LUMME', 'LUMMY', 'LUMPS', 'LUMPY', 'LUNAR', 'LUNAS', 'LUNCH', 'LUNES', 'LUNET', 'LUNGE', 'LUNGI', 'LUNGS', 'LUNKS', 'LUNTS', 'LUPIN', 'LUPUS', 'LURCH', 'LURED', 'LURER', 'LURES', 'LUREX', 'LURGI', 'LURGY', 'LURID', 'LURKS', 'LURRY', 'LURVE', 'LUSER', 'LUSHY', 'LUSKS', 'LUSTS', 'LUSTY', 'LUSUS', 'LUTEA', 'LUTED', 'LUTER', 'LUTES', 'LUVVY', 'LUXED', 'LUXER', 'LUXES', 'LWEIS', 'LYAMS', 'LYARD', 'LYART', 'LYASE', 'LYCEA', 'LYCEE', 'LYCRA', 'LYING', 'LYMES', 'LYMPH', 'LYNCH', 'LYNES', 'LYRES', 'LYRIC', 'LYSED', 'LYSES', 'LYSIN', 'LYSIS', 'LYSOL', 'LYSSA', 'LYTED', 'LYTES', 'LYTHE', 'LYTIC', 'LYTTA', 'MAAED', 'MAARE', 'MAARS', 'MABAN', 'MABES', 'MACAS', 'MACAW', 'MACCA', 'MACED', 'MACER', 'MACES', 'MACHE', 'MACHI', 'MACHO', 'MACHS', 'MACKA', 'MACKS', 'MACLE', 'MACON', 'MACRO', 'MACTE', 'MADAL', 'MADAM', 'MADAR', 'MADDY', 'MADGE', 'MADID', 'MADLY', 'MADOS', 'MADRE', 'MAEDI', 'MAERL', 'MAFIA', 'MAFIC', 'MAFTS', 'MAGAS', 'MAGES', 'MAGGS', 'MAGIC', 'MAGMA', 'MAGNA', 'MAGOT', 'MAGUS', 'MAHAL', 'MAHEM', 'MAHIS', 'MAHOE', 'MAHRS', 'MAHUA', 'MAHWA', 'MAIDS', 'MAIKO', 'MAIKS', 'MAILE', 'MAILL', 'MAILO', 'MAILS', 'MAIMS', 'MAINS', 'MAIRE', 'MAIRS', 'MAISE', 'MAIST', 'MAIZE', 'MAJAS', 'MAJAT', 'MAJOE', 'MAJOR', 'MAJOS', 'MAKAF', 'MAKAI', 'MAKAN', 'MAKAR', 'MAKEE', 'MAKER', 'MAKES', 'MAKIE', 'MAKIS', 'MAKOS', 'MALAE', 'MALAI', 'MALAM', 'MALAR', 'MALAS', 'MALAX', 'MALEO', 'MALES', 'MALIC', 'MALIK', 'MALIS', 'MALKY', 'MALLS', 'MALMS', 'MALMY', 'MALTS', 'MALTY', 'MALUS', 'MALVA', 'MALWA', 'MAMAK', 'MAMAS', 'MAMBA', 'MAMBO', 'MAMBU', 'MAMEE', 'MAMEY', 'MAMIE', 'MAMIL', 'MAMMA', 'MAMMY', 'MANAS', 'MANAT', 'MANDI', 'MANDS', 'MANDY', 'MANEB', 'MANED', 'MANEH', 'MANES', 'MANET', 'MANGA', 'MANGE', 'MANGI', 'MANGO', 'MANGS', 'MANGY', 'MANIA', 'MANIC', 'MANIE', 'MANIS', 'MANKS', 'MANKY', 'MANLY', 'MANNA', 'MANNY', 'MANOA', 'MANOR', 'MANOS', 'MANSE', 'MANSO', 'MANTA', 'MANTE', 'MANTO', 'MANTS', 'MANTY', 'MANUL', 'MANUS', 'MANZO', 'MAPAU', 'MAPES', 'MAPLE', 'MAPOU', 'MAPPY', 'MAQAM', 'MAQUI', 'MARAE', 'MARAH', 'MARAL', 'MARAN', 'MARAS', 'MARAY', 'MARCH', 'MARCS', 'MARDS', 'MARDY', 'MARES', 'MARGA', 'MARGE', 'MARGO', 'MARGS', 'MARIA', 'MARID', 'MARIL', 'MARKA', 'MARKS', 'MARLE', 'MARLS', 'MARLY', 'MARMA', 'MARMS', 'MARON', 'MAROR', 'MARRA', 'MARRI', 'MARRY', 'MARSE', 'MARSH', 'MARTS', 'MARUA', 'MARVY', 'MASAS', 'MASED', 'MASER', 'MASES', 'MASHA', 'MASHY', 'MASKS', 'MASON', 'MASSA', 'MASSE', 'MASSY', 'MASTS', 'MASTY', 'MASUR', 'MASUS', 'MASUT', 'MATAI', 'MATCH', 'MATED', 'MATER', 'MATES', 'MATEY', 'MATHE', 'MATHS', 'MATIN', 'MATLO', 'MATRA', 'MATSU', 'MATTE', 'MATTS', 'MATTY', 'MATZA', 'MATZO', 'MAUBY', 'MAUDS', 'MAUKA', 'MAULA', 'MAULS', 'MAUMS', 'MAUMY', 'MAUND', 'MAUNT', 'MAURI', 'MAUSY', 'MAUTS', 'MAUVE', 'MAUVY', 'MAUZY', 'MAVEN', 'MAVIE', 'MAVIN', 'MAVIS', 'MAWED', 'MAWKS', 'MAWKY', 'MAWLA', 'MAWNS', 'MAWPS', 'MAWRS', 'MAXED', 'MAXES', 'MAXIM', 'MAXIS', 'MAYAN', 'MAYAS', 'MAYBE', 'MAYED', 'MAYOR', 'MAYOS', 'MAYST', 'MAZAC', 'MAZAK', 'MAZAR', 'MAZAS', 'MAZED', 'MAZEL', 'MAZER', 'MAZES', 'MAZET', 'MAZEY', 'MAZUT', 'MBARI', 'MBARS', 'MBILA', 'MBIRA', 'MBRET', 'MBUBE', 'MBUGA', 'MEADS', 'MEAKE', 'MEAKS', 'MEALS', 'MEALY', 'MEANE', 'MEANS', 'MEANT', 'MEANY', 'MEARE', 'MEASE', 'MEATH', 'MEATS', 'MEATY', 'MEBBE', 'MEBOS', 'MECCA', 'MECHA', 'MECHS', 'MECKS', 'MECUM', 'MEDAL', 'MEDIA', 'MEDIC', 'MEDII', 'MEDIN', 'MEDLE', 'MEECH', 'MEEDS', 'MEEJA', 'MEEPS', 'MEERS', 'MEETS', 'MEFFS', 'MEIDS', 'MEIKO', 'MEILS', 'MEINS', 'MEINT', 'MEINY', 'MEISM', 'MEITH', 'MEKKA', 'MELAM', 'MELAS', 'MELBA', 'MELCH', 'MELDS', 'MELEE', 'MELES', 'MELIC', 'MELIK', 'MELLS', 'MELOE', 'MELON', 'MELOS', 'MELTS', 'MELTY', 'MEMES', 'MEMIC', 'MEMOS', 'MENAD', 'MENCE', 'MENDS', 'MENED', 'MENES', 'MENGE', 'MENGS', 'MENIL', 'MENSA', 'MENSE', 'MENSH', 'MENTA', 'MENTO', 'MENTS', 'MENUS', 'MEOUS', 'MEOWS', 'MERCH', 'MERCS', 'MERCY', 'MERDE', 'MERDS', 'MERED', 'MEREL', 'MERER', 'MERES', 'MERGE', 'MERIL', 'MERIS', 'MERIT', 'MERKS', 'MERLE', 'MERLS', 'MERRY', 'MERSE', 'MERSK', 'MESAD', 'MESAL', 'MESAS', 'MESCA', 'MESEL', 'MESEM', 'MESES', 'MESHY', 'MESIA', 'MESIC', 'MESNE', 'MESON', 'MESSY', 'MESTO', 'MESYL', 'METAL', 'METAS', 'METED', 'METEG', 'METEL', 'METER', 'METES', 'METHI', 'METHO', 'METHS', 'METHY', 'METIC', 'METIF', 'METIS', 'METOL', 'METRE', 'METRO', 'METTA', 'MEUMS', 'MEUSE', 'MEVED', 'MEVES', 'MEWED', 'MEWLS', 'MEYNT', 'MEZES', 'MEZZA', 'MEZZE', 'MEZZO', 'MGALS', 'MHORR', 'MIAIS', 'MIAOU', 'MIAOW', 'MIASM', 'MIAUL', 'MICAS', 'MICHE', 'MICHI', 'MICHT', 'MICKS', 'MICKY', 'MICOS', 'MICRA', 'MICRO', 'MIDDY', 'MIDGE', 'MIDGY', 'MIDIS', 'MIDST', 'MIENS', 'MIEUX', 'MIEVE', 'MIFFS', 'MIFFY', 'MIFTY', 'MIGGS', 'MIGHT', 'MIGMA', 'MIGOD', 'MIHAS', 'MIHIS', 'MIKAN', 'MIKED', 'MIKES', 'MIKOS', 'MIKRA', 'MIKVA', 'MILCH', 'MILDS', 'MILER', 'MILES', 'MILFS', 'MILIA', 'MILKO', 'MILKS', 'MILKY', 'MILLE', 'MILLS', 'MILLY', 'MILOR', 'MILOS', 'MILPA', 'MILTS', 'MILTY', 'MILTZ', 'MIMED', 'MIMEO', 'MIMER', 'MIMES', 'MIMIC', 'MIMIS', 'MIMSY', 'MINAE', 'MINAR', 'MINAS', 'MINCE', 'MINCY', 'MINDI', 'MINDS', 'MINED', 'MINER', 'MINES', 'MINGE', 'MINGI', 'MINGS', 'MINGY', 'MINIM', 'MINIS', 'MINKE', 'MINKS', 'MINNY', 'MINOR', 'MINOS', 'MINSE', 'MINTS', 'MINTY', 'MINUS', 'MINXY', 'MIRAA', 'MIRAH', 'MIRCH', 'MIRED', 'MIRES', 'MIREX', 'MIRID', 'MIRIN', 'MIRKN', 'MIRKS', 'MIRKY', 'MIRLS', 'MIRLY', 'MIROS', 'MIRRL', 'MIRRS', 'MIRTH', 'MIRVS', 'MIRZA', 'MISAL', 'MISCH', 'MISDO', 'MISER', 'MISES', 'MISGO', 'MISKY', 'MISLS', 'MISOS', 'MISSA', 'MISSY', 'MISTO', 'MISTS', 'MISTY', 'MITAS', 'MITCH', 'MITER', 'MITES', 'MITEY', 'MITIE', 'MITIS', 'MITRE', 'MITRY', 'MITTA', 'MITTS', 'MIVEY', 'MIVVY', 'MIXED', 'MIXEN', 'MIXER', 'MIXES', 'MIXIE', 'MIXIS', 'MIXTE', 'MIXUP', 'MIYAS', 'MIZEN', 'MIZES', 'MIZZY', 'MMKAY', 'MNEME', 'MOAIS', 'MOAKY', 'MOALS', 'MOANA', 'MOANS', 'MOANY', 'MOARS', 'MOATS', 'MOBBY', 'MOBED', 'MOBEE', 'MOBES', 'MOBEY', 'MOBIE', 'MOBLE', 'MOBOS', 'MOCAP', 'MOCHA', 'MOCHI', 'MOCHS', 'MOCHY', 'MOCKS', 'MOCKY', 'MOCOS', 'MOCUS', 'MODAL', 'MODEL', 'MODEM', 'MODER', 'MODES', 'MODGE', 'MODII', 'MODIN', 'MODOC', 'MODOM', 'MODUS', 'MOENI', 'MOERS', 'MOFOS', 'MOGAR', 'MOGAS', 'MOGGY', 'MOGOS', 'MOGRA', 'MOGUE', 'MOGUL', 'MOHAR', 'MOHEL', 'MOHOS', 'MOHRS', 'MOHUA', 'MOHUR', 'MOILE', 'MOILS', 'MOIRA', 'MOIRE', 'MOIST', 'MOITS', 'MOITY', 'MOJOS', 'MOKER', 'MOKES', 'MOKEY', 'MOKIS', 'MOKKY', 'MOKOS', 'MOKUS', 'MOLAL', 'MOLAR', 'MOLAS', 'MOLDS', 'MOLDY', 'MOLED', 'MOLER', 'MOLES', 'MOLEY', 'MOLIE', 'MOLLA', 'MOLLE', 'MOLLO', 'MOLLS', 'MOLLY', 'MOLOI', 'MOLOS', 'MOLTO', 'MOLTS', 'MOLUE', 'MOLVI', 'MOLYS', 'MOMES', 'MOMIE', 'MOMMA', 'MOMME', 'MOMMY', 'MOMOS', 'MOMPE', 'MOMUS', 'MONAD', 'MONAL', 'MONAS', 'MONDE', 'MONDO', 'MONER', 'MONEY', 'MONGO', 'MONGS', 'MONIC', 'MONIE', 'MONKS', 'MONOS', 'MONPE', 'MONTE', 'MONTH', 'MONTY', 'MOOBS', 'MOOCH', 'MOODS', 'MOODY', 'MOOED', 'MOOEY', 'MOOKS', 'MOOLA', 'MOOLI', 'MOOLS', 'MOOLY', 'MOONG', 'MOONI', 'MOONS', 'MOONY', 'MOOPS', 'MOORS', 'MOORY', 'MOOSE', 'MOOTH', 'MOOTS', 'MOOVE', 'MOPED', 'MOPER', 'MOPES', 'MOPEY', 'MOPPY', 'MOPSY', 'MOPUS', 'MORAE', 'MORAH', 'MORAL', 'MORAN', 'MORAS', 'MORAT', 'MORAY', 'MOREE', 'MOREL', 'MORES', 'MORGY', 'MORIA', 'MORIN', 'MORMO', 'MORNA', 'MORNE', 'MORNS', 'MORON', 'MOROR', 'MORPH', 'MORRA', 'MORRO', 'MORSE', 'MORTS', 'MORUK', 'MOSED', 'MOSES', 'MOSEY', 'MOSKS', 'MOSSO', 'MOSSY', 'MOSTE', 'MOSTO', 'MOSTS', 'MOTED', 'MOTEL', 'MOTEN', 'MOTES', 'MOTET', 'MOTEY', 'MOTHS', 'MOTHY', 'MOTIF', 'MOTIS', 'MOTON', 'MOTOR', 'MOTTE', 'MOTTO', 'MOTTS', 'MOTTY', 'MOTUS', 'MOTZA', 'MOUCH', 'MOUES', 'MOUFS', 'MOULD', 'MOULE', 'MOULS', 'MOULT', 'MOULY', 'MOUND', 'MOUNT', 'MOUPS', 'MOURN', 'MOUSE', 'MOUST', 'MOUSY', 'MOUTH', 'MOVED', 'MOVER', 'MOVES', 'MOVIE', 'MOWAS', 'MOWED', 'MOWER', 'MOWIE', 'MOWRA', 'MOXAS', 'MOXIE', 'MOYAS', 'MOYLE', 'MOYLS', 'MOZED', 'MOZES', 'MOZOS', 'MPRET', 'MRADS', 'MSASA', 'MTEPE', 'MUCHO', 'MUCIC', 'MUCID', 'MUCIN', 'MUCKO', 'MUCKS', 'MUCKY', 'MUCOR', 'MUCRO', 'MUCUS', 'MUDAR', 'MUDDY', 'MUDGE', 'MUDIF', 'MUDIM', 'MUDIR', 'MUDRA', 'MUFFS', 'MUFFY', 'MUFTI', 'MUGGA', 'MUGGS', 'MUGGY', 'MUGHO', 'MUGIL', 'MUGOS', 'MUHLY', 'MUIDS', 'MUILS', 'MUIRS', 'MUIRY', 'MUIST', 'MUJIK', 'MUKIM', 'MUKTI', 'MULAI', 'MULCH', 'MULCT', 'MULED', 'MULES', 'MULEY', 'MULGA', 'MULIE', 'MULLA', 'MULLS', 'MULSE', 'MULSH', 'MUMBO', 'MUMMS', 'MUMMY', 'MUMPH', 'MUMPS', 'MUMSY', 'MUMUS', 'MUNCH', 'MUNDS', 'MUNDU', 'MUNGA', 'MUNGE', 'MUNGI', 'MUNGO', 'MUNGS', 'MUNGY', 'MUNIA', 'MUNIS', 'MUNJA', 'MUNJS', 'MUNTS', 'MUNTU', 'MUONS', 'MURAL', 'MURAS', 'MURED', 'MURES', 'MUREX', 'MURGH', 'MURGI', 'MURID', 'MURKS', 'MURKY', 'MURLS', 'MURLY', 'MURRA', 'MURRE', 'MURRI', 'MURRS', 'MURRY', 'MURTH', 'MURTI', 'MURUK', 'MURVA', 'MUSAR', 'MUSCA', 'MUSED', 'MUSEE', 'MUSER', 'MUSES', 'MUSET', 'MUSHA', 'MUSHY', 'MUSIC', 'MUSIT', 'MUSKS', 'MUSKY', 'MUSOS', 'MUSSE', 'MUSSY', 'MUSTA', 'MUSTH', 'MUSTS', 'MUSTY', 'MUTAS', 'MUTCH', 'MUTED', 'MUTER', 'MUTES', 'MUTHA', 'MUTIC', 'MUTIS', 'MUTON', 'MUTTI', 'MUTTS', 'MUTUM', 'MUVVA', 'MUXED', 'MUXES', 'MUZAK', 'MUZZY', 'MVULA', 'MVULE', 'MVULI', 'MYALL', 'MYALS', 'MYLAR', 'MYNAH', 'MYNAS', 'MYOID', 'MYOMA', 'MYONS', 'MYOPE', 'MYOPS', 'MYOPY', 'MYRRH', 'MYSID', 'MYSIE', 'MYTHI', 'MYTHS', 'MYTHY', 'MYXOS', 'MZEES', 'NAAMS', 'NAANS', 'NAATS', 'NABAM', 'NABBY', 'NABES', 'NABIS', 'NABKS', 'NABLA', 'NABOB', 'NACHE', 'NACHO', 'NACRE', 'NADAS', 'NADIR', 'NAEVE', 'NAEVI', 'NAFFS', 'NAGAR', 'NAGAS', 'NAGES', 'NAGGY', 'NAGOR', 'NAHAL', 'NAIAD', 'NAIBS', 'NAICE', 'NAIDS', 'NAIEO', 'NAIFS', 'NAIKS', 'NAILS', 'NAILY', 'NAINS', 'NAIOS', 'NAIRA', 'NAIRU', 'NAIVE', 'NAJIB', 'NAKAS', 'NAKED', 'NAKER', 'NAKFA', 'NALAS', 'NALED', 'NALLA', 'NAMAD', 'NAMAK', 'NAMAZ', 'NAMED', 'NAMER', 'NAMES', 'NAMMA', 'NAMUS', 'NANAS', 'NANCE', 'NANCY', 'NANDU', 'NANNA', 'NANNY', 'NANOS', 'NANTE', 'NANTI', 'NANTO', 'NANTS', 'NANTY', 'NANUA', 'NAPAS', 'NAPED', 'NAPES', 'NAPOH', 'NAPOO', 'NAPPA', 'NAPPE', 'NAPPY', 'NARAS', 'NARCO', 'NARCS', 'NARDS', 'NARES', 'NARIC', 'NARIS', 'NARKS', 'NARKY', 'NAROD', 'NARRA', 'NARRE', 'NASAL', 'NASHI', 'NASHO', 'NASIS', 'NASON', 'NASTY', 'NASUS', 'NATAK', 'NATAL', 'NATCH', 'NATES', 'NATIS', 'NATTO', 'NATTY', 'NATYA', 'NAUCH', 'NAUNT', 'NAVAL', 'NAVAR', 'NAVED', 'NAVEL', 'NAVES', 'NAVEW', 'NAVVY', 'NAWAB', 'NAWAL', 'NAZAR', 'NAZES', 'NAZIR', 'NAZIS', 'NAZZY', 'NDUJA', 'NEAFE', 'NEALS', 'NEANT', 'NEAPS', 'NEARS', 'NEATH', 'NEATO', 'NEATS', 'NEBBY', 'NEBEK', 'NEBEL', 'NECHE', 'NECKS', 'NEDDY', 'NEEBS', 'NEEDS', 'NEEDY', 'NEEFS', 'NEELD', 'NEELE', 'NEEMB', 'NEEMS', 'NEEPS', 'NEESE', 'NEEZE', 'NEFIE', 'NEGRI', 'NEGRO', 'NEGUS', 'NEIFS', 'NEIGH', 'NEIST', 'NEIVE', 'NELIA', 'NELIS', 'NELLY', 'NEMAS', 'NEMIC', 'NEMNS', 'NEMPT', 'NENES', 'NENTA', 'NEONS', 'NEOSA', 'NEOZA', 'NEPER', 'NEPIT', 'NERAL', 'NERAM', 'NERDS', 'NERDY', 'NERFS', 'NERKA', 'NERKS', 'NEROL', 'NERTS', 'NERTZ', 'NERVE', 'NERVY', 'NESKI', 'NESTS', 'NESTY', 'NETAS', 'NETES', 'NETOP', 'NETTA', 'NETTS', 'NETTY', 'NEUKS', 'NEUME', 'NEUMS', 'NEVEL', 'NEVER', 'NEVES', 'NEVIS', 'NEVUS', 'NEVVY', 'NEWBS', 'NEWED', 'NEWEL', 'NEWER', 'NEWIE', 'NEWLY', 'NEWSY', 'NEWTS', 'NEXAL', 'NEXIN', 'NEXTS', 'NEXUM', 'NEXUS', 'NGAIO', 'NGAKA', 'NGANA', 'NGAPI', 'NGATI', 'NGEGE', 'NGOMA', 'NGONI', 'NGRAM', 'NGWEE', 'NIBBY', 'NICAD', 'NICED', 'NICER', 'NICEY', 'NICHE', 'NICHT', 'NICKS', 'NICKY', 'NICOL', 'NIDAL', 'NIDED', 'NIDES', 'NIDOR', 'NIDUS', 'NIECE', 'NIEFS', 'NIESS', 'NIEVE', 'NIFES', 'NIFFS', 'NIFFY', 'NIFLE', 'NIFTY', 'NIGER', 'NIGGA', 'NIGHS', 'NIGHT', 'NIGRE', 'NIGUA', 'NIHIL', 'NIKAB', 'NIKAH', 'NIKAU', 'NILAS', 'NILLS', 'NIMBI', 'NIMBS', 'NIMBY', 'NIMPS', 'NINER', 'NINES', 'NINJA', 'NINNY', 'NINON', 'NINTA', 'NINTH', 'NIOPO', 'NIOZA', 'NIPAS', 'NIPET', 'NIPPY', 'NIQAB', 'NIRLS', 'NIRLY', 'NISEI', 'NISIN', 'NISSE', 'NISUS', 'NITAL', 'NITER', 'NITES', 'NITID', 'NITON', 'NITRE', 'NITRO', 'NITRY', 'NITTA', 'NITTO', 'NITTY', 'NIVAL', 'NIVAS', 'NIVEL', 'NIXED', 'NIXER', 'NIXES', 'NIXIE', 'NIZAM', 'NJIRL', 'NKOSI', 'NMOLI', 'NMOLS', 'NOAHS', 'NOBBY', 'NOBLE', 'NOBLY', 'NOCKS', 'NODAL', 'NODDY', 'NODED', 'NODES', 'NODUM', 'NODUS', 'NOELS', 'NOEMA', 'NOEME', 'NOGAL', 'NOGGS', 'NOGGY', 'NOHOW', 'NOIAS', 'NOILS', 'NOILY', 'NOINT', 'NOIRE', 'NOIRS', 'NOISE', 'NOISY', 'NOKES', 'NOLES', 'NOLLE', 'NOLLS', 'NOLOS', 'NOMAD', 'NOMAS', 'NOMEN', 'NOMES', 'NOMIC', 'NOMOI', 'NOMOS', 'NONAN', 'NONAS', 'NONCE', 'NONCY', 'NONDA', 'NONDO', 'NONES', 'NONET', 'NONGS', 'NONIC', 'NONIS', 'NONNA', 'NONNO', 'NONNY', 'NONYL', 'NOOBS', 'NOOIS', 'NOOIT', 'NOOKS', 'NOOKY', 'NOONE', 'NOONS', 'NOOPS', 'NOOSE', 'NOOVE', 'NOPAL', 'NORIA', 'NORIE', 'NORIS', 'NORKS', 'NORMA', 'NORMS', 'NORTH', 'NOSED', 'NOSER', 'NOSES', 'NOSEY', 'NOSHI', 'NOSIR', 'NOTAL', 'NOTAM', 'NOTCH', 'NOTED', 'NOTER', 'NOTES', 'NOTUM', 'NOUGS', 'NOUJA', 'NOULD', 'NOULE', 'NOULS', 'NOUNS', 'NOUNY', 'NOUPS', 'NOUST', 'NOVAE', 'NOVAS', 'NOVEL', 'NOVIA', 'NOVIO', 'NOVUM', 'NOWAY', 'NOWDS', 'NOWED', 'NOWLS', 'NOWTS', 'NOWTY', 'NOXAL', 'NOXAS', 'NOXES', 'NOYAU', 'NOYED', 'NOYES', 'NRTTA', 'NRTYA', 'NSIMA', 'NUBBY', 'NUBIA', 'NUCHA', 'NUCIN', 'NUDDY', 'NUDER', 'NUDES', 'NUDGE', 'NUDGY', 'NUDIE', 'NUDZH', 'NUEVO', 'NUFFS', 'NUGAE', 'NUJOL', 'NUKED', 'NUKES', 'NULLA', 'NULLO', 'NULLS', 'NULLY', 'NUMBS', 'NUMEN', 'NUMMY', 'NUMPS', 'NUNKS', 'NUNKY', 'NUNNY', 'NUNUS', 'NUQUE', 'NURDS', 'NURDY', 'NURLS', 'NURRS', 'NURSE', 'NURTS', 'NURTZ', 'NUSED', 'NUSES', 'NUTSO', 'NUTSY', 'NUTTY', 'NYAFF', 'NYALA', 'NYAMS', 'NYING', 'NYLON', 'NYMPH', 'NYONG', 'NYSSA', 'NYUNG', 'NYUSE', 'NYUZE', 'OAFOS', 'OAKED', 'OAKEN', 'OAKER', 'OAKUM', 'OARED', 'OARER', 'OASAL', 'OASES', 'OASIS', 'OASTS', 'OATEN', 'OATER', 'OATHS', 'OAVES', 'OBANG', 'OBBOS', 'OBEAH', 'OBELI', 'OBESE', 'OBEYS', 'OBIAS', 'OBIED', 'OBIIT', 'OBITS', 'OBJET', 'OBOES', 'OBOLE', 'OBOLI', 'OBOLS', 'OCCAM', 'OCCUR', 'OCEAN', 'OCHER', 'OCHES', 'OCHRE', 'OCHRY', 'OCKER', 'OCOTE', 'OCREA', 'OCTAD', 'OCTAL', 'OCTAN', 'OCTAS', 'OCTET', 'OCTIC', 'OCTLI', 'OCTYL', 'OCULI', 'ODAHS', 'ODALS', 'ODDER', 'ODDLY', 'ODEON', 'ODEUM', 'ODISM', 'ODIST', 'ODIUM', 'ODOOM', 'ODORS', 'ODOUR', 'ODUMS', 'ODYLE', 'ODYLS', 'OFAYS', 'OFFAL', 'OFFED', 'OFFER', 'OFFIE', 'OFLAG', 'OFTEN', 'OFTER', 'OFURO', 'OGAMS', 'OGEED', 'OGEES', 'OGGIN', 'OGHAM', 'OGIVE', 'OGLED', 'OGLER', 'OGLES', 'OGMIC', 'OGRES', 'OHELO', 'OHIAS', 'OHING', 'OHMIC', 'OHONE', 'OICKS', 'OIDIA', 'OILED', 'OILER', 'OILET', 'OINKS', 'OINTS', 'OIRAN', 'OJIME', 'OKAPI', 'OKAYS', 'OKEHS', 'OKIES', 'OKING', 'OKOLE', 'OKRAS', 'OKRUG', 'OKTAS', 'OLATE', 'OLDEN', 'OLDER', 'OLDIE', 'OLDLY', 'OLEHS', 'OLEIC', 'OLEIN', 'OLENT', 'OLEOS', 'OLEUM', 'OLEYL', 'OLIGO', 'OLIOS', 'OLIVA', 'OLIVE', 'OLLAS', 'OLLAV', 'OLLER', 'OLLIE', 'OLOGY', 'OLONA', 'OLPAE', 'OLPES', 'OMASA', 'OMBER', 'OMBRE', 'OMBUS', 'OMDAH', 'OMDAS', 'OMDDA', 'OMDEH', 'OMEES', 'OMEGA', 'OMENS', 'OMERS', 'OMIAI', 'OMITS', 'OMLAH', 'OMMEL', 'OMMIN', 'OMNES', 'OMOVS', 'OMRAH', 'OMULS', 'ONCER', 'ONCES', 'ONCET', 'ONCUS', 'ONDES', 'ONDOL', 'ONELY', 'ONERS', 'ONERY', 'ONGON', 'ONION', 'ONIUM', 'ONKUS', 'ONLAP', 'ONLAY', 'ONMUN', 'ONNED', 'ONSEN', 'ONSET', 'ONTAL', 'ONTIC', 'OOAAS', 'OOBIT', 'OOHED', 'OOIDS', 'OOJAH', 'OOMPH', 'OONTS', 'OOPAK', 'OOPED', 'OOPSY', 'OORIE', 'OOSES', 'OOTID', 'OOYAH', 'OOZED', 'OOZES', 'OOZIE', 'OOZLE', 'OPAHS', 'OPALS', 'OPENS', 'OPEPE', 'OPERA', 'OPERY', 'OPGAF', 'OPIHI', 'OPINE', 'OPING', 'OPIUM', 'OPPOS', 'OPSAT', 'OPSIN', 'OPSIT', 'OPTED', 'OPTER', 'OPTIC', 'OPZIT', 'ORACH', 'ORACY', 'ORALS', 'ORANG', 'ORANS', 'ORANT', 'ORATE', 'ORBAT', 'ORBED', 'ORBIC', 'ORBIT', 'ORCAS', 'ORCIN', 'ORDER', 'ORDIE', 'ORDOS', 'OREAD', 'ORFES', 'ORFUL', 'ORGAN', 'ORGIA', 'ORGIC', 'ORGUE', 'ORIBI', 'ORIEL', 'ORIGO', 'ORIXA', 'ORLES', 'ORLON', 'ORLOP', 'ORMER', 'ORNEE', 'ORNIS', 'ORPED', 'ORPIN', 'ORRIS', 'ORTET', 'ORTHO', 'ORVAL', 'ORZOS', 'OSARS', 'OSCAR', 'OSETR', 'OSEYS', 'OSHAC', 'OSIER', 'OSKIN', 'OSLIN', 'OSMIC', 'OSMOL', 'OSONE', 'OSSIA', 'OSTIA', 'OTAKU', 'OTARY', 'OTHER', 'OTHYL', 'OTIUM', 'OTTAR', 'OTTER', 'OTTOS', 'OUBIT', 'OUCHE', 'OUCHT', 'OUEDS', 'OUENS', 'OUGHT', 'OUIJA', 'OULKS', 'OUMAS', 'OUNCE', 'OUNDY', 'OUPAS', 'OUPED', 'OUPHE', 'OUPHS', 'OUREY', 'OURIE', 'OUSEL', 'OUSIA', 'OUSTS', 'OUTBY', 'OUTDO', 'OUTED', 'OUTEN', 'OUTER', 'OUTGO', 'OUTIE', 'OUTRE', 'OUTRO', 'OUTTA', 'OUZEL', 'OUZOS', 'OVALS', 'OVARY', 'OVATE', 'OVELS', 'OVENS', 'OVERS', 'OVERT', 'OVINE', 'OVISM', 'OVIST', 'OVOID', 'OVOLI', 'OVOLO', 'OVULE', 'OWARE', 'OWARI', 'OWCHE', 'OWERS', 'OWIES', 'OWING', 'OWLED', 'OWLER', 'OWLET', 'OWNED', 'OWNER', 'OWNIO', 'OWRES', 'OWRIE', 'OWSEN', 'OXBOW', 'OXEAS', 'OXERS', 'OXEYE', 'OXIDE', 'OXIDS', 'OXIES', 'OXIME', 'OXIMS', 'OXINE', 'OXLIP', 'OXMAN', 'OXMEN', 'OXTER', 'OYAMA', 'OYERS', 'OZEKI', 'OZENA', 'OZONE', 'OZZIE', 'PAAHO', 'PAALS', 'PAANS', 'PACAI', 'PACAS', 'PACAY', 'PACED', 'PACER', 'PACES', 'PACEY', 'PACHA', 'PACKS', 'PACKY', 'PACOS', 'PACTA', 'PACTS', 'PADAM', 'PADAS', 'PADDO', 'PADDY', 'PADIS', 'PADLE', 'PADMA', 'PADOU', 'PADRE', 'PADRI', 'PAEAN', 'PAEDO', 'PAEON', 'PAGAN', 'PAGED', 'PAGER', 'PAGES', 'PAGLE', 'PAGNE', 'PAGOD', 'PAGRI', 'PAHIT', 'PAHOS', 'PAHUS', 'PAIKS', 'PAILS', 'PAINS', 'PAINT', 'PAIPE', 'PAIPS', 'PAIRE', 'PAIRS', 'PAISA', 'PAISE', 'PAKAY', 'PAKKA', 'PAKKI', 'PAKUA', 'PAKUL', 'PALAK', 'PALAR', 'PALAS', 'PALAY', 'PALEA', 'PALED', 'PALER', 'PALES', 'PALET', 'PALIS', 'PALKI', 'PALLA', 'PALLS', 'PALLU', 'PALLY', 'PALMS', 'PALMY', 'PALPI', 'PALPS', 'PALSA', 'PALSY', 'PALUS', 'PAMBY', 'PAMPA', 'PANAX', 'PANCE', 'PANCH', 'PANDA', 'PANDS', 'PANDY', 'PANED', 'PANEL', 'PANES', 'PANGA', 'PANGS', 'PANIC', 'PANIM', 'PANIR', 'PANKO', 'PANKS', 'PANNA', 'PANNE', 'PANNI', 'PANNY', 'PANSY', 'PANTO', 'PANTS', 'PANTY', 'PAOLI', 'PAOLO', 'PAPAD', 'PAPAL', 'PAPAS', 'PAPAW', 'PAPER', 'PAPES', 'PAPEY', 'PAPPI', 'PAPPY', 'PAPRI', 'PARAE', 'PARAS', 'PARCH', 'PARCS', 'PARDI', 'PARDS', 'PARDY', 'PARED', 'PAREN', 'PAREO', 'PARER', 'PARES', 'PAREU', 'PAREV', 'PARGE', 'PARGO', 'PARID', 'PARIS', 'PARKA', 'PARKI', 'PARKS', 'PARKY', 'PARLE', 'PARLY', 'PARMA', 'PARMO', 'PARMS', 'PAROL', 'PARPS', 'PARRA', 'PARRS', 'PARRY', 'PARSE', 'PARTE', 'PARTI', 'PARTS', 'PARTY', 'PARVE', 'PARVO', 'PASAG', 'PASAR', 'PASCH', 'PASEO', 'PASES', 'PASHA', 'PASHM', 'PASKA', 'PASMO', 'PASPY', 'PASSE', 'PASSU', 'PASTA', 'PASTE', 'PASTS', 'PASTY', 'PATAS', 'PATCH', 'PATED', 'PATEE', 'PATEL', 'PATEN', 'PATER', 'PATES', 'PATHS', 'PATIA', 'PATIN', 'PATIO', 'PATKA', 'PATLY', 'PATSY', 'PATTA', 'PATTE', 'PATTU', 'PATTY', 'PATUS', 'PAUAS', 'PAULS', 'PAUSE', 'PAUXI', 'PAVAN', 'PAVAS', 'PAVED', 'PAVEN', 'PAVER', 'PAVES', 'PAVID', 'PAVIE', 'PAVIN', 'PAVIS', 'PAVON', 'PAVVY', 'PAWAS', 'PAWAW', 'PAWED', 'PAWER', 'PAWKS', 'PAWKY', 'PAWLS', 'PAWNS', 'PAXES', 'PAYED', 'PAYEE', 'PAYER', 'PAYOR', 'PAYSD', 'PEACE', 'PEACH', 'PEAGE', 'PEAGS', 'PEAKE', 'PEAKS', 'PEAKY', 'PEALS', 'PEANS', 'PEARE', 'PEARL', 'PEARS', 'PEART', 'PEASE', 'PEASY', 'PEATS', 'PEATY', 'PEAVY', 'PEAZE', 'PEBAS', 'PECAN', 'PECHS', 'PECIA', 'PECKE', 'PECKS', 'PECKY', 'PECTS', 'PEDAL', 'PEDES', 'PEDIS', 'PEDON', 'PEDOS', 'PEDRO', 'PEECE', 'PEEKS', 'PEEKY', 'PEELS', 'PEELY', 'PEENS', 'PEENT', 'PEEOY', 'PEEPE', 'PEEPS', 'PEEPY', 'PEERS', 'PEERY', 'PEEVE', 'PEEVO', 'PEGGY', 'PEGHS', 'PEGMA', 'PEGOS', 'PEINE', 'PEINS', 'PEISE', 'PEISY', 'PEIZE', 'PEKAN', 'PEKAU', 'PEKEA', 'PEKES', 'PEKID', 'PEKIN', 'PEKOE', 'PELAS', 'PELAU', 'PELCH', 'PELES', 'PELFS', 'PELLS', 'PELMA', 'PELOG', 'PELON', 'PELSH', 'PELTA', 'PELTS', 'PELUS', 'PENAL', 'PENCE', 'PENDS', 'PENDU', 'PENED', 'PENES', 'PENGO', 'PENIE', 'PENIS', 'PENKS', 'PENNA', 'PENNE', 'PENNI', 'PENNY', 'PENSE', 'PENSY', 'PENTS', 'PEOLA', 'PEONS', 'PEONY', 'PEPLA', 'PEPLE', 'PEPON', 'PEPOS', 'PEPPY', 'PEPSI', 'PEQUI', 'PERAE', 'PERAI', 'PERCE', 'PERCH', 'PERCS', 'PERDU', 'PERDY', 'PEREA', 'PERES', 'PERFS', 'PERIL', 'PERIS', 'PERKS', 'PERKY', 'PERLE', 'PERLS', 'PERMS', 'PERMY', 'PERNE', 'PERNS', 'PEROG', 'PERPS', 'PERRY', 'PERSE', 'PERSP', 'PERST', 'PERTS', 'PERVE', 'PERVO', 'PERVS', 'PERVY', 'PESCH', 'PESKY', 'PESOS', 'PESTA', 'PESTO', 'PESTS', 'PESTY', 'PETAL', 'PETAR', 'PETER', 'PETIT', 'PETOS', 'PETRE', 'PETRI', 'PETTI', 'PETTO', 'PETTY', 'PEWED', 'PEWEE', 'PEWIT', 'PEYSE', 'PFFTT', 'PHAGE', 'PHANG', 'PHARE', 'PHARM', 'PHASE', 'PHASM', 'PHEER', 'PHEME', 'PHENE', 'PHEON', 'PHESE', 'PHIAL', 'PHIES', 'PHISH', 'PHIZZ', 'PHLOX', 'PHOBE', 'PHOCA', 'PHONE', 'PHONO', 'PHONS', 'PHONY', 'PHOOH', 'PHOOO', 'PHOTA', 'PHOTO', 'PHOTS', 'PHOTY', 'PHPHT', 'PHUBS', 'PHUTS', 'PHUTU', 'PHWAT', 'PHYLA', 'PHYLE', 'PHYMA', 'PHYNX', 'PHYSA', 'PIAIS', 'PIANI', 'PIANO', 'PIANS', 'PIBAL', 'PICAL', 'PICAS', 'PICCY', 'PICEY', 'PICHI', 'PICKS', 'PICKY', 'PICON', 'PICOT', 'PICRA', 'PICUL', 'PIECE', 'PIEDS', 'PIEND', 'PIERS', 'PIERT', 'PIETA', 'PIETS', 'PIETY', 'PIEZO', 'PIGGY', 'PIGHT', 'PIGLY', 'PIGMY', 'PIING', 'PIKAS', 'PIKAU', 'PIKED', 'PIKEL', 'PIKER', 'PIKES', 'PIKEY', 'PIKIS', 'PIKUL', 'PILAE', 'PILAF', 'PILAO', 'PILAR', 'PILAU', 'PILAW', 'PILCH', 'PILEA', 'PILED', 'PILEI', 'PILER', 'PILES', 'PILEY', 'PILIN', 'PILIS', 'PILLS', 'PILON', 'PILOT', 'PILOW', 'PILUM', 'PILUS', 'PIMAS', 'PIMPS', 'PINAS', 'PINAX', 'PINCE', 'PINCH', 'PINDA', 'PINDS', 'PINED', 'PINER', 'PINES', 'PINEY', 'PINGA', 'PINGE', 'PINGO', 'PINGS', 'PINKO', 'PINKS', 'PINKY', 'PINNA', 'PINNY', 'PINOL', 'PINON', 'PINOT', 'PINTA', 'PINTO', 'PINTS', 'PINUP', 'PIONS', 'PIONY', 'PIOUS', 'PIOYE', 'PIOYS', 'PIPAL', 'PIPAS', 'PIPED', 'PIPER', 'PIPES', 'PIPET', 'PIPID', 'PIPIS', 'PIPIT', 'PIPPY', 'PIPUL', 'PIQUE', 'PIQUI', 'PIRAI', 'PIRKS', 'PIRLS', 'PIRNS', 'PIROG', 'PIRRE', 'PIRRI', 'PIRRS', 'PISCO', 'PISES', 'PISKY', 'PISOS', 'PISSY', 'PISTE', 'PITAS', 'PITCH', 'PITHS', 'PITHY', 'PITON', 'PITOT', 'PITSO', 'PITSU', 'PITTA', 'PITTU', 'PIUMA', 'PIUMS', 'PIVOS', 'PIVOT', 'PIXEL', 'PIXES', 'PIXIE', 'PIYUT', 'PIZED', 'PIZER', 'PIZES', 'PIZZA', 'PLAAS', 'PLACE', 'PLACK', 'PLAGA', 'PLAGE', 'PLAID', 'PLAIG', 'PLAIN', 'PLAIT', 'PLANC', 'PLANE', 'PLANH', 'PLANK', 'PLANS', 'PLANT', 'PLAPS', 'PLASH', 'PLASM', 'PLAST', 'PLATE', 'PLATS', 'PLATT', 'PLATY', 'PLAUD', 'PLAUR', 'PLAVS', 'PLAYA', 'PLAYS', 'PLAZA', 'PLEAD', 'PLEAS', 'PLEAT', 'PLEBE', 'PLEBS', 'PLECK', 'PLEEP', 'PLEIN', 'PLENA', 'PLENE', 'PLENO', 'PLEON', 'PLESH', 'PLETS', 'PLEWS', 'PLEXI', 'PLICA', 'PLIED', 'PLIER', 'PLIES', 'PLIGS', 'PLIMS', 'PLING', 'PLINK', 'PLIPS', 'PLISH', 'PLOAT', 'PLOCE', 'PLOCK', 'PLODS', 'PLOIT', 'PLOMB', 'PLONG', 'PLONK', 'PLOOK', 'PLOOT', 'PLOPS', 'PLORE', 'PLOTS', 'PLOTZ', 'PLOUK', 'PLOUT', 'PLOWS', 'PLOWT', 'PLOYE', 'PLOYS', 'PLUCK', 'PLUDS', 'PLUES', 'PLUFF', 'PLUGS', 'PLUKE', 'PLUMB', 'PLUME', 'PLUMP', 'PLUMS', 'PLUMY', 'PLUNG', 'PLUNK', 'PLUOT', 'PLUPS', 'PLUSH', 'PLUTE', 'PLUTO', 'PLUTY', 'PLYER', 'PNEUS', 'POACH', 'POAKA', 'POAKE', 'POALO', 'POBBY', 'POBOY', 'POCAN', 'POCHE', 'POCHO', 'POCKS', 'POCKY', 'PODAL', 'PODDY', 'PODEX', 'PODGE', 'PODGY', 'PODIA', 'PODOS', 'PODUS', 'POEMS', 'POENA', 'POEPS', 'POESY', 'POETE', 'POETS', 'POGEY', 'POGGE', 'POGGY', 'POGOS', 'POGUE', 'POHED', 'POILU', 'POIND', 'POINT', 'POIRE', 'POISE', 'POKAL', 'POKED', 'POKER', 'POKES', 'POKEY', 'POKIE', 'POKIT', 'POLAR', 'POLED', 'POLER', 'POLES', 'POLEY', 'POLIO', 'POLIS', 'POLJE', 'POLKA', 'POLKS', 'POLLO', 'POLLS', 'POLLY', 'POLOS', 'POLTS', 'POLYP', 'POLYS', 'POMAS', 'POMBE', 'POMES', 'POMME', 'POMMY', 'POMOS', 'POMPA', 'POMPS', 'PONCE', 'PONCY', 'PONDS', 'PONDY', 'PONES', 'PONEY', 'PONGA', 'PONGO', 'PONGS', 'PONGY', 'PONKS', 'PONOR', 'PONTO', 'PONTS', 'PONTY', 'PONZU', 'POOAY', 'POOCH', 'POODS', 'POOED', 'POOEY', 'POOFS', 'POOFY', 'POOHS', 'POOHY', 'POOJA', 'POOKA', 'POOKS', 'POOLS', 'POOLY', 'POONS', 'POOPA', 'POOPS', 'POOPY', 'POORI', 'POORT', 'POOTS', 'POOTY', 'POOVE', 'POOVY', 'POPES', 'POPIA', 'POPOS', 'POPPA', 'POPPY', 'POPSY', 'POPUP', 'PORAE', 'PORAL', 'PORCH', 'PORED', 'PORER', 'PORES', 'POREY', 'PORGE', 'PORGY', 'PORIN', 'PORKS', 'PORKY', 'PORNO', 'PORNS', 'PORNY', 'PORTA', 'PORTE', 'PORTH', 'PORTS', 'PORTY', 'PORUS', 'POSCA', 'POSED', 'POSER', 'POSES', 'POSET', 'POSEY', 'POSHO', 'POSIT', 'POSOL', 'POSSE', 'POSTE', 'POSTS', 'POTAE', 'POTAI', 'POTCH', 'POTED', 'POTES', 'POTIN', 'POTOO', 'POTRO', 'POTSY', 'POTTO', 'POTTS', 'POTTY', 'POUCE', 'POUCH', 'POUFF', 'POUFS', 'POUFY', 'POUIS', 'POUKE', 'POUKS', 'POULE', 'POULP', 'POULT', 'POUND', 'POUPE', 'POUPT', 'POURS', 'POUSY', 'POUTS', 'POUTY', 'POVOS', 'POWAN', 'POWER', 'POWIE', 'POWIN', 'POWIS', 'POWLT', 'POWND', 'POWNS', 'POWNY', 'POWRE', 'POWSY', 'POXED', 'POXES', 'POYAS', 'POYNT', 'POYOU', 'POYSE', 'POZZY', 'PRAAM', 'PRADS', 'PRAGS', 'PRAHU', 'PRAMS', 'PRANA', 'PRANG', 'PRANK', 'PRAOS', 'PRAPS', 'PRASE', 'PRATE', 'PRATS', 'PRATT', 'PRATY', 'PRAUS', 'PRAWN', 'PRAYS', 'PREAK', 'PREDY', 'PREED', 'PREEM', 'PREEN', 'PREES', 'PREIF', 'PREKE', 'PREMS', 'PREMY', 'PRENT', 'PREON', 'PREOP', 'PREPS', 'PRESA', 'PRESE', 'PRESS', 'PREST', 'PRETA', 'PREUX', 'PREVE', 'PREXY', 'PREYS', 'PRIAL', 'PRIAN', 'PRICE', 'PRICK', 'PRICY', 'PRIDE', 'PRIDY', 'PRIED', 'PRIEF', 'PRIER', 'PRIES', 'PRIGS', 'PRILL', 'PRIMA', 'PRIME', 'PRIMI', 'PRIMO', 'PRIMP', 'PRIMS', 'PRIMY', 'PRING', 'PRINK', 'PRINT', 'PRION', 'PRIOR', 'PRISE', 'PRISM', 'PRISS', 'PRIUS', 'PRIVY', 'PRIZE', 'PROAL', 'PROAS', 'PROBE', 'PROBS', 'PROBY', 'PRODD', 'PRODS', 'PROEM', 'PROFS', 'PROGS', 'PROIN', 'PROKE', 'PROLE', 'PROLL', 'PROMO', 'PROMS', 'PRONE', 'PRONG', 'PRONK', 'PROOF', 'PROOK', 'PROOT', 'PROPS', 'PRORA', 'PRORE', 'PROSE', 'PROSO', 'PROSS', 'PROST', 'PROSY', 'PROTO', 'PROUD', 'PROUL', 'PROVE', 'PROWK', 'PROWL', 'PROWS', 'PROXY', 'PROYN', 'PRUDE', 'PRUNE', 'PRUNO', 'PRUNT', 'PRUNY', 'PRUTA', 'PRYAN', 'PRYER', 'PRYSE', 'PSALM', 'PSEUD', 'PSHAW', 'PSHUT', 'PSIAS', 'PSION', 'PSOAE', 'PSOAI', 'PSOAS', 'PSORA', 'PSYCH', 'PSYOP', 'PTISH', 'PTYPE', 'PUBBY', 'PUBCO', 'PUBES', 'PUBIC', 'PUBIS', 'PUBSY', 'PUCAN', 'PUCER', 'PUCES', 'PUCKA', 'PUCKS', 'PUDDY', 'PUDGE', 'PUDGY', 'PUDIC', 'PUDOR', 'PUDSY', 'PUDUS', 'PUERS', 'PUFFA', 'PUFFS', 'PUFFY', 'PUGGY', 'PUGIL', 'PUHAS', 'PUJAH', 'PUJAS', 'PUKAS', 'PUKED', 'PUKER', 'PUKES', 'PUKEY', 'PUKKA', 'PUKUS', 'PULAO', 'PULAS', 'PULED', 'PULER', 'PULES', 'PULIK', 'PULIS', 'PULKA', 'PULKS', 'PULLI', 'PULLS', 'PULLY', 'PULMO', 'PULPS', 'PULPY', 'PULSE', 'PULUS', 'PULUT', 'PUMAS', 'PUMIE', 'PUMPS', 'PUMPY', 'PUNAS', 'PUNCE', 'PUNCH', 'PUNGA', 'PUNGI', 'PUNGO', 'PUNGS', 'PUNGY', 'PUNIM', 'PUNJI', 'PUNKA', 'PUNKS', 'PUNKY', 'PUNNY', 'PUNTO', 'PUNTS', 'PUNTY', 'PUPAE', 'PUPAL', 'PUPAS', 'PUPIL', 'PUPPA', 'PUPPY', 'PUPUS', 'PURAO', 'PURAU', 'PURDA', 'PURDY', 'PURED', 'PUREE', 'PURER', 'PURES', 'PURGA', 'PURGE', 'PURIN', 'PURIS', 'PURLS', 'PUROS', 'PURPS', 'PURPY', 'PURRE', 'PURRS', 'PURRY', 'PURSE', 'PURSY', 'PURTY', 'PUSES', 'PUSHY', 'PUSLE', 'PUSSY', 'PUTAS', 'PUTER', 'PUTID', 'PUTIN', 'PUTON', 'PUTOS', 'PUTTI', 'PUTTO', 'PUTTS', 'PUTTU', 'PUTTY', 'PUTZA', 'PUUKO', 'PUYAS', 'PUZEL', 'PUZTA', 'PWNED', 'PYATS', 'PYETS', 'PYGAL', 'PYGMY', 'PYINS', 'PYLON', 'PYNED', 'PYNES', 'PYOID', 'PYOTS', 'PYRAL', 'PYRAN', 'PYRES', 'PYREX', 'PYRIC', 'PYROS', 'PYRUS', 'PYUFF', 'PYXED', 'PYXES', 'PYXIE', 'PYXIS', 'PZAZZ', 'QADIS', 'QAIDS', 'QAJAQ', 'QANAT', 'QAPIK', 'QIBLA', 'QILAS', 'QIPAO', 'QOPHS', 'QORMA', 'QUABS', 'QUACK', 'QUADS', 'QUAFF', 'QUAGS', 'QUAIL', 'QUAIR', 'QUAIS', 'QUAKE', 'QUAKY', 'QUALE', 'QUALM', 'QUALY', 'QUANK', 'QUANT', 'QUARE', 'QUARK', 'QUARL', 'QUART', 'QUASH', 'QUASI', 'QUASS', 'QUATE', 'QUATS', 'QUAWK', 'QUAWS', 'QUAYD', 'QUAYS', 'QUBIT', 'QUEAN', 'QUECK', 'QUEEK', 'QUEEM', 'QUEEN', 'QUEER', 'QUELL', 'QUEME', 'QUENA', 'QUERN', 'QUERY', 'QUESO', 'QUEST', 'QUETE', 'QUEUE', 'QUEYN', 'QUEYS', 'QUEYU', 'QUIBS', 'QUICH', 'QUICK', 'QUIDS', 'QUIES', 'QUIET', 'QUIFF', 'QUILA', 'QUILL', 'QUILT', 'QUIMS', 'QUINA', 'QUINE', 'QUINK', 'QUINO', 'QUINS', 'QUINT', 'QUIPO', 'QUIPS', 'QUIPU', 'QUIRE', 'QUIRK', 'QUIRL', 'QUIRT', 'QUIST', 'QUITE', 'QUITS', 'QUOAD', 'QUODS', 'QUOIF', 'QUOIN', 'QUOIS', 'QUOIT', 'QUOLL', 'QUONK', 'QUOPS', 'QUORK', 'QUORL', 'QUOTA', 'QUOTE', 'QUOTH', 'QUOUK', 'QUOYS', 'QURAN', 'QURSH', 'QUYTE', 'RAADS', 'RAAKE', 'RABAT', 'RABBI', 'RABIC', 'RABID', 'RABIS', 'RACED', 'RACER', 'RACES', 'RACHE', 'RACKS', 'RACON', 'RADAR', 'RADDI', 'RADDY', 'RADGE', 'RADGY', 'RADIF', 'RADII', 'RADIO', 'RADIX', 'RADON', 'RAFEE', 'RAFFS', 'RAFFY', 'RAFIK', 'RAFIQ', 'RAFTS', 'RAFTY', 'RAGAS', 'RAGDE', 'RAGED', 'RAGEE', 'RAGER', 'RAGES', 'RAGGA', 'RAGGS', 'RAGGY', 'RAGIS', 'RAGUS', 'RAHED', 'RAHUI', 'RAIAH', 'RAIAS', 'RAIDS', 'RAIKE', 'RAIKS', 'RAILE', 'RAILS', 'RAINE', 'RAINS', 'RAINY', 'RAIRD', 'RAISE', 'RAITA', 'RAITH', 'RAITS', 'RAJAH', 'RAJAS', 'RAJES', 'RAKED', 'RAKEE', 'RAKER', 'RAKES', 'RAKHI', 'RAKIA', 'RAKIS', 'RAKKI', 'RAKSI', 'RAKUS', 'RALES', 'RALLI', 'RALLY', 'RALPH', 'RAMAL', 'RAMEE', 'RAMEN', 'RAMES', 'RAMET', 'RAMIE', 'RAMIN', 'RAMIS', 'RAMMY', 'RAMON', 'RAMPS', 'RAMSE', 'RAMSH', 'RAMUS', 'RANAS', 'RANCE', 'RANCH', 'RANDO', 'RANDS', 'RANDY', 'RANED', 'RANEE', 'RANES', 'RANGA', 'RANGE', 'RANGI', 'RANGS', 'RANGY', 'RANID', 'RANIS', 'RANKE', 'RANKS', 'RANNS', 'RANNY', 'RANSE', 'RANTS', 'RANTY', 'RAPED', 'RAPEE', 'RAPER', 'RAPES', 'RAPHE', 'RAPID', 'RAPIN', 'RAPPE', 'RAPSO', 'RARED', 'RAREE', 'RARER', 'RARES', 'RARKS', 'RASAM', 'RASAS', 'RASED', 'RASER', 'RASES', 'RASPS', 'RASPY', 'RASSE', 'RASTA', 'RATAL', 'RATAN', 'RATAS', 'RATCH', 'RATED', 'RATEL', 'RATER', 'RATES', 'RATHA', 'RATHE', 'RATHS', 'RATIO', 'RATOO', 'RATOS', 'RATTI', 'RATTY', 'RATUS', 'RAULI', 'RAUNS', 'RAUPO', 'RAVED', 'RAVEL', 'RAVEN', 'RAVER', 'RAVES', 'RAVEY', 'RAVIN', 'RAWDY', 'RAWER', 'RAWIN', 'RAWKS', 'RAWLY', 'RAWNS', 'RAXED', 'RAXES', 'RAYAH', 'RAYAS', 'RAYED', 'RAYLE', 'RAYLS', 'RAYNE', 'RAYON', 'RAZAI', 'RAZED', 'RAZEE', 'RAZER', 'RAZES', 'RAZET', 'RAZOO', 'RAZOR', 'REACH', 'REACT', 'READD', 'READS', 'READY', 'REAIS', 'REAKS', 'REALM', 'REALO', 'REALS', 'REAME', 'REAMS', 'REAMY', 'REANS', 'REAPS', 'REARD', 'REARM', 'REARS', 'REAST', 'REATA', 'REATE', 'REAVE', 'REBAB', 'REBAR', 'REBBE', 'REBEC', 'REBEL', 'REBID', 'REBIT', 'REBOP', 'REBUD', 'REBUS', 'REBUT', 'REBUY', 'RECAL', 'RECAP', 'RECCE', 'RECCO', 'RECCY', 'RECEP', 'RECIT', 'RECKS', 'RECON', 'RECTA', 'RECTE', 'RECTI', 'RECTO', 'RECUE', 'RECUR', 'RECUT', 'REDAN', 'REDDS', 'REDDY', 'REDED', 'REDES', 'REDIA', 'REDID', 'REDIF', 'REDIG', 'REDIP', 'REDLY', 'REDON', 'REDOS', 'REDOX', 'REDRY', 'REDUB', 'REDUG', 'REDUX', 'REDYE', 'REEAF', 'REECH', 'REEDE', 'REEDS', 'REEDY', 'REEFS', 'REEFY', 'REEKS', 'REEKY', 'REELS', 'REELY', 'REEMS', 'REENS', 'REERD', 'REEST', 'REEVE', 'REEZE', 'REFAN', 'REFED', 'REFEL', 'REFER', 'REFFO', 'REFIS', 'REFIT', 'REFIX', 'REFLY', 'REFRY', 'REGAL', 'REGAR', 'REGES', 'REGET', 'REGEX', 'REGGO', 'REGIA', 'REGIE', 'REGLE', 'REGMA', 'REGNA', 'REGOS', 'REGOT', 'REGUR', 'REHAB', 'REHEM', 'REIFS', 'REIFY', 'REIGN', 'REIKI', 'REIKS', 'REINE', 'REING', 'REINK', 'REINS', 'REIRD', 'REIST', 'REIVE', 'REJAS', 'REJIG', 'REJON', 'REKED', 'REKES', 'REKEY', 'RELAX', 'RELAY', 'RELET', 'RELIC', 'RELIE', 'RELIT', 'RELLO', 'RELOS', 'REMAN', 'REMAP', 'REMEN', 'REMET', 'REMEX', 'REMIT', 'REMIX', 'REMOU', 'RENAL', 'RENAY', 'RENDS', 'RENDU', 'RENEW', 'RENEY', 'RENGA', 'RENGS', 'RENIG', 'RENIN', 'RENKS', 'RENNE', 'RENOS', 'RENTE', 'RENTS', 'REOIL', 'REORG', 'REPAS', 'REPAT', 'REPAY', 'REPEG', 'REPEL', 'REPEN', 'REPIN', 'REPLA', 'REPLY', 'REPOS', 'REPOT', 'REPPS', 'REPRO', 'REPUN', 'REPUT', 'RERAN', 'RERIG', 'RERUN', 'RESAM', 'RESAT', 'RESAW', 'RESAY', 'RESEE', 'RESES', 'RESET', 'RESEW', 'RESID', 'RESIN', 'RESIT', 'RESOD', 'RESOL', 'RESOW', 'RESTO', 'RESTS', 'RESTY', 'RESUE', 'RESUS', 'RETAG', 'RETAM', 'RETAX', 'RETCH', 'RETEM', 'RETIA', 'RETIE', 'RETIN', 'RETIP', 'RETOX', 'RETRO', 'RETRY', 'REUNE', 'REUPS', 'REUSE', 'REVEL', 'REVET', 'REVIE', 'REVOW', 'REVUE', 'REWAN', 'REWAX', 'REWED', 'REWET', 'REWIN', 'REWON', 'REWTH', 'REXES', 'REZES', 'RHABD', 'RHEAS', 'RHEID', 'RHEME', 'RHEUM', 'RHIES', 'RHIME', 'RHINE', 'RHINO', 'RHODY', 'RHOMB', 'RHONE', 'RHUMB', 'RHYME', 'RHYMY', 'RHYNE', 'RHYTA', 'RIADS', 'RIALS', 'RIANT', 'RIATA', 'RIATO', 'RIBAS', 'RIBBY', 'RIBES', 'RICED', 'RICER', 'RICES', 'RICEY', 'RICHE', 'RICHT', 'RICIN', 'RICKS', 'RIDER', 'RIDES', 'RIDGE', 'RIDGY', 'RIDIC', 'RIELS', 'RIEMS', 'RIEVE', 'RIFER', 'RIFFS', 'RIFFY', 'RIFLE', 'RIFTE', 'RIFTS', 'RIFTY', 'RIGGS', 'RIGHT', 'RIGID', 'RIGMO', 'RIGOL', 'RIGOR', 'RIKKA', 'RIKWA', 'RILED', 'RILES', 'RILEY', 'RILLE', 'RILLS', 'RILLY', 'RIMAE', 'RIMED', 'RIMER', 'RIMES', 'RIMON', 'RIMUS', 'RINCE', 'RINDS', 'RINDY', 'RINES', 'RINGE', 'RINGS', 'RINGY', 'RINKS', 'RINSE', 'RIOJA', 'RIONE', 'RIOTS', 'RIOTY', 'RIPED', 'RIPEN', 'RIPER', 'RIPES', 'RIPPS', 'RIQQS', 'RISEN', 'RISER', 'RISES', 'RISHI', 'RISKS', 'RISKY', 'RISPS', 'RISTS', 'RISUS', 'RITES', 'RITHE', 'RITTS', 'RITZY', 'RIVAL', 'RIVAS', 'RIVED', 'RIVEL', 'RIVEN', 'RIVER', 'RIVES', 'RIVET', 'RIYAL', 'RIZAS', 'ROACH', 'ROADS', 'ROADY', 'ROAKE', 'ROAKY', 'ROAMS', 'ROANS', 'ROANY', 'ROARS', 'ROARY', 'ROAST', 'ROATE', 'ROBBO', 'ROBED', 'ROBER', 'ROBES', 'ROBIN', 'ROBLE', 'ROBOT', 'ROBUG', 'ROBUR', 'ROCHE', 'ROCKS', 'ROCKY', 'RODED', 'RODEO', 'RODES', 'RODNY', 'ROERS', 'ROGAN', 'ROGER', 'ROGUE', 'ROGUY', 'ROHAN', 'ROHES', 'ROHUN', 'ROHUS', 'ROIDS', 'ROILS', 'ROILY', 'ROINS', 'ROIST', 'ROJAK', 'ROJIS', 'ROKED', 'ROKER', 'ROKES', 'ROKEY', 'ROKOS', 'ROLAG', 'ROLEO', 'ROLES', 'ROLFS', 'ROLLS', 'ROLLY', 'ROMAL', 'ROMAN', 'ROMEO', 'ROMER', 'ROMPS', 'ROMPU', 'ROMPY', 'RONDE', 'RONDO', 'RONEO', 'RONES', 'RONIN', 'RONNE', 'RONTE', 'RONTS', 'RONUK', 'ROODS', 'ROOFS', 'ROOFY', 'ROOKS', 'ROOKY', 'ROOMS', 'ROOMY', 'ROONS', 'ROOPS', 'ROOPY', 'ROOSA', 'ROOSE', 'ROOST', 'ROOTS', 'ROOTY', 'ROPED', 'ROPER', 'ROPES', 'ROPEY', 'ROQUE', 'RORAL', 'RORES', 'RORIC', 'RORID', 'RORIE', 'RORTS', 'RORTY', 'ROSAL', 'ROSCO', 'ROSED', 'ROSES', 'ROSET', 'ROSHA', 'ROSHI', 'ROSIN', 'ROSIT', 'ROSPS', 'ROSSA', 'ROSSO', 'ROSTI', 'ROSTS', 'ROTAL', 'ROTAN', 'ROTAS', 'ROTCH', 'ROTED', 'ROTES', 'ROTIS', 'ROTLS', 'ROTON', 'ROTOR', 'ROTOS', 'ROTTA', 'ROTTE', 'ROTTO', 'ROTTY', 'ROUEN', 'ROUES', 'ROUET', 'ROUFS', 'ROUGE', 'ROUGH', 'ROUGY', 'ROUKS', 'ROUKY', 'ROULE', 'ROULS', 'ROUMS', 'ROUND', 'ROUPS', 'ROUPY', 'ROUSE', 'ROUST', 'ROUTE', 'ROUTH', 'ROUTS', 'ROVED', 'ROVEN', 'ROVER', 'ROVES', 'ROWAN', 'ROWDY', 'ROWED', 'ROWEL', 'ROWEN', 'ROWER', 'ROWET', 'ROWIE', 'ROWME', 'ROWND', 'ROWNS', 'ROWTH', 'ROWTS', 'ROYAL', 'ROYET', 'ROYNE', 'ROYST', 'ROZES', 'ROZET', 'ROZIT', 'RUACH', 'RUANA', 'RUBAI', 'RUBAN', 'RUBBY', 'RUBEL', 'RUBES', 'RUBIN', 'RUBIO', 'RUBLE', 'RUBLI', 'RUBOR', 'RUBUS', 'RUCHE', 'RUCHY', 'RUCKS', 'RUDAS', 'RUDDS', 'RUDDY', 'RUDER', 'RUDES', 'RUDIE', 'RUDIS', 'RUEDA', 'RUERS', 'RUFFE', 'RUFFS', 'RUFFY', 'RUFUS', 'RUGAE', 'RUGAL', 'RUGAS', 'RUGBY', 'RUGGY', 'RUICE', 'RUING', 'RUINS', 'RUKHS', 'RULED', 'RULER', 'RULES', 'RULLY', 'RUMAL', 'RUMBA', 'RUMBO', 'RUMEN', 'RUMES', 'RUMLY', 'RUMMY', 'RUMOR', 'RUMPO', 'RUMPS', 'RUMPY', 'RUNCE', 'RUNCH', 'RUNDS', 'RUNED', 'RUNER', 'RUNES', 'RUNGS', 'RUNIC', 'RUNNY', 'RUNOS', 'RUNTS', 'RUNTY', 'RUNUP', 'RUOTE', 'RUPEE', 'RUPIA', 'RURAL', 'RURPS', 'RURUS', 'RUSAS', 'RUSES', 'RUSHY', 'RUSKS', 'RUSKY', 'RUSMA', 'RUSSE', 'RUSTS', 'RUSTY', 'RUTHS', 'RUTIN', 'RUTTY', 'RUVID', 'RYALS', 'RYBAT', 'RYIJI', 'RYIJY', 'RYKED', 'RYKES', 'RYMER', 'RYMME', 'RYNDS', 'RYOTI', 'RYOTS', 'RYPER', 'RYPIN', 'RYTHE', 'RYUGI', 'SAAGS', 'SABAL', 'SABED', 'SABER', 'SABES', 'SABHA', 'SABIN', 'SABIR', 'SABJI', 'SABLE', 'SABOS', 'SABOT', 'SABRA', 'SABRE', 'SABZI', 'SACKS', 'SACRA', 'SACRE', 'SADDO', 'SADDY', 'SADES', 'SADHE', 'SADHU', 'SADIC', 'SADIS', 'SADLY', 'SADOS', 'SADZA', 'SAETA', 'SAFED', 'SAFER', 'SAFES', 'SAGAR', 'SAGAS', 'SAGER', 'SAGES', 'SAGGY', 'SAGOS', 'SAGUM', 'SAHAB', 'SAHEB', 'SAHIB', 'SAICE', 'SAICK', 'SAICS', 'SAIDS', 'SAIGA', 'SAILS', 'SAIMS', 'SAINE', 'SAINS', 'SAINT', 'SAIRS', 'SAIST', 'SAITH', 'SAJOU', 'SAKAI', 'SAKER', 'SAKES', 'SAKIA', 'SAKIS', 'SAKTI', 'SALAD', 'SALAL', 'SALAS', 'SALAT', 'SALEP', 'SALES', 'SALET', 'SALIC', 'SALIS', 'SALIX', 'SALLE', 'SALLY', 'SALMI', 'SALOL', 'SALON', 'SALOP', 'SALPA', 'SALPS', 'SALSA', 'SALSE', 'SALTO', 'SALTS', 'SALTY', 'SALUD', 'SALUE', 'SALUT', 'SALVE', 'SALVO', 'SAMAN', 'SAMAS', 'SAMBA', 'SAMBO', 'SAMEK', 'SAMEL', 'SAMEN', 'SAMES', 'SAMEY', 'SAMFI', 'SAMFU', 'SAMMY', 'SAMPI', 'SAMPS', 'SANAD', 'SANDS', 'SANDY', 'SANED', 'SANER', 'SANES', 'SANGA', 'SANGH', 'SANGO', 'SANGS', 'SANKO', 'SANSA', 'SANTO', 'SANTS', 'SAOLA', 'SAPAN', 'SAPID', 'SAPOR', 'SAPPY', 'SARAN', 'SARDS', 'SARED', 'SAREE', 'SARGE', 'SARGO', 'SARIN', 'SARIR', 'SARIS', 'SARKS', 'SARKY', 'SAROD', 'SAROS', 'SARUS', 'SARVO', 'SASER', 'SASIN', 'SASSE', 'SASSY', 'SATAI', 'SATAY', 'SATED', 'SATEM', 'SATER', 'SATES', 'SATIN', 'SATIS', 'SATYR', 'SAUBA', 'SAUCE', 'SAUCH', 'SAUCY', 'SAUGH', 'SAULS', 'SAULT', 'SAUNA', 'SAUNF', 'SAUNT', 'SAURY', 'SAUTE', 'SAUTS', 'SAUVE', 'SAVED', 'SAVER', 'SAVES', 'SAVEY', 'SAVIN', 'SAVOR', 'SAVOY', 'SAVVY', 'SAWAH', 'SAWED', 'SAWER', 'SAXES', 'SAYAS', 'SAYED', 'SAYEE', 'SAYER', 'SAYID', 'SAYNE', 'SAYON', 'SAYST', 'SAZES', 'SCABS', 'SCADS', 'SCAFF', 'SCAGS', 'SCAIL', 'SCALA', 'SCALD', 'SCALE', 'SCALL', 'SCALP', 'SCALY', 'SCAMP', 'SCAMS', 'SCAND', 'SCANS', 'SCANT', 'SCAPA', 'SCAPE', 'SCAPI', 'SCARE', 'SCARF', 'SCARP', 'SCARS', 'SCART', 'SCARY', 'SCATH', 'SCATS', 'SCATT', 'SCAUD', 'SCAUP', 'SCAUR', 'SCAWS', 'SCEAT', 'SCENA', 'SCEND', 'SCENE', 'SCENT', 'SCHAV', 'SCHIF', 'SCHMO', 'SCHUL', 'SCHWA', 'SCIFI', 'SCIND', 'SCION', 'SCIRE', 'SCLIM', 'SCOBE', 'SCODY', 'SCOFF', 'SCOGS', 'SCOLD', 'SCONE', 'SCOOG', 'SCOOP', 'SCOOT', 'SCOPA', 'SCOPE', 'SCOPS', 'SCORE', 'SCORN', 'SCORP', 'SCOTE', 'SCOTS', 'SCOUG', 'SCOUP', 'SCOUR', 'SCOUT', 'SCOWL', 'SCOWP', 'SCOWS', 'SCRAB', 'SCRAE', 'SCRAG', 'SCRAM', 'SCRAN', 'SCRAP', 'SCRAT', 'SCRAW', 'SCRAY', 'SCREE', 'SCREW', 'SCRIM', 'SCRIP', 'SCROB', 'SCROD', 'SCROG', 'SCROO', 'SCROW', 'SCRUB', 'SCRUM', 'SCUBA', 'SCUDI', 'SCUDO', 'SCUDS', 'SCUFF', 'SCUFT', 'SCUGS', 'SCULK', 'SCULL', 'SCULP', 'SCULS', 'SCUMS', 'SCUPS', 'SCURF', 'SCURS', 'SCUSE', 'SCUTA', 'SCUTE', 'SCUTS', 'SCUZZ', 'SCYES', 'SDAYN', 'SDEIN', 'SEALS', 'SEAME', 'SEAMS', 'SEAMY', 'SEANS', 'SEARE', 'SEARS', 'SEASE', 'SEATS', 'SEAZE', 'SEBUM', 'SECCO', 'SECHS', 'SECTS', 'SEDAN', 'SEDER', 'SEDES', 'SEDGE', 'SEDGY', 'SEDUM', 'SEEDS', 'SEEDY', 'SEEKS', 'SEELD', 'SEELS', 'SEELY', 'SEEMS', 'SEEPS', 'SEEPY', 'SEERS', 'SEFER', 'SEGAR', 'SEGAS', 'SEGNI', 'SEGNO', 'SEGOL', 'SEGOS', 'SEGUE', 'SEHRI', 'SEIFS', 'SEILS', 'SEINE', 'SEIRS', 'SEISE', 'SEISM', 'SEITY', 'SEIZA', 'SEIZE', 'SEKOS', 'SEKTS', 'SELAH', 'SELES', 'SELFS', 'SELFY', 'SELKY', 'SELLA', 'SELLE', 'SELLS', 'SELVA', 'SEMAS', 'SEMEE', 'SEMEN', 'SEMES', 'SEMIE', 'SEMIS', 'SENAS', 'SENDS', 'SENES', 'SENEX', 'SENGI', 'SENNA', 'SENOR', 'SENSA', 'SENSE', 'SENSI', 'SENSU', 'SENTE', 'SENTI', 'SENTS', 'SENVY', 'SENZA', 'SEPAD', 'SEPAL', 'SEPIA', 'SEPIC', 'SEPOY', 'SEPPO', 'SEPTA', 'SEPTS', 'SERAC', 'SERAI', 'SERAL', 'SERED', 'SERER', 'SERES', 'SERFS', 'SERGE', 'SERIA', 'SERIC', 'SERIF', 'SERIN', 'SERIR', 'SERKS', 'SERON', 'SEROW', 'SERRA', 'SERRE', 'SERRS', 'SERRY', 'SERUM', 'SERVE', 'SERVO', 'SESEY', 'SESSA', 'SETAE', 'SETAL', 'SETER', 'SETHS', 'SETON', 'SETTS', 'SETUP', 'SEVAK', 'SEVEN', 'SEVER', 'SEVIR', 'SEWAN', 'SEWAR', 'SEWED', 'SEWEL', 'SEWEN', 'SEWER', 'SEWIN', 'SEXED', 'SEXER', 'SEXES', 'SEXOR', 'SEXTO', 'SEXTS', 'SEYEN', 'SEZES', 'SHACK', 'SHADE', 'SHADS', 'SHADY', 'SHAFT', 'SHAGS', 'SHAHS', 'SHAKA', 'SHAKE', 'SHAKO', 'SHAKT', 'SHAKY', 'SHALE', 'SHALL', 'SHALM', 'SHALT', 'SHALY', 'SHAMA', 'SHAME', 'SHAMS', 'SHAND', 'SHANK', 'SHANS', 'SHAPE', 'SHAPS', 'SHARD', 'SHARE', 'SHARK', 'SHARN', 'SHARP', 'SHART', 'SHASH', 'SHAUL', 'SHAVE', 'SHAWL', 'SHAWM', 'SHAWN', 'SHAWS', 'SHAYA', 'SHAYS', 'SHCHI', 'SHEAF', 'SHEAL', 'SHEAR', 'SHEAS', 'SHEDS', 'SHEEL', 'SHEEN', 'SHEEP', 'SHEER', 'SHEET', 'SHEIK', 'SHELF', 'SHELL', 'SHEND', 'SHENG', 'SHENT', 'SHEOL', 'SHERD', 'SHERE', 'SHERO', 'SHETS', 'SHEVA', 'SHEWN', 'SHEWS', 'SHIAI', 'SHIED', 'SHIEL', 'SHIER', 'SHIES', 'SHIFT', 'SHILL', 'SHILY', 'SHIMS', 'SHINE', 'SHINS', 'SHINY', 'SHIOK', 'SHIPS', 'SHIRE', 'SHIRK', 'SHIRR', 'SHIRS', 'SHIRT', 'SHISH', 'SHISO', 'SHIST', 'SHITE', 'SHITS', 'SHIUR', 'SHIVA', 'SHIVE', 'SHIVS', 'SHLEP', 'SHLUB', 'SHMEK', 'SHMOE', 'SHOAL', 'SHOAT', 'SHOCK', 'SHOED', 'SHOER', 'SHOES', 'SHOGI', 'SHOGS', 'SHOJI', 'SHOJO', 'SHOLA', 'SHONE', 'SHONK', 'SHOOK', 'SHOOL', 'SHOON', 'SHOOS', 'SHOOT', 'SHOPE', 'SHOPS', 'SHORE', 'SHORL', 'SHORN', 'SHORT', 'SHOTE', 'SHOTS', 'SHOTT', 'SHOUD', 'SHOUT', 'SHOVE', 'SHOWD', 'SHOWN', 'SHOWS', 'SHOWY', 'SHOYU', 'SHRED', 'SHREW', 'SHRIS', 'SHROW', 'SHRUB', 'SHRUG', 'SHTAR', 'SHTIK', 'SHTUM', 'SHTUP', 'SHUBA', 'SHUCK', 'SHULE', 'SHULN', 'SHULS', 'SHUNS', 'SHUNT', 'SHURA', 'SHUSH', 'SHUTE', 'SHUTS', 'SHWAS', 'SHYER', 'SHYLY', 'SIALS', 'SIBBS', 'SIBIA', 'SIBYL', 'SICES', 'SICHT', 'SICKO', 'SICKS', 'SICKY', 'SIDAS', 'SIDED', 'SIDER', 'SIDES', 'SIDEY', 'SIDHA', 'SIDHE', 'SIDLE', 'SIEGE', 'SIELD', 'SIENS', 'SIENT', 'SIETH', 'SIEUR', 'SIEVE', 'SIFTS', 'SIGHS', 'SIGHT', 'SIGIL', 'SIGLA', 'SIGMA', 'SIGNA', 'SIGNS', 'SIGRI', 'SIJOS', 'SIKAS', 'SIKER', 'SIKES', 'SILDS', 'SILED', 'SILEN', 'SILER', 'SILES', 'SILEX', 'SILKS', 'SILKY', 'SILLS', 'SILLY', 'SILOS', 'SILTS', 'SILTY', 'SILVA', 'SIMAR', 'SIMAS', 'SIMBA', 'SIMIS', 'SIMPS', 'SIMUL', 'SINCE', 'SINDS', 'SINED', 'SINES', 'SINEW', 'SINGE', 'SINGS', 'SINHS', 'SINKS', 'SINKY', 'SINSI', 'SINUS', 'SIPED', 'SIPES', 'SIPPY', 'SIRED', 'SIREE', 'SIREN', 'SIRES', 'SIRIH', 'SIRIS', 'SIROC', 'SIRRA', 'SIRUP', 'SISAL', 'SISES', 'SISSY', 'SISTA', 'SISTS', 'SITAR', 'SITCH', 'SITED', 'SITES', 'SITHE', 'SITKA', 'SITUP', 'SITUS', 'SIVER', 'SIXER', 'SIXES', 'SIXMO', 'SIXTE', 'SIXTH', 'SIXTY', 'SIZAR', 'SIZED', 'SIZEL', 'SIZER', 'SIZES', 'SKAGS', 'SKAIL', 'SKALD', 'SKANK', 'SKARN', 'SKART', 'SKATE', 'SKATS', 'SKATT', 'SKAWS', 'SKEAN', 'SKEAR', 'SKEDS', 'SKEED', 'SKEEF', 'SKEEN', 'SKEER', 'SKEES', 'SKEET', 'SKEEV', 'SKEEZ', 'SKEGG', 'SKEGS', 'SKEIN', 'SKELF', 'SKELL', 'SKELM', 'SKELP', 'SKENE', 'SKENS', 'SKEOS', 'SKEPS', 'SKERM', 'SKERS', 'SKETS', 'SKEWS', 'SKIDS', 'SKIED', 'SKIER', 'SKIES', 'SKIEY', 'SKIFF', 'SKILL', 'SKIMO', 'SKIMP', 'SKIMS', 'SKINK', 'SKINS', 'SKINT', 'SKIOS', 'SKIPS', 'SKIRL', 'SKIRR', 'SKIRT', 'SKITE', 'SKITS', 'SKIVE', 'SKIVY', 'SKLIM', 'SKOAL', 'SKOBE', 'SKODY', 'SKOFF', 'SKOFS', 'SKOGS', 'SKOLS', 'SKOOL', 'SKORT', 'SKOSH', 'SKRAN', 'SKRIK', 'SKROO', 'SKUAS', 'SKUGS', 'SKULK', 'SKULL', 'SKUNK', 'SKYED', 'SKYER', 'SKYEY', 'SKYFS', 'SKYRE', 'SKYRS', 'SKYTE', 'SLABS', 'SLACK', 'SLADE', 'SLAES', 'SLAGS', 'SLAID', 'SLAIN', 'SLAKE', 'SLAMS', 'SLANE', 'SLANG', 'SLANK', 'SLANT', 'SLAPS', 'SLART', 'SLASH', 'SLATE', 'SLATS', 'SLATY', 'SLAVE', 'SLAWS', 'SLAYS', 'SLEBS', 'SLEDS', 'SLEEK', 'SLEEP', 'SLEER', 'SLEET', 'SLEPT', 'SLEWS', 'SLEYS', 'SLICE', 'SLICK', 'SLIDE', 'SLIER', 'SLILY', 'SLIME', 'SLIMS', 'SLIMY', 'SLING', 'SLINK', 'SLIPE', 'SLIPS', 'SLIPT', 'SLISH', 'SLITS', 'SLIVE', 'SLOAN', 'SLOBS', 'SLOES', 'SLOGS', 'SLOID', 'SLOJD', 'SLOKA', 'SLOMO', 'SLOOM', 'SLOOP', 'SLOOT', 'SLOPE', 'SLOPS', 'SLOPY', 'SLORM', 'SLOSH', 'SLOTH', 'SLOTS', 'SLOVE', 'SLOWS', 'SLOYD', 'SLUBB', 'SLUBS', 'SLUED', 'SLUES', 'SLUFF', 'SLUGS', 'SLUIT', 'SLUMP', 'SLUMS', 'SLUNG', 'SLUNK', 'SLURB', 'SLURP', 'SLURS', 'SLUSE', 'SLUSH', 'SLUTS', 'SLYER', 'SLYLY', 'SLYPE', 'SMAAK', 'SMACK', 'SMAIK', 'SMALL', 'SMALM', 'SMALT', 'SMARM', 'SMART', 'SMASH', 'SMAZE', 'SMEAR', 'SMEEK', 'SMEES', 'SMEIK', 'SMEKE', 'SMELL', 'SMELT', 'SMERK', 'SMEWS', 'SMICK', 'SMILE', 'SMILY', 'SMIRK', 'SMIRR', 'SMIRS', 'SMITE', 'SMITH', 'SMITS', 'SMIZE', 'SMOCK', 'SMOGS', 'SMOKE', 'SMOKO', 'SMOKY', 'SMOLT', 'SMOOR', 'SMOOT', 'SMORE', 'SMORG', 'SMOTE', 'SMOUT', 'SMOWT', 'SMUGS', 'SMURS', 'SMUSH', 'SMUTS', 'SNABS', 'SNACK', 'SNAFU', 'SNAGS', 'SNAIL', 'SNAKE', 'SNAKY', 'SNAPS', 'SNARE', 'SNARF', 'SNARK', 'SNARL', 'SNARS', 'SNARY', 'SNASH', 'SNATH', 'SNAWS', 'SNEAD', 'SNEAK', 'SNEAP', 'SNEBS', 'SNECK', 'SNEDS', 'SNEED', 'SNEER', 'SNEES', 'SNELL', 'SNIBS', 'SNICK', 'SNIDE', 'SNIED', 'SNIES', 'SNIFF', 'SNIFT', 'SNIGS', 'SNIPE', 'SNIPS', 'SNIPY', 'SNIRT', 'SNITS', 'SNIVE', 'SNOBS', 'SNODS', 'SNOEK', 'SNOEP', 'SNOGS', 'SNOKE', 'SNOOD', 'SNOOK', 'SNOOL', 'SNOOP', 'SNOOT', 'SNORE', 'SNORT', 'SNOTS', 'SNOUT', 'SNOWK', 'SNOWS', 'SNOWY', 'SNUBS', 'SNUCK', 'SNUFF', 'SNUGS', 'SNUSH', 'SNYES', 'SOAKS', 'SOAPS', 'SOAPY', 'SOARE', 'SOARS', 'SOAVE', 'SOBAS', 'SOBER', 'SOCAS', 'SOCES', 'SOCIA', 'SOCKO', 'SOCKS', 'SOCLE', 'SODAS', 'SODDY', 'SODIC', 'SODOM', 'SOFAR', 'SOFAS', 'SOFTA', 'SOFTS', 'SOFTY', 'SOGER', 'SOGGY', 'SOHUR', 'SOILS', 'SOILY', 'SOJAS', 'SOJUS', 'SOKAH', 'SOKEN', 'SOKES', 'SOKOL', 'SOLAH', 'SOLAN', 'SOLAR', 'SOLAS', 'SOLDE', 'SOLDI', 'SOLDO', 'SOLDS', 'SOLED', 'SOLEI', 'SOLER', 'SOLES', 'SOLID', 'SOLON', 'SOLOS', 'SOLUM', 'SOLUS', 'SOLVE', 'SOMAN', 'SOMAS', 'SONAR', 'SONCE', 'SONDE', 'SONES', 'SONGO', 'SONGS', 'SONGY', 'SONIC', 'SONLY', 'SONNE', 'SONNY', 'SONSE', 'SONSY', 'SOOEY', 'SOOKS', 'SOOKY', 'SOOLE', 'SOOLS', 'SOOMS', 'SOOPS', 'SOOTE', 'SOOTH', 'SOOTS', 'SOOTY', 'SOPHS', 'SOPHY', 'SOPOR', 'SOPPY', 'SOPRA', 'SORAL', 'SORAS', 'SORBI', 'SORBO', 'SORBS', 'SORDA', 'SORDO', 'SORDS', 'SORED', 'SOREE', 'SOREL', 'SORER', 'SORES', 'SOREX', 'SORGO', 'SORNS', 'SORRA', 'SORRY', 'SORTA', 'SORTS', 'SORUS', 'SOTHS', 'SOTOL', 'SOTTO', 'SOUCE', 'SOUCT', 'SOUGH', 'SOUKS', 'SOULS', 'SOULY', 'SOUMS', 'SOUND', 'SOUPS', 'SOUPY', 'SOURS', 'SOUSE', 'SOUTH', 'SOUTS', 'SOWAR', 'SOWCE', 'SOWED', 'SOWER', 'SOWFF', 'SOWFS', 'SOWLE', 'SOWLS', 'SOWMS', 'SOWND', 'SOWNE', 'SOWPS', 'SOWSE', 'SOWTH', 'SOXES', 'SOYAS', 'SOYLE', 'SOYUZ', 'SOZIN', 'SPACE', 'SPACK', 'SPACY', 'SPADE', 'SPADO', 'SPADS', 'SPAED', 'SPAER', 'SPAES', 'SPAGS', 'SPAHI', 'SPAIL', 'SPAIN', 'SPAIT', 'SPAKE', 'SPALD', 'SPALE', 'SPALL', 'SPALT', 'SPAMS', 'SPANE', 'SPANG', 'SPANK', 'SPANS', 'SPARD', 'SPARE', 'SPARK', 'SPARS', 'SPART', 'SPASM', 'SPATE', 'SPATS', 'SPAUL', 'SPAWL', 'SPAWN', 'SPAWS', 'SPAYD', 'SPAYS', 'SPAZA', 'SPAZZ', 'SPEAK', 'SPEAL', 'SPEAN', 'SPEAR', 'SPEAT', 'SPECK', 'SPECS', 'SPECT', 'SPEED', 'SPEEL', 'SPEER', 'SPEIL', 'SPEIR', 'SPEKS', 'SPELD', 'SPELK', 'SPELL', 'SPELT', 'SPEND', 'SPENT', 'SPEOS', 'SPERM', 'SPESH', 'SPETS', 'SPEUG', 'SPEWS', 'SPEWY', 'SPIAL', 'SPICA', 'SPICE', 'SPICK', 'SPICS', 'SPICY', 'SPIDE', 'SPIED', 'SPIEL', 'SPIER', 'SPIES', 'SPIFF', 'SPIFS', 'SPIKE', 'SPIKS', 'SPIKY', 'SPILE', 'SPILL', 'SPILT', 'SPIMS', 'SPINA', 'SPINE', 'SPINK', 'SPINS', 'SPINY', 'SPIRE', 'SPIRT', 'SPIRY', 'SPITE', 'SPITS', 'SPITZ', 'SPIVS', 'SPLAT', 'SPLAY', 'SPLIT', 'SPLOG', 'SPODE', 'SPODS', 'SPOIL', 'SPOKE', 'SPOOF', 'SPOOK', 'SPOOL', 'SPOOM', 'SPOON', 'SPOOR', 'SPOOT', 'SPORE', 'SPORK', 'SPORT', 'SPOSA', 'SPOSH', 'SPOSO', 'SPOTS', 'SPOUT', 'SPRAD', 'SPRAG', 'SPRAT', 'SPRAY', 'SPRED', 'SPREE', 'SPREW', 'SPRIG', 'SPRIT', 'SPROD', 'SPROG', 'SPRUE', 'SPRUG', 'SPUDS', 'SPUED', 'SPUER', 'SPUES', 'SPUGS', 'SPULE', 'SPUME', 'SPUMY', 'SPUNK', 'SPURN', 'SPURS', 'SPURT', 'SPUTA', 'SPYAL', 'SPYRE', 'SQUAB', 'SQUAD', 'SQUAT', 'SQUAW', 'SQUEE', 'SQUEG', 'SQUIB', 'SQUID', 'SQUIT', 'SQUIZ', 'SRSLY', 'STABS', 'STACK', 'STADE', 'STAFF', 'STAGE', 'STAGS', 'STAGY', 'STAID', 'STAIG', 'STAIN', 'STAIR', 'STAKE', 'STALE', 'STALK', 'STALL', 'STAMP', 'STAND', 'STANE', 'STANG', 'STANK', 'STANS', 'STAPH', 'STAPS', 'STARE', 'STARK', 'STARN', 'STARR', 'STARS', 'START', 'STARY', 'STASH', 'STATE', 'STATS', 'STATU', 'STAUN', 'STAVE', 'STAWS', 'STAYS', 'STEAD', 'STEAK', 'STEAL', 'STEAM', 'STEAN', 'STEAR', 'STEDD', 'STEDE', 'STEDS', 'STEED', 'STEEK', 'STEEL', 'STEEM', 'STEEN', 'STEEP', 'STEER', 'STEEZ', 'STEIK', 'STEIL', 'STEIN', 'STELA', 'STELE', 'STELL', 'STEME', 'STEMS', 'STEND', 'STENO', 'STENS', 'STENT', 'STEPS', 'STEPT', 'STERE', 'STERN', 'STETS', 'STEWS', 'STEWY', 'STEYS', 'STICH', 'STICK', 'STIED', 'STIES', 'STIFF', 'STILB', 'STILE', 'STILL', 'STILT', 'STIME', 'STIMS', 'STIMY', 'STING', 'STINK', 'STINT', 'STIPA', 'STIPE', 'STIRE', 'STIRK', 'STIRP', 'STIRS', 'STIVE', 'STIVY', 'STOAE', 'STOAI', 'STOAS', 'STOAT', 'STOBS', 'STOCK', 'STOEP', 'STOGS', 'STOGY', 'STOIC', 'STOIT', 'STOKE', 'STOLE', 'STOLN', 'STOMA', 'STOMP', 'STOND', 'STONE', 'STONG', 'STONK', 'STONN', 'STONY', 'STOOD', 'STOOK', 'STOOL', 'STOOP', 'STOOR', 'STOPE', 'STOPS', 'STOPT', 'STORE', 'STORK', 'STORM', 'STORY', 'STOSS', 'STOTS', 'STOTT', 'STOUN', 'STOUP', 'STOUR', 'STOUT', 'STOVE', 'STOWN', 'STOWP', 'STOWS', 'STRAD', 'STRAE', 'STRAG', 'STRAK', 'STRAP', 'STRAW', 'STRAY', 'STREP', 'STREW', 'STRIA', 'STRIG', 'STRIM', 'STRIP', 'STROP', 'STROW', 'STROY', 'STRUM', 'STRUT', 'STUBS', 'STUCK', 'STUCS', 'STUDE', 'STUDS', 'STUDY', 'STUFF', 'STULL', 'STULM', 'STUMM', 'STUMP', 'STUMS', 'STUNG', 'STUNK', 'STUNS', 'STUNT', 'STUPA', 'STUPE', 'STURE', 'STURT', 'STUSH', 'STYED', 'STYES', 'STYLE', 'STYLI', 'STYLO', 'STYME', 'STYMY', 'STYRE', 'STYTE', 'SUAVE', 'SUBAH', 'SUBAK', 'SUBAS', 'SUBBY', 'SUBER', 'SUBHA', 'SUCCI', 'SUCKS', 'SUCKY', 'SUCRE', 'SUDAN', 'SUDDS', 'SUDOR', 'SUDSY', 'SUEDE', 'SUENT', 'SUERS', 'SUETE', 'SUETS', 'SUETY', 'SUGAN', 'SUGAR', 'SUGHS', 'SUGOS', 'SUHUR', 'SUIDS', 'SUING', 'SUINT', 'SUITE', 'SUITS', 'SUJEE', 'SUKHS', 'SUKIS', 'SUKUK', 'SULCI', 'SULFA', 'SULFO', 'SULKS', 'SULKY', 'SULLS', 'SULLY', 'SULPH', 'SULUS', 'SUMAC', 'SUMIS', 'SUMMA', 'SUMOS', 'SUMPH', 'SUMPS', 'SUNIS', 'SUNKS', 'SUNNA', 'SUNNS', 'SUNNY', 'SUNTS', 'SUNUP', 'SUONA', 'SUPED', 'SUPER', 'SUPES', 'SUPRA', 'SURAH', 'SURAL', 'SURAS', 'SURAT', 'SURDS', 'SURED', 'SURER', 'SURES', 'SURFS', 'SURFY', 'SURGE', 'SURGY', 'SURLY', 'SURRA', 'SUSED', 'SUSES', 'SUSHI', 'SUSUS', 'SUTOR', 'SUTRA', 'SUTTA', 'SWABS', 'SWACK', 'SWADS', 'SWAGE', 'SWAGS', 'SWAIL', 'SWAIN', 'SWALE', 'SWALY', 'SWAMI', 'SWAMP', 'SWAMY', 'SWANG', 'SWANK', 'SWANS', 'SWAPS', 'SWAPT', 'SWARD', 'SWARE', 'SWARF', 'SWARM', 'SWART', 'SWASH', 'SWATH', 'SWATS', 'SWAYL', 'SWAYS', 'SWEAL', 'SWEAR', 'SWEAT', 'SWEDE', 'SWEED', 'SWEEL', 'SWEEP', 'SWEER', 'SWEES', 'SWEET', 'SWEIR', 'SWELL', 'SWELT', 'SWEPT', 'SWERF', 'SWEYS', 'SWIES', 'SWIFT', 'SWIGS', 'SWILE', 'SWILL', 'SWIMS', 'SWINE', 'SWING', 'SWINK', 'SWIPE', 'SWIRE', 'SWIRL', 'SWISH', 'SWISS', 'SWITH', 'SWITS', 'SWIVE', 'SWIZZ', 'SWOBS', 'SWOLE', 'SWOLL', 'SWOLN', 'SWOON', 'SWOOP', 'SWOPS', 'SWOPT', 'SWORD', 'SWORE', 'SWORN', 'SWOTS', 'SWOUN', 'SWUNG', 'SYBBE', 'SYBIL', 'SYBOE', 'SYBOW', 'SYCEE', 'SYCES', 'SYCON', 'SYEDS', 'SYENS', 'SYKER', 'SYKES', 'SYLIS', 'SYLPH', 'SYLVA', 'SYMAR', 'SYNCH', 'SYNCS', 'SYNDS', 'SYNED', 'SYNES', 'SYNOD', 'SYNTH', 'SYPED', 'SYPES', 'SYPHS', 'SYRAH', 'SYREN', 'SYRUP', 'SYSOP', 'SYTHE', 'SYVER', 'TAALS', 'TAATA', 'TABAC', 'TABBY', 'TABER', 'TABES', 'TABID', 'TABIS', 'TABLA', 'TABLE', 'TABLS', 'TABOO', 'TABOR', 'TABOS', 'TABUN', 'TABUS', 'TACAN', 'TACES', 'TACET', 'TACHE', 'TACHI', 'TACHO', 'TACHS', 'TACIT', 'TACKS', 'TACKY', 'TACOS', 'TACTS', 'TADAH', 'TAELS', 'TAFFY', 'TAFIA', 'TAGGY', 'TAGMA', 'TAGUA', 'TAHAS', 'TAHRS', 'TAIGA', 'TAIGS', 'TAIKO', 'TAILS', 'TAINS', 'TAINT', 'TAIRA', 'TAISH', 'TAITS', 'TAJES', 'TAKAS', 'TAKEN', 'TAKER', 'TAKES', 'TAKHI', 'TAKHT', 'TAKIN', 'TAKIS', 'TAKKY', 'TALAK', 'TALAQ', 'TALAR', 'TALAS', 'TALCS', 'TALCY', 'TALEA', 'TALER', 'TALES', 'TALIK', 'TALKS', 'TALKY', 'TALLS', 'TALLY', 'TALMA', 'TALON', 'TALPA', 'TALUK', 'TALUS', 'TAMAL', 'TAMAS', 'TAMED', 'TAMER', 'TAMES', 'TAMIN', 'TAMIS', 'TAMMY', 'TAMPS', 'TANAS', 'TANGA', 'TANGI', 'TANGO', 'TANGS', 'TANGY', 'TANHS', 'TANIA', 'TANKA', 'TANKS', 'TANKY', 'TANNA', 'TANSU', 'TANSY', 'TANTE', 'TANTI', 'TANTO', 'TANTY', 'TAPAS', 'TAPED', 'TAPEN', 'TAPER', 'TAPES', 'TAPET', 'TAPIR', 'TAPIS', 'TAPPA', 'TAPUS', 'TARAS', 'TARDO', 'TARDS', 'TARDY', 'TARED', 'TARES', 'TARGA', 'TARGE', 'TARKA', 'TARNS', 'TAROC', 'TAROK', 'TAROS', 'TAROT', 'TARPS', 'TARRE', 'TARRY', 'TARSE', 'TARSI', 'TARTE', 'TARTS', 'TARTY', 'TARZY', 'TASAR', 'TASCA', 'TASED', 'TASER', 'TASES', 'TASKS', 'TASSA', 'TASSE', 'TASSO', 'TASTE', 'TASTO', 'TASTY', 'TATAR', 'TATER', 'TATES', 'TATHS', 'TATIE', 'TATOU', 'TATTS', 'TATTY', 'TATUS', 'TAUBE', 'TAULD', 'TAUNT', 'TAUON', 'TAUPE', 'TAUTS', 'TAUTY', 'TAVAH', 'TAVAS', 'TAVER', 'TAWAF', 'TAWAI', 'TAWAS', 'TAWED', 'TAWER', 'TAWIE', 'TAWNY', 'TAWSE', 'TAWTS', 'TAXED', 'TAXER', 'TAXES', 'TAXIS', 'TAXOL', 'TAXON', 'TAXOR', 'TAXUS', 'TAYRA', 'TAZZA', 'TAZZE', 'TEACH', 'TEADE', 'TEADS', 'TEAED', 'TEAKS', 'TEALS', 'TEAMS', 'TEARS', 'TEARY', 'TEASE', 'TEATS', 'TEAZE', 'TECHS', 'TECHY', 'TECTA', 'TECUM', 'TEDDY', 'TEELS', 'TEEMS', 'TEEND', 'TEENE', 'TEENS', 'TEENY', 'TEERS', 'TEETH', 'TEETS', 'TEFFS', 'TEGGS', 'TEGUA', 'TEGUS', 'TEHEE', 'TEHRS', 'TEIID', 'TEILS', 'TEIND', 'TEINS', 'TEKKE', 'TELAE', 'TELCO', 'TELES', 'TELEX', 'TELIA', 'TELIC', 'TELLS', 'TELLY', 'TELOI', 'TELOS', 'TEMED', 'TEMES', 'TEMPI', 'TEMPO', 'TEMPS', 'TEMPT', 'TEMSE', 'TENCH', 'TENDS', 'TENDU', 'TENES', 'TENET', 'TENGE', 'TENIA', 'TENNE', 'TENNO', 'TENNY', 'TENON', 'TENOR', 'TENSE', 'TENTH', 'TENTS', 'TENTY', 'TENUE', 'TEPAL', 'TEPAS', 'TEPEE', 'TEPID', 'TEPOY', 'TERAI', 'TERAS', 'TERCE', 'TEREK', 'TERES', 'TERFE', 'TERFS', 'TERGA', 'TERMS', 'TERNE', 'TERNS', 'TERRA', 'TERRE', 'TERRY', 'TERSE', 'TERTS', 'TERZA', 'TESLA', 'TESTA', 'TESTE', 'TESTS', 'TESTY', 'TETES', 'TETHS', 'TETRA', 'TETRI', 'TEUCH', 'TEUGH', 'TEWED', 'TEWEL', 'TEWIT', 'TEXAS', 'TEXES', 'TEXTA', 'TEXTS', 'THACK', 'THAGI', 'THAIM', 'THALE', 'THALI', 'THANA', 'THANE', 'THANG', 'THANK', 'THANS', 'THANX', 'THARM', 'THARS', 'THAWS', 'THAWT', 'THAWY', 'THEBE', 'THECA', 'THEED', 'THEEK', 'THEES', 'THEFT', 'THEGN', 'THEIC', 'THEIN', 'THEIR', 'THELF', 'THEMA', 'THEME', 'THENS', 'THEOR', 'THEOW', 'THERE', 'THERM', 'THESE', 'THESP', 'THETA', 'THETE', 'THEWS', 'THEWY', 'THICK', 'THIEF', 'THIGH', 'THIGS', 'THILK', 'THILL', 'THINE', 'THING', 'THINK', 'THINS', 'THIOL', 'THIRD', 'THIRL', 'THOFT', 'THOLE', 'THOLI', 'THONG', 'THORN', 'THORO', 'THORP', 'THOSE', 'THOTS', 'THOUS', 'THOWL', 'THRAE', 'THRAW', 'THREE', 'THREW', 'THRID', 'THRIP', 'THROB', 'THROE', 'THROW', 'THRUM', 'THUDS', 'THUGS', 'THUJA', 'THUMB', 'THUMP', 'THUNK', 'THURL', 'THUYA', 'THYME', 'THYMI', 'THYMY', 'TIANS', 'TIARA', 'TIARE', 'TIARS', 'TIBIA', 'TICAL', 'TICCA', 'TICED', 'TICES', 'TICHY', 'TICKS', 'TICKY', 'TIDAL', 'TIDDY', 'TIDED', 'TIDES', 'TIEFS', 'TIERS', 'TIFFS', 'TIFOS', 'TIFTS', 'TIGER', 'TIGES', 'TIGHT', 'TIGON', 'TIKAS', 'TIKES', 'TIKIA', 'TIKIS', 'TIKKA', 'TILAK', 'TILDE', 'TILED', 'TILER', 'TILES', 'TILLS', 'TILLY', 'TILTH', 'TILTS', 'TIMBO', 'TIMED', 'TIMER', 'TIMES', 'TIMID', 'TIMON', 'TIMPS', 'TINAS', 'TINCT', 'TINDS', 'TINEA', 'TINED', 'TINES', 'TINGE', 'TINGS', 'TINKS', 'TINNY', 'TINTO', 'TINTS', 'TINTY', 'TIPIS', 'TIPPY', 'TIPSY', 'TIPUP', 'TIRED', 'TIRES', 'TIRLS', 'TIROS', 'TIRRS', 'TIRTH', 'TITAN', 'TITAR', 'TITAS', 'TITCH', 'TITER', 'TITHE', 'TITHI', 'TITIN', 'TITIR', 'TITIS', 'TITLE', 'TITRE', 'TITTY', 'TITUP', 'TIYIN', 'TIYNS', 'TIZES', 'TIZZY', 'TOADS', 'TOADY', 'TOAST', 'TOAZE', 'TOCKS', 'TOCKY', 'TOCOS', 'TODAY', 'TODDE', 'TODDY', 'TODEA', 'TODOS', 'TOEAS', 'TOFFS', 'TOFFY', 'TOFTS', 'TOFUS', 'TOGAE', 'TOGAS', 'TOGED', 'TOGES', 'TOGUE', 'TOHOS', 'TOIDY', 'TOILE', 'TOILS', 'TOING', 'TOISE', 'TOITS', 'TOITY', 'TOKAY', 'TOKED', 'TOKEN', 'TOKER', 'TOKES', 'TOKOS', 'TOLAN', 'TOLAR', 'TOLAS', 'TOLED', 'TOLES', 'TOLLS', 'TOLLY', 'TOLTS', 'TOLUS', 'TOLYL', 'TOMAN', 'TOMBO', 'TOMBS', 'TOMEN', 'TOMES', 'TOMIA', 'TOMIN', 'TOMME', 'TOMMY', 'TOMOS', 'TOMOZ', 'TONAL', 'TONDI', 'TONDO', 'TONED', 'TONER', 'TONES', 'TONEY', 'TONGA', 'TONGS', 'TONIC', 'TONKA', 'TONKS', 'TONNE', 'TONUS', 'TOOLS', 'TOOMS', 'TOONS', 'TOOTH', 'TOOTS', 'TOPAZ', 'TOPED', 'TOPEE', 'TOPEK', 'TOPER', 'TOPES', 'TOPHE', 'TOPHI', 'TOPHS', 'TOPIC', 'TOPIS', 'TOPOI', 'TOPOS', 'TOPPY', 'TOQUE', 'TORAH', 'TORAN', 'TORAS', 'TORCH', 'TORCS', 'TORES', 'TORIC', 'TORII', 'TOROS', 'TOROT', 'TORRS', 'TORSE', 'TORSI', 'TORSK', 'TORSO', 'TORTA', 'TORTE', 'TORTS', 'TORUS', 'TOSAS', 'TOSED', 'TOSES', 'TOSHY', 'TOSSY', 'TOSYL', 'TOTAL', 'TOTED', 'TOTEM', 'TOTER', 'TOTES', 'TOTTY', 'TOUCH', 'TOUGH', 'TOUKS', 'TOUNS', 'TOURS', 'TOUSE', 'TOUSY', 'TOUTS', 'TOUZE', 'TOUZY', 'TOWAI', 'TOWED', 'TOWEL', 'TOWER', 'TOWIE', 'TOWNO', 'TOWNS', 'TOWNY', 'TOWSE', 'TOWSY', 'TOWTS', 'TOWZE', 'TOWZY', 'TOXIC', 'TOXIN', 'TOYED', 'TOYER', 'TOYON', 'TOYOS', 'TOZED', 'TOZES', 'TOZIE', 'TRABS', 'TRACE', 'TRACK', 'TRACT', 'TRADE', 'TRADS', 'TRADY', 'TRAGA', 'TRAGI', 'TRAGS', 'TRAGU', 'TRAIK', 'TRAIL', 'TRAIN', 'TRAIT', 'TRAMP', 'TRAMS', 'TRANK', 'TRANQ', 'TRANS', 'TRANT', 'TRAPE', 'TRAPO', 'TRAPS', 'TRAPT', 'TRASH', 'TRASS', 'TRATS', 'TRATT', 'TRAVE', 'TRAWL', 'TRAYF', 'TRAYS', 'TREAD', 'TREAT', 'TRECK', 'TREED', 'TREEN', 'TREES', 'TREFA', 'TREIF', 'TREKS', 'TREMA', 'TREMS', 'TREND', 'TRESS', 'TREST', 'TRETS', 'TREWS', 'TREYF', 'TREYS', 'TRIAC', 'TRIAD', 'TRIAL', 'TRIBE', 'TRICE', 'TRICK', 'TRIDE', 'TRIED', 'TRIER', 'TRIES', 'TRIFA', 'TRIFF', 'TRIGO', 'TRIGS', 'TRIKE', 'TRILD', 'TRILL', 'TRIMS', 'TRINE', 'TRINS', 'TRIOL', 'TRIOR', 'TRIOS', 'TRIPE', 'TRIPS', 'TRIPY', 'TRIST', 'TRITE', 'TROAD', 'TROAK', 'TROAT', 'TROCK', 'TRODE', 'TRODS', 'TROGS', 'TROIS', 'TROKE', 'TROLL', 'TROMP', 'TRONA', 'TRONC', 'TRONE', 'TRONK', 'TRONS', 'TROOP', 'TROOZ', 'TROPE', 'TROPO', 'TROTH', 'TROTS', 'TROUT', 'TROVE', 'TROWS', 'TROYS', 'TRUCE', 'TRUCK', 'TRUED', 'TRUER', 'TRUES', 'TRUGO', 'TRUGS', 'TRULL', 'TRULY', 'TRUMP', 'TRUNK', 'TRUSS', 'TRUST', 'TRUTH', 'TRYER', 'TRYKE', 'TRYMA', 'TRYPS', 'TRYST', 'TSADE', 'TSADI', 'TSARS', 'TSKED', 'TSUBA', 'TSUBO', 'TUANS', 'TUART', 'TUATH', 'TUBAE', 'TUBAL', 'TUBAR', 'TUBAS', 'TUBBY', 'TUBED', 'TUBER', 'TUBES', 'TUCKS', 'TUFAS', 'TUFFE', 'TUFFS', 'TUFTS', 'TUFTY', 'TUGRA', 'TUILE', 'TUINA', 'TUISM', 'TUKTU', 'TULES', 'TULIP', 'TULLE', 'TULPA', 'TULPS', 'TULSI', 'TUMID', 'TUMMY', 'TUMOR', 'TUMPS', 'TUMPY', 'TUNAS', 'TUNDS', 'TUNED', 'TUNER', 'TUNES', 'TUNGS', 'TUNIC', 'TUNNY', 'TUPEK', 'TUPIK', 'TUPLE', 'TUQUE', 'TURBO', 'TURDS', 'TURFS', 'TURFY', 'TURKS', 'TURME', 'TURMS', 'TURNS', 'TURNT', 'TURON', 'TURPS', 'TURRS', 'TUSHY', 'TUSKS', 'TUSKY', 'TUTEE', 'TUTES', 'TUTOR', 'TUTTI', 'TUTTY', 'TUTUS', 'TUXES', 'TUYER', 'TWAES', 'TWAIN', 'TWALS', 'TWANG', 'TWANK', 'TWATS', 'TWAYS', 'TWEAK', 'TWEED', 'TWEEL', 'TWEEN', 'TWEEP', 'TWEER', 'TWEET', 'TWERK', 'TWERP', 'TWICE', 'TWIER', 'TWIGS', 'TWILL', 'TWILT', 'TWINE', 'TWINK', 'TWINS', 'TWINY', 'TWIRE', 'TWIRK', 'TWIRL', 'TWIRP', 'TWIST', 'TWITE', 'TWITS', 'TWIXT', 'TWOCS', 'TWOER', 'TWONK', 'TWYER', 'TYEES', 'TYERS', 'TYING', 'TYIYN', 'TYKES', 'TYLER', 'TYMPS', 'TYNDE', 'TYNED', 'TYNES', 'TYPAL', 'TYPED', 'TYPES', 'TYPEY', 'TYPIC', 'TYPOS', 'TYPPS', 'TYPTO', 'TYRAN', 'TYRED', 'TYRES', 'TYROS', 'TYTHE', 'TZARS', 'UBACS', 'UBITY', 'UDALS', 'UDDER', 'UDONS', 'UDYOG', 'UGALI', 'UGGED', 'UHLAN', 'UHURU', 'UKASE', 'ULAMA', 'ULANS', 'ULCER', 'ULEMA', 'ULMIN', 'ULMOS', 'ULNAD', 'ULNAE', 'ULNAR', 'ULNAS', 'ULPAN', 'ULTRA', 'ULVAS', 'ULYIE', 'ULZIE', 'UMAMI', 'UMBEL', 'UMBER', 'UMBLE', 'UMBOS', 'UMBRA', 'UMBRE', 'UMIAC', 'UMIAK', 'UMIAQ', 'UMMAH', 'UMMAS', 'UMMED', 'UMPED', 'UMPHS', 'UMPIE', 'UMPTY', 'UMRAH', 'UMRAS', 'UNAGI', 'UNAIS', 'UNAPT', 'UNARM', 'UNARY', 'UNAUS', 'UNBAG', 'UNBAN', 'UNBAR', 'UNBED', 'UNBID', 'UNBOX', 'UNCAP', 'UNCES', 'UNCIA', 'UNCLE', 'UNCOS', 'UNCOY', 'UNCUS', 'UNCUT', 'UNDAM', 'UNDEE', 'UNDER', 'UNDID', 'UNDOS', 'UNDUE', 'UNDUG', 'UNETH', 'UNFED', 'UNFIT', 'UNFIX', 'UNGAG', 'UNGET', 'UNGOD', 'UNGOT', 'UNGUM', 'UNHAT', 'UNHIP', 'UNICA', 'UNIFY', 'UNION', 'UNIOS', 'UNITE', 'UNITS', 'UNITY', 'UNJAM', 'UNKED', 'UNKET', 'UNKEY', 'UNKID', 'UNKUT', 'UNLAP', 'UNLAW', 'UNLAY', 'UNLED', 'UNLEG', 'UNLET', 'UNLID', 'UNLIT', 'UNMAD', 'UNMAN', 'UNMET', 'UNMEW', 'UNMIX', 'UNODE', 'UNOLD', 'UNOWN', 'UNPAY', 'UNPEG', 'UNPEN', 'UNPIN', 'UNPLY', 'UNPOT', 'UNPUT', 'UNRED', 'UNRID', 'UNRIG', 'UNRIP', 'UNSAW', 'UNSAY', 'UNSEE', 'UNSET', 'UNSEW', 'UNSEX', 'UNSOD', 'UNSUB', 'UNTAG', 'UNTAX', 'UNTIE', 'UNTIL', 'UNTIN', 'UNWED', 'UNWET', 'UNWIT', 'UNWON', 'UNZIP', 'UPBOW', 'UPBYE', 'UPDOS', 'UPDRY', 'UPEND', 'UPFUL', 'UPJET', 'UPLAY', 'UPLED', 'UPLIT', 'UPPED', 'UPPER', 'UPRAN', 'UPRUN', 'UPSEE', 'UPSET', 'UPSEY', 'UPTAK', 'UPTER', 'UPTIE', 'URAEI', 'URALI', 'URAOS', 'URARE', 'URARI', 'URASE', 'URATE', 'URBAN', 'URBEX', 'URBIA', 'URDEE', 'UREAL', 'UREAS', 'UREDO', 'UREIC', 'UREID', 'URENA', 'URENT', 'URGED', 'URGER', 'URGES', 'URIAL', 'URINE', 'URITE', 'URMAN', 'URNAL', 'URNED', 'URPED', 'URSAE', 'URSID', 'URSON', 'URUBU', 'URUPA', 'URVAS', 'USAGE', 'USENS', 'USERS', 'USETA', 'USHER', 'USING', 'USNEA', 'USNIC', 'USQUE', 'USTAD', 'USTER', 'USUAL', 'USURE', 'USURP', 'USURY', 'UTERI', 'UTERO', 'UTILE', 'UTTER', 'UVEAL', 'UVEAS', 'UVULA', 'VACAS', 'VACAY', 'VACUA', 'VACUI', 'VACUO', 'VADAS', 'VADED', 'VADES', 'VADGE', 'VAGAL', 'VAGUE', 'VAGUS', 'VAIDS', 'VAILS', 'VAIRE', 'VAIRS', 'VAIRY', 'VAJRA', 'VAKAS', 'VAKIL', 'VALES', 'VALET', 'VALID', 'VALIS', 'VALLI', 'VALOR', 'VALSE', 'VALUE', 'VALVE', 'VAMPS', 'VAMPY', 'VANDA', 'VANED', 'VANES', 'VANGA', 'VANGS', 'VANTS', 'VAPED', 'VAPER', 'VAPES', 'VAPID', 'VAPOR', 'VARAN', 'VARAS', 'VARDA', 'VARDO', 'VARDY', 'VAREC', 'VARES', 'VARIA', 'VARIX', 'VARNA', 'VARUS', 'VARVE', 'VASAL', 'VASES', 'VASTS', 'VASTY', 'VATAS', 'VATHA', 'VATIC', 'VATJE', 'VATOS', 'VATUS', 'VAUCH', 'VAULT', 'VAUNT', 'VAUTE', 'VAUTS', 'VAWTE', 'VAXES', 'VEALE', 'VEALS', 'VEALY', 'VEENA', 'VEEPS', 'VEERS', 'VEERY', 'VEGAN', 'VEGAS', 'VEGES', 'VEGGO', 'VEGIE', 'VEGOS', 'VEHME', 'VEILS', 'VEILY', 'VEINS', 'VEINY', 'VELAR', 'VELDS', 'VELDT', 'VELES', 'VELLS', 'VELUM', 'VENAE', 'VENAL', 'VENAS', 'VENDS', 'VENDU', 'VENEY', 'VENGE', 'VENIN', 'VENOM', 'VENTI', 'VENTS', 'VENUE', 'VENUS', 'VERBA', 'VERBS', 'VERDE', 'VERGE', 'VERRA', 'VERRE', 'VERRY', 'VERSA', 'VERSE', 'VERSO', 'VERST', 'VERTE', 'VERTS', 'VERTU', 'VERVE', 'VESPA', 'VESTA', 'VESTS', 'VETCH', 'VEUVE', 'VEVES', 'VEXED', 'VEXER', 'VEXES', 'VEXIL', 'VEZIR', 'VIALS', 'VIAND', 'VIBED', 'VIBES', 'VIBEX', 'VIBEY', 'VICAR', 'VICED', 'VICES', 'VICHY', 'VICUS', 'VIDEO', 'VIERS', 'VIEUX', 'VIEWS', 'VIEWY', 'VIFDA', 'VIFFS', 'VIGAS', 'VIGIA', 'VIGIL', 'VIGOR', 'VILDE', 'VILER', 'VILLA', 'VILLE', 'VILLI', 'VILLS', 'VIMEN', 'VINAL', 'VINAS', 'VINCA', 'VINED', 'VINER', 'VINES', 'VINEW', 'VINHO', 'VINIC', 'VINNY', 'VINOS', 'VINTS', 'VINYL', 'VIOLA', 'VIOLD', 'VIOLS', 'VIPER', 'VIRAL', 'VIRED', 'VIREO', 'VIRES', 'VIRGA', 'VIRGE', 'VIRGO', 'VIRID', 'VIRLS', 'VIRTU', 'VIRUS', 'VISAS', 'VISED', 'VISES', 'VISIE', 'VISIT', 'VISNA', 'VISNE', 'VISON', 'VISOR', 'VISTA', 'VISTO', 'VITAE', 'VITAL', 'VITAS', 'VITEX', 'VITRO', 'VITTA', 'VIVAS', 'VIVAT', 'VIVDA', 'VIVER', 'VIVES', 'VIVID', 'VIVOS', 'VIVRE', 'VIXEN', 'VIZIR', 'VIZOR', 'VLAST', 'VLEIS', 'VLIES', 'VLOGS', 'VOARS', 'VOBLA', 'VOCAB', 'VOCAL', 'VOCES', 'VODDY', 'VODKA', 'VODOU', 'VODUN', 'VOEMA', 'VOGIE', 'VOGUE', 'VOICE', 'VOICI', 'VOIDS', 'VOILA', 'VOILE', 'VOIPS', 'VOLAE', 'VOLAR', 'VOLED', 'VOLES', 'VOLET', 'VOLKE', 'VOLKS', 'VOLTA', 'VOLTE', 'VOLTI', 'VOLTS', 'VOLVA', 'VOLVE', 'VOMER', 'VOMIT', 'VOTED', 'VOTER', 'VOTES', 'VOUCH', 'VOUGE', 'VOULU', 'VOWED', 'VOWEL', 'VOWER', 'VOXEL', 'VOXES', 'VOZHD', 'VRAIC', 'VRILS', 'VROOM', 'VROUS', 'VROUW', 'VROWS', 'VUGGS', 'VUGGY', 'VUGHS', 'VUGHY', 'VULGO', 'VULNS', 'VULVA', 'VUTTY', 'VYGIE', 'VYING', 'WAACS', 'WACKE', 'WACKO', 'WACKS', 'WACKY', 'WADAS', 'WADDS', 'WADDY', 'WADED', 'WADER', 'WADES', 'WADGE', 'WADIS', 'WADTS', 'WAFER', 'WAFFS', 'WAFTS', 'WAGED', 'WAGER', 'WAGES', 'WAGGA', 'WAGON', 'WAGYU', 'WAHAY', 'WAHEY', 'WAHOO', 'WAIDE', 'WAIFS', 'WAIFT', 'WAILS', 'WAINS', 'WAIRS', 'WAIST', 'WAITE', 'WAITS', 'WAIVE', 'WAKAS', 'WAKED', 'WAKEN', 'WAKER', 'WAKES', 'WAKFS', 'WALDO', 'WALDS', 'WALED', 'WALER', 'WALES', 'WALIE', 'WALIS', 'WALKS', 'WALLA', 'WALLS', 'WALLY', 'WALTY', 'WALTZ', 'WAMED', 'WAMES', 'WAMUS', 'WANDS', 'WANED', 'WANES', 'WANEY', 'WANGS', 'WANKS', 'WANKY', 'WANLE', 'WANLY', 'WANNA', 'WANTA', 'WANTS', 'WANTY', 'WANZE', 'WAQFS', 'WARBS', 'WARBY', 'WARDS', 'WARED', 'WARES', 'WAREZ', 'WARKS', 'WARMS', 'WARNS', 'WARPS', 'WARRE', 'WARST', 'WARTS', 'WARTY', 'WASES', 'WASHI', 'WASHY', 'WASMS', 'WASPS', 'WASPY', 'WASTE', 'WASTS', 'WATAP', 'WATCH', 'WATER', 'WATTS', 'WAUFF', 'WAUGH', 'WAUKS', 'WAULK', 'WAULS', 'WAURS', 'WAVED', 'WAVER', 'WAVES', 'WAVEY', 'WAWAS', 'WAWES', 'WAWLS', 'WAXED', 'WAXEN', 'WAXER', 'WAXES', 'WAYED', 'WAZIR', 'WAZOO', 'WEALD', 'WEALS', 'WEAMB', 'WEANS', 'WEARS', 'WEARY', 'WEAVE', 'WEBBY', 'WEBER', 'WECHT', 'WEDEL', 'WEDGE', 'WEDGY', 'WEEDS', 'WEEDY', 'WEEIS', 'WEEKE', 'WEEKS', 'WEELS', 'WEEMS', 'WEENS', 'WEENY', 'WEEPS', 'WEEPY', 'WEEST', 'WEETE', 'WEETS', 'WEFTE', 'WEFTS', 'WEIDS', 'WEIGH', 'WEILS', 'WEIRD', 'WEIRS', 'WEISE', 'WEIZE', 'WEKAS', 'WELCH', 'WELDS', 'WELKE', 'WELKS', 'WELKT', 'WELLS', 'WELLY', 'WELSH', 'WELTS', 'WEMBS', 'WENCH', 'WENDS', 'WENGE', 'WENNY', 'WENTS', 'WERFS', 'WEROS', 'WERSH', 'WESTS', 'WETAS', 'WETLY', 'WEXED', 'WEXES', 'WHACK', 'WHALE', 'WHAMO', 'WHAMS', 'WHANG', 'WHAPS', 'WHARE', 'WHARF', 'WHATA', 'WHATS', 'WHAUP', 'WHAUR', 'WHEAL', 'WHEAR', 'WHEAT', 'WHEEK', 'WHEEL', 'WHEEN', 'WHEEP', 'WHEFT', 'WHELK', 'WHELM', 'WHELP', 'WHENS', 'WHERE', 'WHETS', 'WHEWS', 'WHEYS', 'WHICH', 'WHIDS', 'WHIES', 'WHIFF', 'WHIFT', 'WHIGS', 'WHILE', 'WHILK', 'WHIMS', 'WHINE', 'WHINS', 'WHINY', 'WHIOS', 'WHIPS', 'WHIPT', 'WHIRL', 'WHIRR', 'WHIRS', 'WHISH', 'WHISK', 'WHISS', 'WHIST', 'WHITE', 'WHITS', 'WHITY', 'WHIZZ', 'WHOLE', 'WHOMP', 'WHOOF', 'WHOOP', 'WHOOT', 'WHOPS', 'WHORE', 'WHORL', 'WHORT', 'WHOSE', 'WHOSO', 'WHOWS', 'WHUMP', 'WHUPS', 'WHYDA', 'WICCA', 'WICKS', 'WICKY', 'WIDDY', 'WIDEN', 'WIDER', 'WIDES', 'WIDOW', 'WIDTH', 'WIELD', 'WIELS', 'WIFED', 'WIFES', 'WIFEY', 'WIFIE', 'WIFTS', 'WIFTY', 'WIGAN', 'WIGGA', 'WIGGY', 'WIGHT', 'WIKIS', 'WILCO', 'WILDS', 'WILED', 'WILES', 'WILGA', 'WILIS', 'WILJA', 'WILLS', 'WILLY', 'WILTS', 'WIMPS', 'WIMPY', 'WINCE', 'WINCH', 'WINDS', 'WINDY', 'WINED', 'WINES', 'WINEY', 'WINGE', 'WINGS', 'WINGY', 'WINKS', 'WINKY', 'WINNA', 'WINNS', 'WINOS', 'WINZE', 'WIPED', 'WIPER', 'WIPES', 'WIRED', 'WIRER', 'WIRES', 'WIRRA', 'WIRRI', 'WISED', 'WISER', 'WISES', 'WISHA', 'WISHT', 'WISPS', 'WISPY', 'WISTS', 'WITAN', 'WITCH', 'WITED', 'WITES', 'WITHE', 'WITHS', 'WITHY', 'WITTY', 'WIVED', 'WIVER', 'WIVES', 'WIZEN', 'WIZES', 'WIZZO', 'WOADS', 'WOADY', 'WOALD', 'WOCKS', 'WODGE', 'WODGY', 'WOFUL', 'WOJUS', 'WOKEN', 'WOKER', 'WOKKA', 'WOLDS', 'WOLFS', 'WOLLY', 'WOLVE', 'WOMAN', 'WOMAS', 'WOMBS', 'WOMBY', 'WOMEN', 'WOMYN', 'WONGA', 'WONGI', 'WONKS', 'WONKY', 'WONTS', 'WOODS', 'WOODY', 'WOOED', 'WOOER', 'WOOFS', 'WOOFY', 'WOOLD', 'WOOLS', 'WOOLY', 'WOONS', 'WOOPS', 'WOOPY', 'WOOSE', 'WOOSH', 'WOOTZ', 'WOOZY', 'WORDS', 'WORDY', 'WORKS', 'WORKY', 'WORLD', 'WORMS', 'WORMY', 'WORRY', 'WORSE', 'WORST', 'WORTH', 'WORTS', 'WOULD', 'WOUND', 'WOVEN', 'WOWED', 'WOWEE', 'WOWSE', 'WOXEN', 'WRACK', 'WRANG', 'WRAPS', 'WRAPT', 'WRAST', 'WRATE', 'WRATH', 'WRAWL', 'WREAK', 'WRECK', 'WRENS', 'WREST', 'WRICK', 'WRIED', 'WRIER', 'WRIES', 'WRING', 'WRIST', 'WRITE', 'WRITS', 'WROKE', 'WRONG', 'WROOT', 'WROTE', 'WROTH', 'WRUNG', 'WRYER', 'WRYLY', 'WUDDY', 'WUDUS', 'WUFFS', 'WULLS', 'WUNGA', 'WURST', 'WUSES', 'WUSHU', 'WUSSY', 'WUXIA', 'WYLED', 'WYLES', 'WYNDS', 'WYNNS', 'WYTED', 'WYTES', 'WYTHE', 'XEBEC', 'XENIA', 'XENIC', 'XENON', 'XERIC', 'XEROX', 'XERUS', 'XOANA', 'XOLOS', 'XRAYS', 'XVIII', 'XYLAN', 'XYLEM', 'XYLIC', 'XYLOL', 'XYLYL', 'XYSTI', 'XYSTS', 'YAARS', 'YAASS', 'YABAS', 'YABBA', 'YABBY', 'YACCA', 'YACHT', 'YACKA', 'YACKS', 'YADDA', 'YAFFS', 'YAGER', 'YAGES', 'YAGIS', 'YAGNA', 'YAHOO', 'YAIRD', 'YAJNA', 'YAKKA', 'YAKOW', 'YALES', 'YAMEN', 'YAMPA', 'YAMPY', 'YAMUN', 'YANDY', 'YANGS', 'YANKS', 'YAPOK', 'YAPON', 'YAPPS', 'YAPPY', 'YARAK', 'YARCO', 'YARDS', 'YARER', 'YARFA', 'YARKS', 'YARNS', 'YARRA', 'YARRS', 'YARTA', 'YARTO', 'YATES', 'YATRA', 'YAUDS', 'YAULD', 'YAUPS', 'YAWED', 'YAWEY', 'YAWLS', 'YAWNS', 'YAWNY', 'YAWPS', 'YAYAS', 'YBORE', 'YCLAD', 'YCLED', 'YCOND', 'YDRAD', 'YDRED', 'YEADS', 'YEAHS', 'YEALM', 'YEANS', 'YEARD', 'YEARN', 'YEARS', 'YEAST', 'YECCH', 'YECHS', 'YECHY', 'YEDES', 'YEEDS', 'YEEEK', 'YEESH', 'YEGGS', 'YELKS', 'YELLS', 'YELMS', 'YELPS', 'YELTS', 'YENTA', 'YENTE', 'YERBA', 'YERDS', 'YERKS', 'YESES', 'YESKS', 'YESTS', 'YESTY', 'YETIS', 'YETTS', 'YEUCH', 'YEUKS', 'YEUKY', 'YEVEN', 'YEVES', 'YEWEN', 'YEXED', 'YEXES', 'YFERE', 'YIELD', 'YIKED', 'YIKES', 'YILLS', 'YINCE', 'YIPES', 'YIPPY', 'YIRDS', 'YIRKS', 'YIRRS', 'YIRTH', 'YITES', 'YITIE', 'YLEMS', 'YLIDE', 'YLIDS', 'YLIKE', 'YLKES', 'YMOLT', 'YMPES', 'YOBBO', 'YOBBY', 'YOCKS', 'YODEL', 'YODHS', 'YODLE', 'YOGAS', 'YOGEE', 'YOGHS', 'YOGIC', 'YOGIN', 'YOGIS', 'YOHAH', 'YOHAY', 'YOICK', 'YOJAN', 'YOKAN', 'YOKED', 'YOKEG', 'YOKEL', 'YOKER', 'YOKES', 'YOKUL', 'YOLKS', 'YOLKY', 'YOLPS', 'YOMIM', 'YOMPS', 'YONIC', 'YONIS', 'YONKS', 'YONNY', 'YOOFS', 'YOOPS', 'YOPOS', 'YOPPO', 'YORES', 'YORGA', 'YORKS', 'YORPS', 'YOUKS', 'YOUNG', 'YOURN', 'YOURS', 'YOURT', 'YOUSE', 'YOUTH', 'YOWED', 'YOWES', 'YOWIE', 'YOWLS', 'YOWSA', 'YOWZA', 'YOYOS', 'YRAPT', 'YRENT', 'YRIVD', 'YRNEH', 'YSAME', 'YTOST', 'YUANS', 'YUCAS', 'YUCCA', 'YUCCH', 'YUCKO', 'YUCKS', 'YUCKY', 'YUFTS', 'YUGAS', 'YUKED', 'YUKES', 'YUKKY', 'YUKOS', 'YULAN', 'YULES', 'YUMMO', 'YUMMY', 'YUMPS', 'YUPON', 'YUPPY', 'YURTA', 'YURTS', 'YUZUS', 'ZABRA', 'ZACKS', 'ZAIDA', 'ZAIDE', 'ZAIDY', 'ZAIRE', 'ZAKAT', 'ZAMAC', 'ZAMAK', 'ZAMAN', 'ZAMBO', 'ZAMIA', 'ZAMIS', 'ZANJA', 'ZANTE', 'ZANZA', 'ZANZE', 'ZAPPY', 'ZARDA', 'ZARFS', 'ZARIS', 'ZATIS', 'ZAWNS', 'ZAXES', 'ZAYDE', 'ZAYIN', 'ZAZEN', 'ZEALS', 'ZEBEC', 'ZEBRA', 'ZEBUB', 'ZEBUS', 'ZEDAS', 'ZEERA', 'ZEINS', 'ZENDO', 'ZERDA', 'ZERKS', 'ZEROS', 'ZESTS', 'ZESTY', 'ZETAS', 'ZEXES', 'ZEZES', 'ZHOMO', 'ZHUSH', 'ZHUZH', 'ZIBET', 'ZIFFS', 'ZIGAN', 'ZIKRS', 'ZILAS', 'ZILCH', 'ZILLA', 'ZILLS', 'ZIMBI', 'ZIMBS', 'ZINCO', 'ZINCS', 'ZINCY', 'ZINEB', 'ZINES', 'ZINGS', 'ZINGY', 'ZINKE', 'ZINKY', 'ZINOS', 'ZIPPO', 'ZIPPY', 'ZIRAM', 'ZITIS', 'ZITTY', 'ZIZEL', 'ZIZIT', 'ZLOTE', 'ZLOTY', 'ZOAEA', 'ZOBOS', 'ZOBUS', 'ZOCCO', 'ZOEAE', 'ZOEAL', 'ZOEAS', 'ZOISM', 'ZOIST', 'ZOKOR', 'ZOLLE', 'ZOMBI', 'ZONAE', 'ZONAL', 'ZONDA', 'ZONED', 'ZONER', 'ZONES', 'ZONKS', 'ZOOEA', 'ZOOEY', 'ZOOID', 'ZOOKS', 'ZOOMS', 'ZOOMY', 'ZOONS', 'ZOOTY', 'ZOPPA', 'ZOPPO', 'ZORIL', 'ZORIS', 'ZORRO', 'ZORSE', 'ZOUKS', 'ZOWEE', 'ZOWIE', 'ZULUS', 'ZUPAN', 'ZUPAS', 'ZUPPA', 'ZURFS', 'ZUZIM', 'ZYGAL', 'ZYGON', 'ZYMES', 'ZYMIC'
];
const aryAllAnswersOrdered = [
  'CIGAR', 'REBUT', 'SISSY', 'HUMPH', 'AWAKE', 'BLUSH', 'FOCAL', 'EVADE', 'NAVAL', 'SERVE', 'HEATH', 'DWARF', 'MODEL', 'KARMA', 'STINK', 'GRADE', 'QUIET', 'BENCH', 'ABATE', 'FEIGN', 'MAJOR', 'DEATH', 'FRESH', 'CRUST', 'STOOL', 'COLON', 'ABASE', 'MARRY', 'REACT', 'BATTY', 'PRIDE', 'FLOSS', 'HELIX', 'CROAK', 'STAFF', 'PAPER', 'UNFED', 'WHELP', 'TRAWL', 'OUTDO', 'ADOBE', 'CRAZY', 'SOWER', 'REPAY', 'DIGIT', 'CRATE', 'CLUCK', 'SPIKE', 'MIMIC', 'POUND', 'MAXIM', 'LINEN', 'UNMET', 'FLESH', 'BOOBY', 'FORTH', 'FIRST', 'STAND', 'BELLY', 'IVORY', 'SEEDY', 'PRINT', 'YEARN', 'DRAIN', 'BRIBE', 'STOUT', 'PANEL', 'CRASS', 'FLUME', 'OFFAL', 'AGREE', 'ERROR', 'SWIRL', 'ARGUE', 'BLEED', 'DELTA', 'FLICK', 'TOTEM', 'WOOER', 'FRONT', 'SHRUB', 'PARRY', 'BIOME', 'LAPEL', 'START', 'GREET', 'GONER', 'GOLEM', 'LUSTY', 'LOOPY', 'ROUND', 'AUDIT', 'LYING', 'GAMMA', 'LABOR', 'ISLET', 'CIVIC', 'FORGE', 'CORNY', 'MOULT', 'BASIC', 'SALAD', 'AGATE', 'SPICY', 'SPRAY', 'ESSAY', 'FJORD', 'SPEND', 'KEBAB', 'GUILD', 'ABACK', 'MOTOR', 'ALONE', 'HATCH', 'HYPER', 'THUMB', 'DOWRY', 'OUGHT', 'BELCH', 'DUTCH', 'PILOT', 'TWEED', 'COMET', 'JAUNT', 'ENEMA', 'STEED', 'ABYSS', 'GROWL', 'FLING', 'DOZEN', 'BOOZY', 'ERODE', 'WORLD', 'GOUGE', 'CLICK', 'BRIAR', 'GREAT', 'ALTAR', 'PULPY', 'BLURT', 'COAST', 'DUCHY', 'GROIN', 'FIXER', 'GROUP', 'ROGUE', 'BADLY', 'SMART', 'PITHY', 'GAUDY', 'CHILL', 'HERON', 'VODKA', 'FINER', 'SURER', 'RADIO', 'ROUGE', 'PERCH', 'RETCH', 'WROTE', 'CLOCK', 'TILDE', 'STORE', 'PROVE', 'BRING', 'SOLVE', 'CHEAT', 'GRIME', 'EXULT', 'USHER', 'EPOCH', 'TRIAD', 'BREAK', 'RHINO', 'VIRAL', 'CONIC', 'MASSE', 'SONIC', 'VITAL', 'TRACE', 'USING', 'PEACH', 'CHAMP', 'BATON', 'BRAKE', 'PLUCK', 'CRAZE', 'GRIPE', 'WEARY', 'PICKY', 'ACUTE', 'FERRY', 'ASIDE', 'TAPIR', 'TROLL', 'UNIFY', 'REBUS', 'BOOST', 'TRUSS', 'SIEGE', 'TIGER', 'BANAL', 'SLUMP', 'CRANK', 'GORGE', 'QUERY', 'DRINK', 'FAVOR', 'ABBEY', 'TANGY', 'PANIC', 'SOLAR', 'SHIRE', 'PROXY', 'POINT', 'ROBOT', 'PRICK', 'WINCE', 'CRIMP', 'KNOLL', 'SUGAR', 'WHACK', 'MOUNT', 'PERKY', 'COULD', 'WRUNG', 'LIGHT', 'THOSE', 'MOIST', 'SHARD', 'PLEAT', 'ALOFT', 'SKILL', 'ELDER', 'FRAME', 'HUMOR', 'PAUSE', 'ULCER', 'ULTRA', 'ROBIN', 'CYNIC', 'AROMA', 'CAULK', 'SHAKE', 'DODGE', 'SWILL', 'TACIT', 'OTHER', 'THORN', 'TROVE', 'BLOKE', 'VIVID', 'SPILL', 'CHANT', 'CHOKE', 'RUPEE', 'NASTY', 'MOURN', 'AHEAD', 'BRINE', 'CLOTH', 'HOARD', 'SWEET', 'MONTH', 'LAPSE', 'WATCH', 'TODAY', 'FOCUS', 'SMELT', 'TEASE', 'CATER', 'MOVIE', 'SAUTE', 'ALLOW', 'RENEW', 'THEIR', 'SLOSH', 'PURGE', 'CHEST', 'DEPOT', 'EPOXY', 'NYMPH', 'FOUND', 'SHALL', 'STOVE', 'LOWLY', 'SNOUT', 'TROPE', 'FEWER', 'SHAWL', 'NATAL', 'COMMA', 'FORAY', 'SCARE', 'STAIR', 'BLACK', 'SQUAD', 'ROYAL', 'CHUNK', 'MINCE', 'SHAME', 'CHEEK', 'AMPLE', 'FLAIR', 'FOYER', 'CARGO', 'OXIDE', 'PLANT', 'OLIVE', 'INERT', 'ASKEW', 'HEIST', 'SHOWN', 'ZESTY', 'TRASH', 'LARVA', 'FORGO', 'STORY', 'HAIRY', 'TRAIN', 'HOMER', 'BADGE', 'MIDST', 'CANNY', 'SHINE', 'GECKO', 'FARCE', 'SLUNG', 'TIPSY', 'METAL', 'YIELD', 'DELVE', 'BEING', 'SCOUR', 'GLASS', 'GAMER', 'SCRAP', 'MONEY', 'HINGE', 'ALBUM', 'VOUCH', 'ASSET', 'TIARA', 'CREPT', 'BAYOU', 'ATOLL', 'MANOR', 'CREAK', 'SHOWY', 'PHASE', 'FROTH', 'DEPTH', 'GLOOM', 'FLOOD', 'TRAIT', 'GIRTH', 'PIETY', 'GOOSE', 'FLOAT', 'DONOR', 'ATONE', 'PRIMO', 'APRON', 'BLOWN', 'CACAO', 'LOSER', 'INPUT', 'GLOAT', 'AWFUL', 'BRINK', 'SMITE', 'BEADY', 'RUSTY', 'RETRO', 'DROLL', 'GAWKY', 'HUTCH', 'PINTO', 'EGRET', 'LILAC', 'SEVER', 'FIELD', 'FLUFF', 'AGAPE', 'VOICE', 'STEAD', 'BERTH', 'MADAM', 'NIGHT', 'BLAND', 'LIVER', 'WEDGE', 'ROOMY', 'WACKY', 'FLOCK', 'ANGRY', 'TRITE', 'APHID', 'TRYST', 'MIDGE', 'POWER', 'ELOPE', 'CINCH', 'MOTTO', 'STOMP', 'UPSET', 'BLUFF', 'CRAMP', 'QUART', 'COYLY', 'YOUTH', 'RHYME', 'BUGGY', 'ALIEN', 'SMEAR', 'UNFIT', 'PATTY', 'CLING', 'GLEAN', 'LABEL', 'HUNKY', 'KHAKI', 'POKER', 'GRUEL', 'TWICE', 'TWANG', 'SHRUG', 'TREAT', 'WASTE', 'MERIT', 'WOVEN', 'NEEDY', 'CLOWN', 'IRONY', 'RUDER', 'GAUZE', 'CHIEF', 'ONSET', 'PRIZE', 'FUNGI', 'CHARM', 'GULLY', 'INTER', 'WHOOP', 'TAUNT', 'LEERY', 'CLASS', 'THEME', 'LOFTY', 'TIBIA', 'BOOZE', 'ALPHA', 'THYME', 'DOUBT', 'PARER', 'CHUTE', 'STICK', 'TRICE', 'ALIKE', 'RECAP', 'SAINT', 'GLORY', 'GRATE', 'ADMIT', 'BRISK', 'SOGGY', 'USURP', 'SCALD', 'SCORN', 'LEAVE', 'TWINE', 'STING', 'BOUGH', 'MARSH', 'SLOTH', 'DANDY', 'VIGOR', 'HOWDY', 'ENJOY', 'VALID', 'IONIC', 'EQUAL', 'FLOOR', 'CATCH', 'SPADE', 'STEIN', 'EXIST', 'QUIRK', 'DENIM', 'GROVE', 'SPIEL', 'MUMMY', 'FAULT', 'FOGGY', 'FLOUT', 'CARRY', 'SNEAK', 'LIBEL', 'WALTZ', 'APTLY', 'PINEY', 'INEPT', 'ALOUD', 'PHOTO', 'DREAM', 'STALE', 'BEGIN', 'SPELL', 'RAINY', 'UNITE', 'MEDAL', 'VALET', 'INANE', 'MAPLE', 'SNARL', 'BAKER', 'THERE', 'GLYPH', 'AVERT', 'BRAVE', 'AXIOM', 'PRIME', 'DRIVE', 'FEAST', 'ITCHY', 'CLEAN', 'HAPPY', 'TEPID', 'UNDUE', 'STUDY', 'EJECT', 'CHAFE', 'TORSO', 'ADORE', 'WOKEN', 'AMBER', 'JOUST', 'INFER', 'BRAID', 'KNOCK', 'NAIVE', 'APPLY', 'SPOKE', 'USUAL', 'RIVAL', 'PROBE', 'CHORD', 'TAPER', 'SLATE', 'THIRD', 'LUNAR', 'EXCEL', 'AORTA', 'POISE', 'EXTRA', 'JUDGE', 'CONDO', 'IMPEL', 'HAVOC', 'MOLAR', 'MANLY', 'WHINE', 'SKIRT', 'ANTIC', 'LAYER', 'SLEEK', 'BELIE', 'LEMON', 'OPERA', 'PIXIE', 'GRIMY', 'SEDAN', 'LEAPT', 'HUMAN', 'KOALA', 'SPIRE', 'FROCK', 'ADOPT', 'CHARD', 'MUCKY', 'ALTER', 'BLURB', 'MATEY', 'ELUDE', 'COUNT', 'MAIZE', 'BEEFY', 'WORRY', 'FLIRT', 'FISHY', 'CRAVE', 'CROSS', 'SCOLD', 'SHIRK', 'TASTY', 'UNLIT', 'DANCE', 'NINTH', 'APPLE', 'FLAIL', 'STAGE', 'HEADY', 'DEBUG', 'GIANT', 'USAGE', 'SOUND', 'SALSA', 'MAGIC', 'CACHE', 'AVAIL', 'KIOSK', 'SWEAT', 'RUDDY', 'RIPER', 'VAGUE', 'ARBOR', 'FIFTY', 'SYRUP', 'WORSE', 'POLKA', 'MOOSE', 'ABOVE', 'SQUAT', 'TREND', 'TOXIC', 'PINKY', 'HORSE', 'REGAL', 'WHERE', 'REVEL', 'EMAIL', 'BIRTH', 'BLAME', 'SURLY', 'SWEEP', 'CIDER', 'MEALY', 'YACHT', 'CREDO', 'GLOVE', 'TOUGH', 'DUVET', 'STAID', 'GROUT', 'VOTER', 'UNTIE', 'GUANO', 'HURRY', 'BESET', 'BREAD', 'EVERY', 'MARCH', 'STOCK', 'FLORA', 'RATIO', 'SMASH', 'LEAFY', 'LOCUS', 'LEDGE', 'SNAFU', 'UNDER', 'QUALM', 'BORAX', 'CARAT', 'THIEF', 'AGONY', 'DWELT', 'WHIFF', 'HOUND', 'THUMP', 'PLATE', 'KAYAK', 'BROKE', 'UNZIP', 'DITTO', 'JOKER', 'METRO', 'LOGIC', 'CIRCA', 'CEDAR', 'PLAZA', 'RANGE', 'SULKY', 'HORDE', 'GUPPY', 'BELOW', 'ANGER', 'GHOUL', 'AGLOW', 'COCOA', 'ETHIC', 'BROOM', 'SNACK', 'ACRID', 'SCARF', 'CANOE', 'LATTE', 'PLANK', 'SHORN', 'GRIEF', 'FLASK', 'BRASH', 'IGLOO', 'CLERK', 'UTTER', 'BAGEL', 'SWINE', 'RAMEN', 'SKIMP', 'MOUSE', 'KNEEL', 'AGILE', 'JAZZY', 'HUMID', 'NANNY', 'BEAST', 'ENNUI', 'SCOUT', 'HATER', 'CRUMB', 'BALSA', 'AGAIN', 'GUARD', 'WRONG', 'PLUNK', 'CRIME', 'MAYBE', 'STRAP', 'RANCH', 'SHYLY', 'KAZOO', 'FROST', 'CRANE', 'TASTE', 'COVET', 'GRAND', 'RODEO', 'GUEST', 'ABOUT', 'TRACT', 'DINER', 'STRAW', 'BLEEP', 'MOSSY', 'HOTEL', 'IRATE', 'VENOM', 'WINDY', 'DONUT', 'COWER', 'ENTER', 'FOLLY', 'EARTH', 'WHIRL', 'BARGE', 'FIEND', 'CRONE', 'TOPAZ', 'DROOP', 'FLYER', 'TONIC', 'FLANK', 'BURLY', 'FROZE', 'WHALE', 'HOBBY', 'WHEEL', 'HEART', 'DISCO', 'ETHOS', 'CURLY', 'BATHE', 'STYLE', 'TENTH', 'BEGET', 'PARTY', 'CHART', 'ANODE', 'POLYP', 'BROOK', 'BULLY', 'LOVER', 'EMPTY', 'HELLO', 'QUICK', 'WRATH', 'SNAKY', 'INDEX', 'SCRUB', 'AMISS', 'EXACT', 'MAGMA', 'QUEST', 'BEACH', 'SPICE', 'VERVE', 'WORDY', 'OCEAN', 'CHOIR', 'PEACE', 'WRITE', 'CAPER', 'AUDIO', 'BRIDE', 'SPACE', 'ONION', 'AWAIT', 'GIDDY', 'BIRCH', 'GNASH', 'DWELL', 'ROUSE', 'LUCKY', 'QUOTE', 'OLDER', 'WHISK', 'CLEAR', 'RAYON', 'EXERT', 'ANGEL', 'MUSIC', 'FRANK', 'CLOSE', 'SNARE', 'STONE', 'BRUSH', 'CAROL', 'RIGHT', 'ROCKY', 'LOYAL', 'SMILE', 'COACH', 'AZURE', 'DADDY', 'BERET', 'MERRY', 'WHILE', 'SPURT', 'BUNCH', 'CHIME', 'VIOLA', 'BINGE', 'TRUTH', 'SNAIL', 'SKUNK', 'KNELT', 'UNCLE', 'AGENT', 'LEAKY', 'GRAPH', 'ADULT', 'MERCY', 'SPLAT', 'OCCUR', 'SMIRK', 'GIVEN', 'TEMPO', 'CAUSE', 'RETRY', 'PIQUE', 'NOBLE', 'MASON', 'PHONY', 'GRAIL', 'BLEAK', 'NOISE', 'UNTIL', 'ARDOR', 'MANIA', 'FLARE', 'TRADE', 'LIMIT', 'NINJA', 'GLAZE', 'LEASH', 'ACTOR', 'MEANT', 'GREEN', 'SASSY', 'SIGHT', 'TRUST', 'TARDY', 'THINK', 'QUEUE', 'CANDY', 'PIANO', 'PIXEL', 'QUEEN', 'THROW', 'GUIDE', 'SOLID', 'TAWNY', 'SCOPE', 'SUSHI', 'RESIN', 'TAKEN', 'GENRE', 'ADAPT', 'WORST', 'YOUNG', 'WOMAN', 'SLEEP', 'SHARP', 'SHIFT', 'CHAIN', 'HOUSE', 'THESE', 'SPENT', 'WOULD', 'TOPIC', 'GLOBE', 'BACON', 'FUNNY', 'TABLE', 'SMALL', 'BUILT', 'TOUCH', 'SLOPE', 'GRACE', 'EVOKE', 'PHONE', 'DAISY', 'LEARN', 'CHILD', 'THREE', 'SALTY', 'MURAL', 'AGING', 'TWIRL', 'SCANT', 'LUNGE', 'CABLE', 'STONY', 'FINAL', 'LINER', 'THREW', 'BRIEF', 'ROUTE', 'HEARD', 'DOING', 'LUNCH', 'BLOND', 'COURT', 'STOLE', 'THING', 'LARGE', 'NORTH', 'TWEAK', 'STILL', 'RELIC', 'BLOCK', 'ALOOF', 'SNAKE', 'EMBER', 'LEGGY', 'EXPEL', 'BULKY', 'ALIVE', 'CLEFT', 'MICRO', 'VERGE', 'REPEL', 'WHICH', 'AFTER', 'PLACE', 'STIFF', 'FRIED', 'NEVER', 'PASTA', 'SCRAM', 'TALON', 'ASCOT', 'STASH', 'PSALM', 'RIDGE', 'PRICE', 'MATCH', 'BUILD', 'HEAVY', 'APART', 'PIPER', 'SMITH', 'OFTEN', 'SENSE', 'DEVIL', 'IMAGE', 'FORTY', 'URBAN', 'STATE', 'FLAME', 'HUNCH', 'TEARY', 'CLONE', 'EARLY', 'CHEER', 'GRASP', 'PESKY', 'HEAVE', 'LOCAL', 'SINCE', 'ERUPT', 'TOXIN', 'SNORT', 'SPELT', 'ABIDE', 'LINGO', 'SHADE', 'DECAY', 'RISEN', 'TOWEL', 'SALLY', 'MAYOR', 'STUNG', 'SPEAK', 'REALM', 'FORCE', 'TABOO', 'FROND', 'SERUM', 'PLAIT', 'CLIMB', 'WRIST', 'FINCH', 'VOILA', 'BREED', 'MERGE', 'BROTH', 'LOUSE', 'WHINY', 'STEEL', 'BLIMP', 'EQUIP', 'SHANK', 'TITHE', 'FACET', 'RAISE', 'LUCID', 'JOLLY', 'LASER', 'ROVER', 'OVERT', 'INTRO', 'VAPID', 'GLEAM', 'PRUNE', 'CRAFT', 'PROWL', 'DIARY', 'SLICE', 'EBONY', 'VALUE', 'DECAL', 'SHAVE', 'MUSTY', 'PIOUS', 'JERKY', 'MEDIA', 'TIDAL', 'OUTER', 'CUMIN', 'AMASS', 'PINCH', 'STALL', 'TUTOR', 'BRINY', 'HITCH', 'NICER', 'DINGO', 'EXALT', 'SWISH', 'GLIDE', 'TITAN', 'BEVEL', 'SKIER', 'MINUS', 'PAPAL', 'GUMMY', 'CHAOS', 'BASIN', 'BRAVO', 'STARK', 'GROOM', 'ORGAN', 'ETHER', 'MELON', 'HENCE', 'CROWD', 'MANGA', 'SWUNG', 'DETER', 'ANGST', 'VAULT', 'PROUD', 'GRIND', 'PRIOR', 'COVER', 'TERSE', 'SCENT', 'PAINT', 'EDICT', 'BUGLE', 'DOLLY', 'SAVOR', 'KNEAD', 'ORDER', 'DROVE', 'ZEBRA', 'BUDDY', 'ADAGE', 'INLAY', 'THIGH', 'DEBUT', 'CRUSH', 'SCOFF', 'CANON', 'SHAPE', 'BLARE', 'GAUNT', 'CAMEO', 'JIFFY', 'ENACT', 'VIDEO', 'SWOON', 'DECOY', 'QUITE', 'NERDY', 'REFER', 'SHAFT', 'SPECK', 'CADET', 'PRONG', 'FORTE', 'PORCH', 'AWASH', 'JUICE', 'SMOCK', 'SUPER', 'FERAL', 'PENNE', 'CHALK', 'FLAKE', 'SCALE', 'LOWER', 'ENSUE', 'ANVIL', 'MACAW', 'SAUCY', 'OUNCE', 'MEDIC', 'SCONE', 'SKIFF', 'NEIGH', 'SHORE', 'ACORN', 'BRACE', 'STORM', 'LANKY', 'METER', 'DELAY', 'MULCH', 'BRUTE', 'LEECH', 'FILET', 'SKATE', 'STAKE', 'CROWN', 'LITHE', 'FLUNK', 'KNAVE', 'SPOUT', 'MUSHY', 'CAMEL', 'FAINT', 'STERN', 'WIDEN', 'RERUN', 'OWNER', 'DRAWN', 'DEBIT', 'REBEL', 'AISLE', 'BRASS', 'HARSH', 'BROAD', 'RECUR', 'HONEY', 'BEAUT', 'FULLY', 'PRESS', 'SMOKE', 'SEVEN', 'TEACH', 'STEAM', 'HANDY', 'TORCH', 'THANK', 'FAITH', 'BRAIN', 'RIDER', 'CLOUD', 'MODEM', 'SHELL', 'WAGON', 'TITLE', 'MINER', 'LAGER', 'FLOUR', 'JOINT', 'MOMMY', 'CARVE', 'GUSTY', 'STAIN', 'PRONE', 'GAMUT', 'CORER', 'GRANT', 'HALVE', 'STINT', 'FIBER', 'DICEY', 'SPOON', 'SHOUT', 'GOOFY', 'BOSSY', 'FROWN', 'WREAK', 'SANDY', 'BAWDY', 'TUNIC', 'EASEL', 'WEIRD', 'SIXTH', 'SNOOP', 'BLAZE', 'VINYL', 'OCTET', 'TRULY', 'EVENT', 'READY', 'SWELL', 'INNER', 'STOIC', 'FLOWN', 'PRIMP', 'UVULA', 'TACKY', 'VISOR', 'TALLY', 'FRAIL', 'GOING', 'NICHE', 'SPINE', 'PEARL', 'JELLY', 'TWIST', 'BROWN', 'WITCH', 'SLANG', 'CHOCK', 'HIPPO', 'DOGMA', 'MAUVE', 'GUILE', 'SHAKY', 'CRYPT', 'ENDOW', 'SHOVE', 'HILLY', 'HYENA', 'FLUNG', 'PATIO', 'PLUMB', 'VYING', 'BOXER', 'DROOL', 'FUNKY', 'BOAST', 'SCOWL', 'HEFTY', 'STRAY', 'FLASH', 'BLADE', 'BRAWN', 'SAUNA', 'EAGLE', 'SHARE', 'AFFIX', 'GRAIN', 'DECRY', 'MAMBO', 'STARE', 'LEMUR', 'NERVE', 'CHOSE', 'CHEAP', 'RELAX', 'CYBER', 'SPRIG', 'ATLAS', 'DRAFT', 'WAFER', 'CRAWL', 'DINGY', 'TOTAL', 'CLOAK', 'FANCY', 'KNACK', 'FLINT', 'PROSE', 'SILLY', 'ROWER'
];
//next solution date retrieval: getSolution.sh 2025-01-20
/*
getSolution.sh script contents:

#!/bin/zsh

# use undocumented Wordle API to fetch Solutions
# v3
# 20241031
# usage: getSolution YYYY-MM-DD

first_run="true"
output=""

getSolution() {
  result=$(curl --silent "https://www.nytimes.com/svc/wordle/v2/$1.json" | jq --raw-output 'if has("solution") then .solution else empty end')
  if [[ -n $result ]]; then
    if [[ $first_run == "true" ]]; then
      printf "\n, '"
      output+=", '"
      first_run="false"
    else
      printf "', '"
      output+="', '"
    fi
    result_upper=$(echo "$result" | tr '[:lower:]' '[:upper:]')
    printf "\033[32m%s\033[0m" "$result_upper"
    output+="$result_upper"
  else
    # Calculate and print next solution fetch date
    next_day=$(date -j -v+1d -f "%Y-%m-%d" "$final_date" +%Y-%m-%d)
    printf "\n\n\033[38;5;208mSolutions copied to clipboard!\n\n\033[31mno further solutions after date: %s\n\nnext solution date retrieval: getSolution.sh %s\n\n\033[0m" "$final_date" "$next_day"
    output+="'"
    return 1
  fi
}

if [[ -z $1 ]]; then
  echo "Please enter the Start date (YYYY-MM-DD): "
  read date
else
  date=$1
fi

while getSolution "$date"; do
  final_date=$date
  date=$(date -j -v+1d -f "%Y-%m-%d" "$date" +%Y-%m-%d)
done

echo -n $output | pbcopy
*/
//#endregion word arrays
//#region constants
const testMode = Boolean(false);          //testMode = true: allow non-Answers and non-Guesses
const logGeneral = Boolean(false);        //logGeneral = true: show general info messages on console
const logTabbing = Boolean(false);        //logTabbing = true: show auto focus next tab debug info messages on console
const logKeyboard = Boolean(false);       //logKeyboard = true: show keyboard/tap info messages on console
const logFilterRules = Boolean(false);    //logFilterRules = true: filter rules debug messages on console
const logFiltering = Boolean(false);      //logFiltering = true: filtering debug messages on console
const logErrorChecking = Boolean(false);  //logErrorChecking = true: error checking rules debug messages on console
const logFiltered = Boolean(false);       //logFiltered = true: filtered debug messages on console
const logAutoTest = Boolean(true);        //logAutoTest = true: automated testing debug messages on console
const logAutoResults = Boolean(false);    //logAutoResults = true: automated results debug messages on console
const logDatePicker = Boolean(false);     //logDatePicker = true: date picker results debug messages on console
const logAnswers = Boolean(false);        //logAnswers = true: answer string debug messages on console
const spoilerModePre = Boolean(false);    //spoilerMode = true: show Today's Answer in console
const rgbGray = 'rgb(58, 58, 60)';        //Gray   = #3a3a3c rgb(58, 58, 60)
const rgbBlack = 'rgb(0, 0, 0)';          //Black  = #000000 rgb(0, 0, 0)
const rgbYellow = 'rgb(181, 159, 59)';    //Yellow = #b59f3b rgb(181, 159, 59)
const rgbGreen = 'rgb(83, 141, 78)';      //Green  = #538d4e rgb(83, 141, 78)
const stateIncorrect = 'incorrect';       //metadata attribute for Black
const stateMisplaced = 'misplaced';       //metadata attribute for Yellow
const stateCorrect = 'correct';           //metadata attribute for Green
const stateTBD = 'tbd';                   //metadata attribute for unknown
const millisecondsPerDay = 24 * 60 * 60 * 1000;     //hours*minutes*seconds*milliseconds = millseconds per day
//const start = new Date(2021, 5, 19);              //date of first Wordle June 19, 2021 (month is 0 indexed)
//const start = new Date('2021-05-19T00:00:00');    //date of first Wordle June 19, 2021 (month is 0 indexed)
const start = new Date('2021/6/19');                //date of first Wordle June 19, 2021
const today = new Date();                           //today's date
//#endregion constants
//#region globals;
let diffDays = daysBetween(start, today); //new function to compute days between two dates
let answer = '';                          //answer via built-in answers array
let solution = '';                        //solution obtained via Wordle API
const boolFutureDate = Boolean(true);     //boolFutureDate = true: allow future dates
let boolAnswersOnly = Boolean(false);     //boolAnswersOnly = false: include possible guesses, not only possible Answers
let boolPrevAnswers = Boolean(true);      //boolPrevAnswers = true: include previous Answers
let boolAutoResults = Boolean(true);      //boolAutoResults = true: auto enter guess results based on Today's Answer
let boolAutoTest = Boolean(false);        //boolAutoTest = true: run automated testing
let streakSaver = Boolean(true);          //streakSaver = true: Greenify Guess if it's Today's Answer
let aryAllPossibleAnswers = [];           //array of all possible answers (possibly without previous answers)
let numFiveLetterWords = 0;               //global tracking number of possible words
let container = '';                       //global Easter Egg container
let fireworks = '';                       //global Easter Egg effect
let version = '';                         //global version
let useCaseData = [];
//#endregion globals
//#region init
document.addEventListener('DOMContentLoaded', function () {         //fires when DOM loaded (ready)
  getSolution(today);                                               //retrieve today's solution from PHP
  getVersion();                                                     //retrieve version data from file
  getUseCases();                                                    //retrieve use case data from file
  consoleLog(logGeneral, 'DOM ready!');                             //log DOM ready
  UIeventHandlers();                                                //attach handlers to UI events
  initialize();                                                     //initialize things
});//DOM loaded
async function getSolution(date) {                                  //get solution for date from Wordle API via PHP (CORS)
  //consoleLog(spoilerModePre, 'date: ' + date);
  if (typeof date === 'undefined') date = today;                    //no date var passed to function so use today
  if (!(date instanceof Date)) date = new Date(date);
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const formattedDate = `${year}-${month}-${day}`;
  consoleLog(spoilerModePre, 'formattedDate: ' + formattedDate);
  const solutionDate = formattedDate;
  const solutionURL = 'https://www.innoengserv.com/Wordle_Solver/Wordle_Solver_solution.php?solutionDate=' + solutionDate;
  //const solutionURL = 'http://innoengserv.freesite.online/Wordle_Solver/Wordle_Solver_solution.php?solutionDate=' + solutionDate;
  const requestSolution = new Request(solutionURL);
  consoleLog(spoilerModePre, 'solutionURL: ' + solutionURL);
  let solutionJSON = {};                                            //initialize an empty object
  answer = aryAllAnswersOrdered[diffDays];                          //init w built-in answer array; long API fetch fail timeout
  try {                                                             //try to get most recent solution online via API
    const responseSolution = await fetch(requestSolution);
    if (!responseSolution.ok) {
      throw new Error(`Error fetching solution: ${responseSolution.statusText}`);
    }//if
    solutionJSON = await responseSolution.json();
    consoleLog(spoilerModePre, 'Preliminary parsed solutionJSON: ' + solutionJSON + ', Type: ' + typeof solutionJSON);
    try {
      solutionJSON = JSON.parse(solutionJSON);                      //parse the string into an object
      consoleLog(spoilerModePre, 'Final parsed solutionJSON: ' + solutionJSON + ', Type: ' + typeof solutionJSON);
    } catch (error) {
      consoleLog(true, 'Error parsing solutionJSON: ', error);
      return false;                                                 //exit on parsing error
    }//try
    consoleLog(spoilerModePre, 'Parsed solutionJSON: ' + solutionJSON + ', Type: ' + typeof solutionJSON);
  } catch (error) {
    console.error('Error fetching solution:', error);
    consoleLog(true, 'Error fetching solution: ' + error);
  }//try
  //good result: {"id":613,"solution":"nanny","print_date":"2023-06-03","days_since_launch":714,"editor":"Tracy Bennett"}
  ///bad result: {"status":"ERROR","errors":["Not Found"],"results":[]}
  if ('solution' in solutionJSON) {
    solution = solutionJSON.solution.toUpperCase();                 //solution for date available via Wordle API
    if (answer !== solution) {                                      //built-in Answer does not match API solution
      toast('API Answer and built-in Answer differ!');
    }//if
    answer = solution;                                              //use Wordle API solution as answer
    consoleLog(spoilerModePre, 'solution via PHP cURL: ' + solution);
    consoleLog(spoilerModePre, 'built-in answer: ' + answer);
    return true;                                                    //indicate success
  } else {                                                          //solution for date NOT available via Wordle API
    consoleLog(spoilerModePre, 'date out of range OR Wordle API changed!');
    //solution = '';
    //answer = aryAllAnswersOrdered[diffDays];                        //use built-in answer array for answer
    //answer was already initialized
    consoleLog(spoilerModePre, 'solution via PHP cURL: unavailable!');
    consoleLog(spoilerModePre, 'built-in answer: ' + answer);
    toast('solution not available!');
    return false;                                                   //indicate failure
  }//if
}//getSolution()
async function getVersion() {                                       //must be async function!
  const versionURL = '/Wordle_Solver/version.json';                 //json version info data
  const requestVersion = new Request(versionURL);
  const responseVersion = await fetch(requestVersion);
  const versionData = await responseVersion.json();
  version = versionData.buildMajor + '.' + versionData.buildMinor + '.' + versionData.buildRevision + '-' + versionData.buildTag;
  consoleLog(logGeneral, 'version: v' + version);                               //log version
  document.getElementById('version').innerHTML = 'v' + version.toString();      //update webpage footer version info
}//getVersion()
function UIeventHandlers() {                                                    //attach handlers to UI events
  const textInputs = document.querySelectorAll('input[type="text"]');           //get all text inputs
  for (const textInput of textInputs) {
    textInput.addEventListener('click', (e) => { inputClicked(e); });           //text input click handler
    textInput.addEventListener('keyup', (e) => { inputKeyup(e); });             //text input keyup handler
    textInput.addEventListener('keydown', (e) => { inputKeydown(e); });         //text input keydown handler
    textInput.addEventListener('contextmenu', (e) => { e.preventDefault(); });  //text input disable right-click context menu
  }//for text inputs
  const imageInputs = document.querySelectorAll('input[type="image"]');         //get all image inputs
  for (const imageInput of imageInputs) {
    imageInput.addEventListener('click', (e) => { imageClicked(e); });          //image input click handler
  }//for imageInputs
  document.getElementById('datePicker-input').addEventListener('change', (e) => { datePickerChanged(e); }); //date input change handler
  document.getElementById('dayNum-input').addEventListener('change', (e) => { dayNumChanged(e); });         //day num input change handler
  document.getElementById('copyright').addEventListener('click', (e) => { copyrightClicked(e); });          //copyright symbol click handler
  document.querySelectorAll('input[name="resultsMode"]').forEach((elem) => {                                //radio button change handler
    elem.addEventListener('change', function (e) { resultsModeClicked(e); });
  });
}//UIeventHandlers()
async function getUseCases() {                                                  //must be async function!
  const requestURL = '/Wordle_Solver/use_cases.json';
  const request = new Request(requestURL);
  const response = await fetch(request);
  useCaseData = await response.json();
}//getUseCases()
async function initialize() {                                                   //set default selections
  container = document.querySelector('.fireworks-container');
  consoleLog(logGeneral, 'today: ' + today + ', Wordle day#: ' + diffDays);
  aryAllPossibleAnswers = [];
  let answerOffset = 0;
  if (!boolPrevAnswers && boolAnswersOnly) { answerOffset = diffDays - 1; }     //skip previous answers
  for (let i = 0; i < aryAllAnswersOrdered.length - answerOffset; i++) {
    //aryAllPossibleAnswers[i] = aryAllAnswersOrdered[i + answerOffset];
    aryAllPossibleAnswers.push(aryAllAnswersOrdered[i + answerOffset]);
  }//for
  if (!boolAnswersOnly) {                                           //add all possible Guesses
    for (const word of aryAllPossibleGuesses) {
      if (!aryAllPossibleAnswers.includes(word)) {                  //if the word is not already in the array
        aryAllPossibleAnswers.push(word);                           //add it!
      }//if
    }//for
  }//if
  consoleLog(spoilerModePre, 'Wordle Day #:' + (diffDays) + ', Today\'s answer: ' + answer);
  numFiveLetterWords = aryAllPossibleAnswers.length;                //number of 5-letter words
  document.getElementById('possibilities').style.display = 'none';
  document.getElementById('datePicker-input').valueAsDate = today;
  //document.getElementById('datePicker-input').setAttribute('max', formatDate(today));
  document.getElementById('dayNum-input').value = diffDays;
  if (boolAutoResults) {
    document.getElementById('resultsMode-div').style.display = 'none';
    document.getElementById('datePicker-div').style.display = 'block';
  } else {
    document.getElementById('datePicker-div').style.display = 'none';
    document.getElementById('resultsMode-div').style.display = 'block';
  }//if else
  document.getElementById('words').style.display = 'none';
  consoleLog(logGeneral, 'number of 5-letter words: ' + numFiveLetterWords.toLocaleString());
  if (boolAutoTest) { automatedTesting(); }                         //run automated testing
  //document.getElementById('guess_1_1').focus();                     //set focus to first letter of first guess
  focusInit();                                                      //set focus to first letter of first guess using hacky method
}//initialize()
//#endregion init
//#region helper functions
function focusInit() {
  const fakeInput = document.createElement('input');                //create invisible dummy input to receive the focus first
  fakeInput.setAttribute('type', 'text');
  fakeInput.style.position = 'absolute';
  fakeInput.style.opacity = 0;
  fakeInput.style.height = 0;
  fakeInput.style.fontSize = '16px';                                //disable auto zoom
  //fakeInput.inputMode = 'none'                                      //set this to disable keyboard popup
  //may need to append to another element depending on the browser's auto zoom/scroll behavior
  document.body.prepend(fakeInput);
  fakeInput.focus();                                                //focus so that subsequent async focus will work
  setTimeout(() => {                                                //now we can focus the real target input
    document.getElementById('guess_1_1').focus();                   //set focus to first letter of first guess
    fakeInput.remove();                                             //cleanup
  }, 1000);
}//focusInit()
function resultsModeClicked(e) {
  if (document.querySelector('input[name="resultsMode"]:checked').value === 'automatic') {
    boolAutoResults = true;                                         //enable auto results
    streakSaver = true;                                             //enable streak saver
  } else if (document.querySelector('input[name="resultsMode"]:checked').value === 'manual') {
    boolAutoResults = false;                                        //disable auto results
    streakSaver = false;                                            //disable streak saver
  } else {
    consoleLog(true, 'Something\'s wrong!');                        //radio button values changed?
  }//if else
  window.scroll(0, 0);                                              //scroll to top of page
  consoleLog(logAutoResults, 'automatic results: ' + boolAutoResults);
  toast('automatic results ' + (boolAutoResults ? 'enabled' : 'disabled'));
  resetGrid();                                                      //reset grid
  initialize();                                                     //initialize
  //e.preventDefault();
}//resultsModeClicked()
function copyrightClicked() {
  boolAnswersOnly = !boolAnswersOnly;                               //toggle Answers only boolean switch
  boolPrevAnswers = !boolPrevAnswers;                               //toggle Previous Answers only boolean switch
  window.scroll(0, 0);                                              //scroll to top of page
  consoleLog(logAutoResults, 'Results include future Answers only: ' + boolAnswersOnly);
  toast('Results include future Answers only: ' + (boolAnswersOnly ? 'enabled' : 'disabled'));
  resetGrid();                                                      //reset grid
  initialize();                                                     //initialize
}//copyrightClicked()
async function dayNumChanged() {
  diffDays = daysBetween(start, today); //used to be: diffDays = Math.floor((today - start) / oneDay);
  let dayNum = +document.getElementById('dayNum-input').value;      //The unary plus (+) coerces its operand into a number
  const archiveDate = new Date(start);
  archiveDate.setDate(archiveDate.getDate() + dayNum);
  const solutionResult = await getSolution(archiveDate);            //get solution for new date
  if ((dayNum > diffDays) && !boolFutureDate) {                     //do not allow choosing date in the future
    consoleLog(logDatePicker, 'error: future dayNum! ' + dayNum);
    dayNum = diffDays;
  } else if (dayNum < 0) {
    consoleLog(logDatePicker, 'error: negative dayNum!' + dayNum);
    dayNum = 0;
  } else if (!solutionResult) {
    consoleLog(logDatePicker, formatDate(archiveDate) + ' is too far in future; solution unknown!');
    archiveDate.setDate(archiveDate.getDate() - dayNum);
    dayNum = daysBetween(start, today);                             //difference in days
    archiveDate.setDate(archiveDate.getDate() + dayNum);
    document.getElementById('datePicker-input').value = formatDate(today);
  }//if else
  consoleLog(logDatePicker, 'archiveDate: ' + formatDate(archiveDate));
  consoleLog(logDatePicker, 'diffDays: ' + diffDays);
  consoleLog(logDatePicker, 'dayNum: ' + dayNum);
  diffDays = dayNum;
  document.getElementById('datePicker-input').value = formatDate(archiveDate);
  document.getElementById('dayNum-input').value = diffDays;
  stopFireworks();
  resetGrid();
}//dayNumChanged()
async function datePickerChanged() {
  const dateValue = document.getElementById('datePicker-input').value;
  const date = new Date(dateValue);
  date.setDate(date.getDate() + 1);                                 //needed + 1 day to work
  const solutionResult = await getSolution(date);                   //get solution for new date
  consoleLog(true, 'solutionResult: ' + solutionResult);
  let diff = daysBetween(start, dateValue) + 1;                     //20230320 added +1 to make date picker work
  consoleLog(logDatePicker, 'dateValue minus start: ' + diff);
  if ((daysBetween(dateValue, today) <= 0) && !boolFutureDate) {
    consoleLog(logDatePicker, 'error: future date!');
    diff = daysBetween(start, today);                               //difference in days
    document.getElementById('datePicker-input').value = formatDate(today);
  } else if (diff < 0) {
    consoleLog(logDatePicker, 'error: date before official start!');
    diff = 0;
    document.getElementById('datePicker-input').value = formatDate(start);
  } else if (!solutionResult) {
    consoleLog(true, 'I\'m here!');
    consoleLog(logDatePicker, formatDate(date) + ' is too far in future; solution unknown!');
    diff = daysBetween(start, today);                               //difference in days
    document.getElementById('datePicker-input').value = formatDate(today);
  }//if else
  diffDays = diff;
  document.getElementById('dayNum-input').value = diffDays;
  stopFireworks();
  consoleLog(logDatePicker, 'archiveDate: ' + formatDate(dateValue));
  consoleLog(logDatePicker, 'diffDays: ' + diffDays);
  //consoleLog(logDatePicker, 'dayNum: ' + dayNum);
  resetGrid();
}//datePickerChanged()
function treatAsUTC(date) {
  const result = new Date(date);
  result.setMinutes(result.getMinutes() - result.getTimezoneOffset());
  return result;
}//treatAsUTC()
function daysBetween(startDate, endDate) {
  const daysBetween = (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerDay;
  consoleLog(logDatePicker, 'daysBetween: ' + daysBetween);
  consoleLog(logDatePicker, 'Math.floor(daysBetween): ' + Math.floor(daysBetween));
  return Math.floor(daysBetween);       //used to be: return Math.round(daysBetween);
}//daysBetween()
function formatDate(dateValue) {                                    //helper function to format date to string
  if (typeof dateValue === 'object' && dateValue !== null && 'getDate' in dateValue) {  //test if dateValue is object type
    let dd = dateValue.getDate();
    let mm = dateValue.getMonth() + 1;  //0-indexed; January is 0!
    const yyyy = dateValue.getFullYear();
    if (dd < 10) { dd = '0' + dd; }//if
    if (mm < 10) { mm = '0' + mm; }//if
    return yyyy + '-' + mm + '-' + dd;
  } else {
    return dateValue;
  }
}//formatDate()
function resetGrid() {                                              //clear letter grid
  for (let guessPosition = 1; guessPosition <= 6; guessPosition++) {
    for (let letterPosition = 1; letterPosition <= 5; letterPosition++) {
      const gridId = 'guess_' + guessPosition + '_' + letterPosition;
      const gridElement = document.getElementById(gridId);
      gridElement.value = ' ';                                      //reset to default letter value (space)
      gridElement.dataset.state = stateTBD;                         //reset metadata attribute
      gridElement.style.backgroundColor = rgbBlack;                 //make background Black
      gridElement.style.border = '2px solid ' + rgbGray;            //make border Gray
    }//for
  }//for
  document.getElementById('possibilities').style.display = 'none';  //hide possibilities div
  document.getElementById('words').style.display = 'none';          //hide words div
  document.getElementById('help-inner').style.display = 'block';    //show help div
}//resetGrid()
function inputKeydown(e) {                                          //handler for keydown event
  if ((e.shiftKey && (e.keyCode === 9)) || (e.keyCode === 9)) {     //Shift+Tab or Tab
    e.preventDefault();                                             //bypass normal processing
  }//if
}//inputKeydown()
function inputKeyup(e) {                                            //handler for keyup event
  consoleLog(logKeyboard, 'keyup event fired: e.which: ' + e.which + ' e.target.value: ' + e.target.value);
  let chrKeyPressed = '';
  if (e.which === 229) {                                            //Android
    chrKeyPressed = e.target.value.charCodeAt();                    //convert to ASCII code indirectly
  } else { chrKeyPressed = e.which; }                               //assume iOS; get ASCII code directly
  if (chrKeyPressed === 8) {                                        //backspace/delete key?
    consoleLog(logKeyboard, 'delete/backspace');                    //clear previous grid position
    findTabStop(e.target, 'backward').focus();                      //focus previous focussable element
    e.target.value = ' ';                                           //set default letter value
    e.target.style.backgroundColor = rgbBlack;                      //make background Black
    e.target.style.border = '2px solid ' + rgbGray;                 //make border Gray
    e.target.dataset.state = stateTBD;                              //reset metadata attribute
    solveIt();
    return;                                                         //terminate further processing
  } else if (chrKeyPressed >= 97 && chrKeyPressed <= 122) {         //lowercase?
    e.target.value = String.fromCharCode(chrKeyPressed - 32);       //convert to uppercase
  } else if (chrKeyPressed >= 65 && chrKeyPressed <= 90) {          //uppercase?
    e.target.value = String.fromCharCode(chrKeyPressed);            //uppercase
  } else {
    e.preventDefault();                                             //bypass normal processing
    return;                                                         //terminate further processing
  }//if else
  e.target.style.backgroundColor = rgbGray;                         //make background Gray
  e.target.style.border = '2px solid ' + rgbGray;                   //make border Gray too
  e.target.dataset.state = stateIncorrect;                          //set metadata attribute
  if (e.target.value === '') {                                      //non default value?
    e.target.value = ' ';                                           //set default letter value
    e.target.dataset.state = stateTBD;                              //reset metadata attribute
    return;                                                         //terminate further processing
  }//if
  findTabStop(e.target, 'forward').focus();                         //focus next focussable element
  consoleLog(logKeyboard, 'keyup event fired: e.which: ' + e.which + ' e.target.value: ' + e.target.value);
  solveIt();                                                        //autofire SolveIt!
}//inputKeyup()
function findTabStop(element, direction) {                          //find next tab stop in 'direction'
  consoleLog(logTabbing, 'direction: ' + direction);
  const universe = document.querySelectorAll('input[type=text');    //only input type=text (AKA the grid)
  const list = Array.prototype.filter.call(universe, function (item) { return item.tabIndex >= '0'; });
  consoleLog(logTabbing, 'universe.length: ' + universe.length);
  consoleLog(logTabbing, 'list.indexOf(element): ' + list.indexOf(element));
  consoleLog(logTabbing, 'direction: ' + direction);
  if (direction === 'forward') {
    consoleLog(logTabbing, 'forward');
    return ((list[list.indexOf(element) + 1]) ?? list[universe.length - 1]);  //if at the end, stay at the end
  } else if (direction === 'backward') {
    consoleLog(logTabbing, 'backward');
    return ((list[list.indexOf(element) - 1]) ?? list[0]);          //if at the beginning, stay at the beginning
  } else errorHandler('invalid tab direction!');                    //function called with unsupported parameter
}//findTabStop()
function inputClicked(e) {                                          //text input clicked: cycle through letter states
  e.target.setSelectionRange(0, 0);                                 //unselect automatically selected text
  if (e.target.dataset.state !== stateTBD) {                        //metadata attribute set?
    if (e.target.dataset.state === stateIncorrect) {                //is it Gray?
      e.target.style.backgroundColor = rgbYellow;                   //make background Yellow
      e.target.style.border = '2px solid ' + rgbYellow;             //make border Yellow too
      e.target.dataset.state = stateMisplaced;                      //set metadata attribute for Yellow
    } else if (e.target.dataset.state === stateMisplaced) {         //is it Yellow?
      e.target.style.backgroundColor = rgbGreen;                    //make background Green
      e.target.style.border = '2px solid ' + rgbGreen;              //make border Green too
      e.target.dataset.state = stateCorrect;                        //set metadata attribute for Green
    } else if (e.target.dataset.state === stateCorrect) {           //is it Green?
      e.target.style.backgroundColor = rgbGray;                     //make background Gray
      e.target.style.border = '2px solid ' + rgbGray;               //make border Gray too
      e.target.dataset.state = stateIncorrect;                      //set metadata attribute for Gray
    } else {                                                        //metadata attribute still reset
      consoleLog(logKeyboard, 'unsupported grid letter state!');    //catch unsupported state
    }//if else
  } else consoleLog(logKeyboard, 'empty gridCoord clicked!');       //metadata state attribute still unset (stateTBD)
  solveIt();                                                        //autofire SolveIt!
}//inputClicked()
function imageClicked(e) {                                          //image input clicked
  if (e.target.id === 'IES_logo_img') {                             //IES logo clicked
    if (location.pathname.slice(-3) === 'php') {                    //RPi
      window.location.replace('../index.php');                      //back to main index page (RPi)
    } else {                                                        //local file or gh-pages
      window.location.replace('../index.html');                     //back to main index page (local or gh-pages)
    }//if else
  } else if (e.target.id === 'Wordle_Solver_logo_img') {            //Wordle Logo clicked
    stopFireworks();
    window.location.reload();                                       //reload page
  } else if (e.target.id === 'BartmanEH_logo_img') {                //BartmanEH logo clicked
    toast('today\'s answer: ' + answer, 'bottom');
  }//if else
}//imageClicked()
function buildStrFilteredFiveLetterWords(array) {                   //helper function to concatenate strings (words)
  let strBuilt = '';
  //const linkStart = '<a style="text-decoration:none;" target="_blank" href="https://www.merriam-webster.com/dictionary/';
  //const linkStart = '<a style="text-decoration:none;" target="_blank" href="https://www.dictionary.net/';
  const linkStart = '<a style="text-decoration:none;" target="_blank" href="https://www.collinsdictionary.com/dictionary/english/';
  const space = '&nbsp; &nbsp;';                                    //must have normal space between non-breaking spaces
  for (const word of array) {
    const linkEnd = word.toLowerCase() + '">' + word + '</a></span>';
    if (aryAllAnswersOrdered.includes(word)) {                      //word is a possible Answer
      if (aryAllAnswersOrdered.indexOf(word) >= diffDays - 1) {         //word is a possible Future Answer; bold, italicize and underline word
        strBuilt += '<strong><em><u><span>' + linkStart + linkEnd + '</span></u></em></strong>' + space;
        consoleLog(logAnswers, 'Future Answer: ' + word + 'index: ' + aryAllAnswersOrdered.indexOf(word));
      } else {                                                      //word is a possible Answer, bold word
        strBuilt += '<strong><span style="font-size: 90%;">' + linkStart + linkEnd + '</span></strong>' + space;
        consoleLog(logAnswers, 'Answer: ' + word + 'index: ' + aryAllAnswersOrdered.indexOf(word));
      }//if else
    } else {                                                        //word is not a possible Answer; Guess only
      strBuilt += '<span style="font-size: 80%;">' + linkStart + linkEnd + space;
    }//if else
  }//for
  return strBuilt;
}//buildStrFilteredFiveLetterWords()
function toast(toastMessage, position) {
  if (typeof position === 'undefined') position = 'bottom';         //default to top if no position provided in call
  ToastMaker(toastMessage, 3000, { styles: { fontSize: '20px' }, valign: position }); /*global ToastMaker*/
}//toast()
function errorHandler(strError) {                                   //helper function to display results error messages
  document.getElementById('possibilities').style.display = 'none';  //'hide'
  document.getElementById('possibilities-text-span').innerHTML = strError;
  document.getElementById('words').style.display = 'block';         //'unhide'
}//errorHandler()
function consoleLog(boolLogSwitch, strMessage, logType) {           //helper function to display console log messages
  if (typeof boolLogSwitch === 'undefined') boolLogSwitch = true;   //default to true if no log switch provided in call
  if (typeof logType === 'undefined') logType = 'normal';           //default to true if no log switch provided in call
  if (logType === 'normal' && boolLogSwitch) {                      //default log type if no log type provided in call
    console.log(strMessage);                                        //normal console log message
  } else if (logType === 'warn' && boolLogSwitch) {
    console.warn(strMessage);                                       //warning console log message
  } else if (logType === 'error' && boolLogSwitch) {
    console.error(strMessage);                                      //error console log message
  } else if (boolLogSwitch) {
    console.error('invalid logType for message: ' + strMessage);
  }//if else
}//consoleLog()
function isSubsetInclDupes(includesArray, wordArray) {              //is includesArray a subset of wordArray incl. any duplicates?
  const occurrences = new Map();
  for (const entry of includesArray) {
    occurrences.set(entry, (occurrences.get(entry) ?? 0) + 1);      //nullish coalescing operator (??)
  }//for
  for (const entry of wordArray) {
    if (occurrences.has(entry)) { occurrences.set(entry, occurrences.get(entry) - 1); }
  }//for
  return [...occurrences.values()].every(count => count <= 0);
}//isSubsetInclDupes()
function compareArrays(array1, array2) {                            //compare two arrays for equivalence
  //return array1.length === array2.length && array1.every((value, index) => value === array2[index]);
  const array2Sorted = array2.slice().sort();
  return array1.length === array2.length && array1.slice().sort().every(function (value, index) {
    return value === array2Sorted[index];
  });
}//compareArrays()
function stopFireworks() {                                          //stop fireworks effect
  if (fireworks !== '') {                                           //fireworks are on
    fireworks.stop();                                               //stop fireworks
    fireworks = '';                                                 //'destroy' instance
    document.getElementsByTagName('canvas')[0].remove();            //remove fireworks canvas
  }//if else
}//stopFireworks()
function celebrate(guessPosition, message) {                        //Easter Egg graphics
  for (let guessLetterPosition = 1; guessLetterPosition <= 5; guessLetterPosition++) {
    const gridId = 'guess_' + guessPosition + '_' + guessLetterPosition;
    document.getElementById(gridId).style.backgroundColor = rgbGreen;         //make background Green
    document.getElementById(gridId).style.border = '2px solid ' + rgbGreen;   //make border Green too
    document.getElementById(gridId).dataset.state = stateCorrect;             //set metadata attribute to Green
  }//for
  errorHandler(message);
  const container = document.querySelector('.fireworks-container')
  stopFireworks();
  //fireworks = new Fireworks.default(container, { /* options */ })   /*global Fireworks*/
  const fireworks = new Fireworks(container, { traceSpeed: 1 });    /*global Fireworks*/
  fireworks.start();                                                //launch fireworks effect
  //fireworks.updateOptions({ traceSpeed: 1 });                       //fireworks v2
  //fireworks.setOptions({ traceSpeed: 1 });                          //fireworks v1 (doesn't seem to work)
// after initialization you can change the fireworks parameters
}//celebrate()
//#endregion helper functions
//#region automated testing
function automatedTesting() {                                       //automated testing
  toast('automated testing');
  console.clear();
  consoleLog(logAutoTest, 'commencing automated testing');
  //consoleLog(logAutoTest, useCaseData);
  //consoleLog(logAutoTest, useCaseData.useCases);
  let useCaseResults = 'Use Case';
  let useCaseResultsIds = '';
  let useCasesPassed = Boolean(true);
  useCaseData.useCases.forEach(useCase => {                         //loop thru all use cases
    //consoleLog(logAutoTest, useCase);
    //consoleLog(logAutoTest, 'id(' + useCase.id.length + '): ' + useCase.id);
    //consoleLog(logAutoTest, 'guess(' + useCase.guess.length + '): ' + useCase.guess);
    //consoleLog(logAutoTest, 'pattern(' + useCase.pattern.length + '): ' + useCase.pattern);
    //consoleLog(logAutoTest, 'possibilities(' + useCase.possibilities.length + '): ' + useCase.possibilities);
    //consoleLog(logAutoTest, 'testing use case id: ' + useCase.id);
    for (let useCaseGuess = 1; useCaseGuess <= useCase.guess.length; useCaseGuess++) {
      const guessWord = useCase.guess[useCaseGuess - 1].toString();
      //consoleLog(logAutoTest, 'guess: ' + guessWord);
      for (let letterPosition = 1; letterPosition <= 5; letterPosition++) {
        const gridId = 'guess_' + useCaseGuess + '_' + letterPosition;
        const gridElement = document.getElementById(gridId);
        //consoleLog(logAutoTest, 'guess Letter: ' + guessWord.substring(letterPosition - 1, letterPosition));
        gridElement.value = guessWord.substring(letterPosition - 1, letterPosition);
        const letterColor = useCase.pattern[useCaseGuess - 1].toString().substring(letterPosition - 1, letterPosition);
        if (letterColor === 'B') {                                  //is it Gray?
          gridElement.style.backgroundColor = rgbGray;              //make background Gray
          gridElement.style.border = '2px solid ' + rgbGray;        //make border Gray too
          gridElement.dataset.state = stateIncorrect;               //set metadata attribute for Gray
        } else if (letterColor === 'Y') {                           //is it Yellow?
          gridElement.style.backgroundColor = rgbYellow;            //make background Yellow
          gridElement.style.border = '2px solid ' + rgbYellow;      //make border Yellow too
          gridElement.dataset.state = stateMisplaced;               //set metadata attribute for Yellow
        } else if (letterColor === 'G') {                           //is it Green?
          gridElement.style.backgroundColor = rgbGreen;             //make background Green
          gridElement.style.border = '2px solid ' + rgbGreen;       //make border Green too
          gridElement.dataset.state = stateCorrect;                 //set metadata attribute for Gren
        } else {                                                    //pattern data error
          consoleLog(logAutoTest, 'invalid Pattern Colour!');
        }//if else
      }//for letterPosition
    }//for useCases
    const aryUseCasePossibilities = [];
    for (let useCasePossibilities = 1; useCasePossibilities <= useCase.possibilities.length; useCasePossibilities++) {
      aryUseCasePossibilities.push(useCase.possibilities[useCasePossibilities - 1].toString());
    }//for
    const aryTestPossibilities = solveIt() ?? [];                   //get possibilities for use case; if test fails, null is returned so use nullish coalescing operator to return empty array
    //╔═════════════════════════╗
    //║ The Central Scrutinizer ║
    //╚═════════════════════════╝
    if (compareArrays(aryUseCasePossibilities, aryTestPossibilities)) {
      consoleLog(logAutoTest, 'use case id: ' + ('00' + useCase.id).slice(-3) + ' pass!');
    } else {
      useCasesPassed = false;
      consoleLog(logAutoTest, 'use case id: ' + ('00' + useCase.id).slice(-3) + ' FAIL!', 'error');
      consoleLog(logAutoTest, 'use case comment: ' + useCase.comment, 'warn');
      consoleLog(logAutoTest, 'guesses(' + useCase.guess.length + '): ' + useCase.guess);
      consoleLog(logAutoTest, 'pattern(' + useCase.pattern.length + '): ' + useCase.pattern);
      consoleLog(logAutoTest, 'use case possibilities: ' + aryUseCasePossibilities.sort());
      consoleLog(logAutoTest, '    test possibilities: ' + aryTestPossibilities.sort());
      useCaseResultsIds += useCase.id + ', ';
    }//if else
    resetGrid();                                                    //reset Grid for next use case
  });//forEach useCase
  useCaseResultsIds = useCaseResultsIds.slice(0, -2);
  if (useCaseResultsIds.length > 2) { useCaseResults += 's'; }//if
  useCaseResults += ' ' + useCaseResultsIds;
  if (useCasesPassed) {
    consoleLog(logAutoTest, 'all ' + useCaseData.useCases.length + ' use cases PASSED!', 'warn');
    toast('all ' + useCaseData.useCases.length + ' use cases PASSED!');
  } else {
    consoleLog(logAutoTest, useCaseResults + ' FAILED!', 'error');
    toast(useCaseResults + ' FAILED!');
  }//if else
}//automatedTesting()
//#endregion automated testing
//#region solveIt
function solveIt() {
  consoleLog(logGeneral, 'Solve it!');
  document.getElementById('help-inner').style.display = 'none';     //hide help div
  document.getElementById('possibilities').style.display = 'none';  //hide possibilities div
  document.getElementById('words').style.display = 'none';          //hide words div
  const aryFilteredFiveLetterWords = [];
  let aryExcludeLetters = [];
  let aryIncludeLetters = [];
  let aryPatternLetters = ['*', '*', '*', '*', '*'];
  forGuessLoop:                                                     //eslint-disable-line
  for (let guessPosition = 1; guessPosition <= 6; guessPosition++) {
    let guessWord = '';
    const aryBoolFirstGreenOccurrence = [];
    const aryBoolFirstYellowOccurrence = [];
    forLetterLoop:                                                  //eslint-disable-line
    for (let letterPosition = 1; letterPosition <= 5; letterPosition++) {
      const gridId = 'guess_' + guessPosition + '_' + letterPosition;
      const gridElement = document.getElementById(gridId);
      const letter = gridElement.value.toUpperCase();
      if (letter === ' ' && guessWord.length < 5) {
        //errorHandler('gridCoord contains &lt;space&gt;! ' + gridCoord);
        if (letterPosition !== 1) {
          //consoleLog(logAutoResults, 'guessWord.length: ' + guessWord.length + ' breaking forGuessLoop');
          break forGuessLoop;                                       //eslint-disable-line
        } else {
          //consoleLog(logAutoResults, 'guessWord.length: ' + guessWord.length + ' breaking forLetterLoop');
          break forLetterLoop;                                      //eslint-disable-line
        }//if else
      }//if
      guessWord += letter;
      //check for trigger guess words
      if ((guessWord !== '     ') && (guessWord !== '') && (guessWord.length === 5)) {
        consoleLog(logFilterRules, 'testing guess word: ' + guessWord + ' for trigger');
        if (guessWord === 'HUOMO') {
          celebrate(guessPosition, 'Huomos easter egg!');
          aryPatternLetters = ['H', 'U', 'O', 'M', 'O'];
          aryExcludeLetters = aryIncludeLetters = [];
          return;                                                   //terminate further processing
        } else if (guessWord === 'ATEST') {                         //run automated testing
          const tempboolAnswersOnly = boolAnswersOnly;              //store setting
          const tempboolAutoResults = boolAutoResults;              //store setting
          boolAnswersOnly = false;                                  //include all possible guesses for testing
          boolAutoResults = false;                                  //disable auto results
          document.getElementById('automaticResults').checked = boolAutoResults;
          boolAutoTest = true;                                      //set bool to trigger automatic testing
          resetGrid();
          initialize();
          boolAutoTest = false;                                     //clear bool for automatic testing
          boolAnswersOnly = tempboolAnswersOnly;                    //restore setting
          boolAutoResults = tempboolAutoResults;                    //restore setting
          document.getElementById('automaticResults').checked = boolAutoResults;
          initialize();
          return;                                                   //terminate further processing
        } else if (!((aryAllPossibleGuesses.includes(guessWord)) || (aryAllPossibleAnswers.includes(guessWord)))) { //invalid guess word
          errorHandler('"' + guessWord + '" is not a possible guess word!');
          consoleLog(logFilterRules, '"' + guessWord + '" is not a possible guess word!');
          if (!testMode) { return; }//if
        } else {                                                    //guess = answer/solution?
          consoleLog(logGeneral, 'aryAllAnswersOrdered.indexOf(guessWord): ' + aryAllAnswersOrdered.indexOf(guessWord));
          consoleLog(logGeneral, 'diffDays: ' + diffDays);
          let boolStreakSaver = false;
          if (guessWord === solution) {                             //guess = solution
            consoleLog(spoilerModePre, 'guess word = solution!');
          }//if
          boolStreakSaver = streakSaver && (aryAllAnswersOrdered.indexOf(guessWord) === diffDays);
          if (boolStreakSaver) {
            celebrate(guessPosition, 'Streak Saver easter egg!');
            //aryPatternLetters[guessLetterPosition - 1] = document.getElementById(gridId).value.toUpperCase();
            aryPatternLetters = ['H', 'U', 'O', 'M', 'O'];
            aryExcludeLetters = aryIncludeLetters = [];
            return;                                                 //terminate further processing
          }//if
        }//if else
      }//if
      if (boolAutoResults) {                                        //automatic results based on answer
        //╔═══════════════════╗
        //║ automatic results ║
        //╚═══════════════════╝
        //consoleLog(logAutoResults, 'guessWord: ' + guessWord);
        //consoleLog(logAutoResults, 'exclude: ' + aryExcludeLetters);
        //consoleLog(logAutoResults, 'include: ' + aryIncludeLetters);
        //consoleLog(logAutoResults, 'pattern: ' + aryPatternLetters);
        //consoleLog(logAutoResults, 'today\'s answer: ' + answer);
        let todayAnswer = answer;
        consoleLog(logAutoResults, 'todayAnswer: ' + todayAnswer);
        //╔═════════════════╗
        //║ automatic GREEN ║
        //╚═════════════════╝
        for (let guessWordCheckPosition = 1; guessWordCheckPosition <= guessWord.length; guessWordCheckPosition++) {
          const gridId = 'guess_' + guessPosition + '_' + (guessWordCheckPosition);   //guessPosition is from main guess for loop way above
          const gridElement = document.getElementById(gridId);
          const gridLetter = guessWord[guessWordCheckPosition - 1];
          const todayAnswerLetter = todayAnswer[guessWordCheckPosition - 1];
          //consoleLog(logAutoResults, 'GREEN scrutinizer gridId: ' + gridId);
          if (gridLetter === todayAnswerLetter) {
            gridElement.style.backgroundColor = rgbGreen;           //make background Green
            gridElement.style.border = '2px solid ' + rgbGreen;     //make border Green too
            gridElement.dataset.state = stateCorrect;               //set metadata attribute to Green
            //todayAnswer = todayAnswer.substring(0, todayAnswer.indexOf(gridLetter)) + '*' + todayAnswer.substring(todayAnswer.indexOf(gridLetter) + 1); //overwrite GREEN letter with *
            todayAnswer = todayAnswer.substring(0, guessWordCheckPosition - 1) + '*' + todayAnswer.substring(guessWordCheckPosition); //overwrite GREEN letter with *
            consoleLog(logAutoResults, 'todayAnswer: ' + todayAnswer);
            //next 4 occurrences of 'letter' in next 4 lines changed to 'gridLetter' 22020407
            if (aryIncludeLetters.includes(gridLetter)) {           //already have this as Yellow letter
              consoleLog(logFilterRules, 'automatic Green: splicing Yellow Include now Green ' + gridLetter);
              aryIncludeLetters.splice(aryIncludeLetters.indexOf(gridLetter), 1); //remove Include letter
              //aryBoolFirstYellowOccurrence[gridLetter] = true;
              continue;
            }//if
          } else {                                                  //nuke any user clicks back to stateIncorrect
            consoleLog(logFilterRules, 'nuking...');
            gridElement.style.backgroundColor = rgbGray;            //make background Gray
            gridElement.style.border = '2px solid ' + rgbGray;      //make border Gray too
            gridElement.dataset.state = stateIncorrect;             //set metadata attribute for Gray
          }//if
        }//for
        //╔══════════════════╗
        //║ automatic YELLOW ║
        //╚══════════════════╝
        for (let guessWordCheckPosition = 1; guessWordCheckPosition <= guessWord.length; guessWordCheckPosition++) {
          const gridId = 'guess_' + guessPosition + '_' + (guessWordCheckPosition);   //guessPosition is from main guess for loop way above
          const gridElement = document.getElementById(gridId);
          const gridLetter = guessWord[guessWordCheckPosition - 1];
          //const todayAnswerLetter = todayAnswer[guessWordCheckPosition - 1];
          //consoleLog(logAutoResults, 'YELLOW scrutinizer gridId: ' + gridId);
          if (todayAnswer.includes(gridLetter) && (todayAnswer.indexOf(gridLetter) !== guessWordCheckPosition - 1) && (todayAnswer[guessWordCheckPosition - 1] !== '*')) {
            consoleLog(logAutoResults, 'YELLOW match');
            gridElement.style.backgroundColor = rgbYellow;          //make background Yellow
            gridElement.style.border = '2px solid ' + rgbYellow;    //make border Yellow too
            gridElement.dataset.state = stateMisplaced;             //set metadata attribute for Yellow
            todayAnswer = todayAnswer.substring(0, todayAnswer.indexOf(gridLetter)) + '+' + todayAnswer.substring(todayAnswer.indexOf(gridLetter) + 1); //overwrite GREEN letter with +
            consoleLog(logAutoResults, 'todayAnswer: ' + todayAnswer);
          }//if
        }//for guessWordCheckPosition
      }//if boolAutoResults
      //╔══════════════════════════════════════════════════╗
      //║ build Exclude, Include and Pattern letter arrays ║
      //╚══════════════════════════════════════════════════╝
      consoleLog(logFilterRules, 'new iteration');
      const boolFirstYellowOccurrence = aryBoolFirstYellowOccurrence[letter] ?? true;   //?? to init array elements
      const boolFirstGreenOccurrence = aryBoolFirstGreenOccurrence[letter] ?? true;     //?? to init array elements
      //╔══════╗
      //║ GRAY ║
      //╚══════╝
      if (gridElement.dataset.state === stateIncorrect) {           //stateIncorrect AKA Gray
        if (!aryExcludeLetters.includes(letter)) {                  //not Exclude letter
          if (!aryIncludeLetters.includes(letter)) {                //not Include letter
            if (!aryPatternLetters.includes(letter)) {              //not Pattern letter
              aryExcludeLetters.push(letter);                       //add to Exclude letters
            }//if
            //} else {                                                  //already an Include letter
            //consoleLog(logFilterRules, 'splicing Yellow Include now Gray letter ' + letter);    //not sure why I did this->removed
            //aryIncludeLetters.splice(aryIncludeLetters.indexOf(letter), 1);                     //not sure why I did this->removed
            //errorHandler('Yellow "' + letter + '"" cannot change to Gray!');                    //never seem to get here so->removed
            //return;                                                                             //not sure why I did this->removed
          }//if
        }//if
        if (aryPatternLetters[letterPosition - 1] === letter) {     //was Green in a previous Guess
          errorHandler('Green "' + letter + '" cannot change to Gray!');
          return;
        }//if
      //╔════════╗
      //║ YELLOW ║
      //╚════════╝
      } else if (gridElement.dataset.state === stateMisplaced) {    //stateMisplaced; AKA Yellow
        if (aryPatternLetters[letterPosition - 1] === letter) {     //was Green in a previous Guess
          errorHandler('Green "' + letter + '" cannot change to Yellow in same column!');
          return;
        } else if (aryExcludeLetters.includes(letter)) {            //already an exclude letter
          errorHandler('Gray "' + letter + '" cannot change to Yellow!');
          return;
        } else if (aryIncludeLetters.includes(letter)) {            //already have Include letter
          if (boolFirstYellowOccurrence) {                          //first Yellow occurrence
            consoleLog(logFilterRules, 'ignoring already included first Yellow occurrence: ' + letter);
            aryBoolFirstYellowOccurrence[letter] = false;
            continue;
          } else {                                                  //subsequent occurrence
            consoleLog(logFilterRules, 'including subsequent Yellow occurrence: ' + letter);
            aryIncludeLetters.push(letter);
            continue;
          }//if else
        } else {                                                    //not an Include letter
          if (aryPatternLetters.includes(letter)) {
            if (boolFirstGreenOccurrence) {
              consoleLog(logFilterRules, 'should be here');
              consoleLog(logFilterRules, 'ignoring already Green Yellow: ' + letter);
              aryBoolFirstYellowOccurrence[letter] = false;
              continue;
            } else {
              consoleLog(logFilterRules, 'but alas I\'m here with boolFirstGreenOccurrence: ' + boolFirstGreenOccurrence);
              consoleLog(logFilterRules, 'including first Yellow: ' + letter);
              aryIncludeLetters.push(letter);
              aryBoolFirstYellowOccurrence[letter] = false;
              continue;
            }//if else
          } else {
            consoleLog(logFilterRules, 'including first Yellow: ' + letter);
            aryIncludeLetters.push(letter);
            aryBoolFirstYellowOccurrence[letter] = false;
            continue;
          }//if else
        }//if else
      //╔═══════╗
      //║ GREEN ║
      //╚═══════╝
      } else if (gridElement.dataset.state === stateCorrect) {      //stateCorrect; AKA Green
        //consoleLog(logFilterRules, 'top of Green test, boolFirstGreenOccurrence: ' + boolFirstGreenOccurrence);
        if (aryExcludeLetters.includes(letter)) {                   //if it's an exclude letter, take it out
          consoleLog(logFilterRules, 'splicing Gray Exclude now Green letter' + letter);  //this should not happen with auto results!
          aryExcludeLetters.splice(aryExcludeLetters.indexOf(letter), 1);
        }//if
        if (aryPatternLetters[letterPosition - 1] === '*') {        //new Green
          consoleLog(logFilterRules, 'pattern Green ' + letter);
          aryBoolFirstYellowOccurrence[letter] = true;
          aryBoolFirstGreenOccurrence[letter] = false;
          consoleLog(logFilterRules, 'aryBoolFirstGreenOccurrence[letter]: ' + aryBoolFirstGreenOccurrence[letter]);
          aryPatternLetters[letterPosition - 1] = letter;           //put letter into Green pattern array
          if (aryIncludeLetters.includes(letter)) {                 //already have this as Yellow letter
            if (boolFirstYellowOccurrence) {
              consoleLog(logFilterRules, 'splicing Yellow Include now Green ' + letter);
              aryIncludeLetters.splice(aryIncludeLetters.indexOf(letter), 1); //remove Include letter
              //aryBoolFirstYellowOccurrence[letter] = true;
              continue;
            }//if
          }//if
        } else if (aryPatternLetters[letterPosition - 1] !== letter) {
          errorHandler(aryPatternLetters[letterPosition - 1] + ' and ' + letter + ' cannot be Green in same column!');
          return;
        }//if else
      }//if else (state)
    }//for letterPosition
    //╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
    //║ let's do some error checking, shall we? we have the whole Guess word here meow                                ║
    //╠═══════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
    //║ rules to error-check Guess word entry matches Wordle results:                                                 ║
    //║ (1) any guess word letters must be Green that are in same Green pattern array positions                       ║
    //║ (2) any guess word letters must be Gray that are in exclude array                                             ║
    //║ (3) all guess word letters must be yellow or Green that are in include array (incl. multiples of same letter) ║
    //╚═══════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
    //(1) any guess word letters must be Green that are in same Green pattern array positions
    //already done above: errorHandler('Green "' + letter + '"" cannot change to Gray!');
    //(2) any guess word letters must be Gray that are in exclude array
    //already done above: errorHandler('Gray "' + letter + '"" cannot change to Yellow!');
    //(3) all guess word letters must be yellow or Green that are in include array (incl. multiples of same letter)
    consoleLog(logErrorChecking, 'guessWord: ' + guessWord);
    consoleLog(logErrorChecking, 'exclude: ' + aryExcludeLetters);
    consoleLog(logErrorChecking, 'include: ' + aryIncludeLetters);
    consoleLog(logErrorChecking, 'pattern: ' + aryPatternLetters);
    consoleLog(logErrorChecking, 'checking rule #3: all guess word letters must be yellow or Green that are in include array (incl. multiples of same letter)');
    let boolCheck = Boolean(false);
    for (let aryIncludeLettersPosition = 1; aryIncludeLettersPosition <= aryIncludeLetters.length; aryIncludeLettersPosition++) {
      const includeLetter = aryIncludeLetters[aryIncludeLettersPosition - 1];
      consoleLog(logErrorChecking, 'checking Include letter: ' + includeLetter);
      for (let guessWordCheckPosition = 1; guessWordCheckPosition <= guessWord.length; guessWordCheckPosition++) {
        if (guessWord[guessWordCheckPosition - 1] === includeLetter) {  //guess word includes include letter
          const gridId = 'guess_' + guessPosition + '_' + (guessWordCheckPosition);   //guessPosition is from main guess for loop way above
          const gridElement = document.getElementById(gridId);
          consoleLog(logErrorChecking, 'gridId: ' + gridId);
          if (gridElement.dataset.state === stateIncorrect) {
            consoleLog(logErrorChecking, 'Includes letter ' + includeLetter + ' is Gray in this position of guess word ' + guessWord + '. Continuing to check any additional occurrences!');
            boolCheck = true;
          } else {                                                  //include letter still Yellow or changed to Green: OK!
            consoleLog(logErrorChecking, 'Includes letter ' + includeLetter + ' still Yellow or changed to Green: OK!');
            boolCheck = false;
            break;                                                  //no more checking required for this include letter
          }//if else
        }//if
      }//for guessWordCheckPosition
      if (boolCheck) {
        consoleLog(logErrorChecking, 'Letter "' + includeLetter + '" cannot change to Gray in guess word: ' + guessWord + '!');
        errorHandler('Letter "' + includeLetter + '" cannot change to Gray in guess word: ' + guessWord + '!');   //Gray letter is in includes array!
        return;                                                     //terminate further processing
      }//if
    }//for aryIncludeLettersPosition
    //╔═══════════════════╗
    //║ end of guess loop ║
    //╚═══════════════════╝
  }//for guessPosition
  if (logGeneral || logFilterRules || logFiltering || logFiltered) {
    consoleLog(true, 'exclude: ' + aryExcludeLetters);              //╔═══════════╗
    consoleLog(true, 'include: ' + aryIncludeLetters);              //║ FILTERING ║
    consoleLog(true, 'pattern: ' + aryPatternLetters);              //╚═══════════╝
  }//if
  for (let word of aryAllPossibleAnswers) {                         //loop through all possible words
    let boolExclude = Boolean(false);                               //true if word excludes all exclude letters
    let boolInclude = Boolean(false);                               //true if word includes any include letter
    const iterationWord = word;
    consoleLog(logFiltering, 'word: ' + word);
    //scrutinize GREENs
    let boolGREENsTest = Boolean(true);                             //true if word matches Green Pattern
    for (let letterPosition = 1; letterPosition <= 5; letterPosition++) {
      const patternLetter = aryPatternLetters[letterPosition - 1];
      const wordLetter = word.substring(letterPosition - 1, letterPosition);
      if ((patternLetter !== '*') && (wordLetter !== patternLetter)) {
        boolGREENsTest = false;
      } else if (wordLetter === patternLetter) {                    //GREEN letter match
        word = word.substring(0, letterPosition - 1) + '*' + word.substring(letterPosition);
        consoleLog(logFiltering, 'Green match word: ' + word);
      }//if
    }//for
    if (boolGREENsTest) {                                           //word matches Green pattern
      consoleLog(logFiltering, 'interim match word: ' + word);      //continue scrutinzing
      boolExclude = aryExcludeLetters.every(function (excludeLetter) { return !word.includes(excludeLetter); });
      consoleLog(logFiltering, 'word: ' + word + ' boolExclude: ' + boolExclude);
      if (boolExclude) {                                            //word excludes all Exclude letters
        boolInclude = isSubsetInclDupes(aryIncludeLetters, word);   //check if it includes all Include letters
        consoleLog(logFiltering, 'word: ' + word + ' boolInclude: ' + boolInclude);
        if (boolInclude) {                                          //word includes all Include letters
          aryFilteredFiveLetterWords.push(iterationWord);
          consoleLog(logFiltering, 'pushing word: ' + word);
        }//if boolInclude
      }//if boolExclude
    } else {                                                        //word doesn't match Green pattern
      consoleLog(logFiltering, 'no match, continuing');
      continue;                                                     //continue FOR word loop
    }//if else boolGREENsTest
  }//for word
  consoleLog(logFiltering, aryFilteredFiveLetterWords);
  const aryScrutinizedFilteredFiveLetterWords = [];
  //╔═══════════════════════════════════════════════════════════════════════════════════════════════╗
  //║ any Yellow letter in any grid position should not match with that letter in any possible word ║
  //╚═══════════════════════════════════════════════════════════════════════════════════════════════╝
  for (const word of aryFilteredFiveLetterWords) {                  //scrutinize Yellow letter include positions
    let boolG2G = Boolean(true);
    for (let guessPosition = 1; guessPosition <= 5; guessPosition++) {
      for (let letterPosition = 1; letterPosition <= 5; letterPosition++) {
        const gridId = 'guess_' + guessPosition + '_' + letterPosition;
        const gridElement = document.getElementById(gridId);
        const letter = gridElement.value.toUpperCase();
        if (letter === ' ') {
          continue;
        } else if (gridElement.dataset.state === stateMisplaced) {  //stateMisplaced: AKA Yellow
          for (let wordLetterPosition = 1; wordLetterPosition <= 5; wordLetterPosition++) {
            const wordLetter = word.substring(wordLetterPosition - 1, wordLetterPosition);
            if (wordLetter === letter) {
              //consoleLog(logFiltering, 'match: ' + word + ' ' + wordLetterPosition + ' ' + wordLetter);
              if (wordLetterPosition === letterPosition) {          //word has Yellow letter in same position
                boolG2G = false;                                    //reject word
                consoleLog(logFiltering, 'reject: ' + word + ' wordLetterPosition === letterPosition');
              } else {
                //consoleLog(logFiltering, 'keep ' + word);
                continue;                                           //keep word; don't unset boolG2G, stop further checking
              }//if else
            }//if
          }//for
        }//if else
      }//for
    }//for
    if (boolG2G) {                                                  //word excludes letter at Yellow letter position
      //consoleLog(logFiltering, 'push it real good!');
      aryScrutinizedFilteredFiveLetterWords.push(word);
    }//if
  }//for
  numFiveLetterWords = aryScrutinizedFilteredFiveLetterWords.length;
  let strPossibilities = ' ';
  aryScrutinizedFilteredFiveLetterWords.sort();                     //sort possibilites alphabetically
  if (numFiveLetterWords !== 0) {
    strPossibilities = buildStrFilteredFiveLetterWords(aryScrutinizedFilteredFiveLetterWords);
  }//if
  consoleLog(logFiltered, 'strPossibilities: "' + strPossibilities + '"');
  consoleLog(logFiltered, 'possibilities (filtered): ' + aryFilteredFiveLetterWords.length.toLocaleString());
  consoleLog(logFiltered, 'possibilities (scrutinized): ' + numFiveLetterWords.toLocaleString());
  document.getElementById('possibilities-number-span').innerHTML = 'possibilities: ' + numFiveLetterWords.toLocaleString();
  document.getElementById('possibilities').style.display = 'block'; //'unhide'
  document.getElementById('possibilities-text-span').innerHTML = strPossibilities;
  document.getElementById('words').style.display = 'block';         //'unhide'
  return aryScrutinizedFilteredFiveLetterWords;                     //pass array to caller
}//solveIt()
//#endregion solveIt
